@page "/"
@page "/index"
<SeoHeader Title="Home" Description="@SeoTranslations.Description" Url="/"></SeoHeader>
@inherits PageCore<Index>

@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Suggestions.Components;
@using SD.WEB.Modules.Provider.Components;
@using SD.WEB.Modules.News.Components;
@using SD.WEB.Modules.Trailers.Components

@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<Row VerticalGutter="4" HorizontalGutter="4" Margin="Margin.Is2.FromBottom">
    <Column>
        <TextEdit @bind-Text="@Search" Placeholder="@GlobalTranslations.TypeSomething" Size="Size.Small" KeyPress="KeyPress" />
    </Column>
    <Column ColumnSize="ColumnSize.IsAuto">
        <Button Color="Color.Primary" Block="true" Clicked="ShowSearchPopup" Disabled="string.IsNullOrEmpty(Search)" Size="Size.Small">
            @GlobalTranslations.ButtoSearch
        </Button>
    </Column>
</Row>

<PopularIndexComponent WatchedList="WatchedList" WatchingList="WatchingList" WishList="WishList"></PopularIndexComponent>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <TrailersComponent></TrailersComponent>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <NewsComponent></NewsComponent>
    </Column>
</Row>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter][SupplyParameterFromQuery(Name = "language")] public string? language { get; set; }

    public RenderControlCore<WatchedList> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList> CoreWishlist { get; set; } = new();    

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    public string? Search { get; set; }

    protected override void OnInitialized()
    {
        WatchedListApi.DataChanged += (WatchedList? model) => WatchedList = model;
        WatchedListApi.SetRenderCore(CoreWatched);

        WatchingListApi.DataChanged += (WatchingList? model) => WatchingList = model;
        WatchingListApi.SetRenderCore(CoreWatching);

        WishListApi.DataChanged += (WishList? model) => WishList = model;
        WishListApi.SetRenderCore(CoreWishlist);
    }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsUserAuthenticated);
        WatchingList = await WatchingListApi.Get(IsUserAuthenticated);
        WishList = await WishListApi.Get(IsUserAuthenticated);
    }

    public async Task ShowSearchPopup()
    {
        await ModalService.Show<SearchPopup>(null,
            x =>
            {
                x.Add(x => x.TitleHead, Search);
                x.Add(x => x.Search, Search);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.ExtraLarge,
                });
    }

    private async Task KeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await ShowSearchPopup();
        }
    }
}