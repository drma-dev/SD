@page "/"
@page "/Index"
<PageTitle>SD - Streaming Discovery</PageTitle>
@inherits PageCore<Index>
@inject Settings Settings
@using SD.WEB.Modules.List.Core.TMDB
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Core

<Alert Visible="true" Color="Color.Secondary">
    <AlertMessage>@TranslationText.Popular</AlertMessage>

    <RadioGroup CheckedValue="TypeSelected" CheckedValueChanged="TypeSelectedChanged" Buttons="true" Float="Float.End" Class="btn-group-xs" Disabled="true">
        <Radio Value="1">Streaming</Radio>
        <Radio Value="2">TV</Radio>
        <Radio Value="3">Alugar</Radio>
        <Radio Value="42">Cinemas</Radio>
    </RadioGroup>
</Alert>

<SD.WEB.Modules.List.Components.MediaList CardHeader="@TranslationText.Popular" Items="@ListPopular" maxItens="10" ShowHead="false"
                                          WishList="wishList" WishListChanged="@(async(WishList value)=>{wishList = value; })"
                                          WatchedList="watchedList" WatchedListChanged="@(async (WatchedList value) => { watchedList = value;  })">
</SD.WEB.Modules.List.Components.MediaList>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column>
        <Alert Visible="true" Color="Color.Secondary">
            <AlertMessage>@Provider.Resources.Translations.TitleProviders.Format(Settings?.Region)</AlertMessage>

            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@OpenCompleteList">
                <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
            </Button>
        </Alert>

        <CustomVisibility NoData="(!AllProviders?.Items.Any()??true)">
            <Row HorizontalGutter="4" VerticalGutter="4">
                @foreach (var item in GetFilteredProviders())
                {
                    <Column ColumnSize="ColumnSize.Is2.OnFullHD.Is4.OnDesktop.Is6.OnMobile">
                        <Card>
                            <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Alt="@item.name"
                                   onclick="@(() => ShowPopupProvider(item))" Style="cursor: pointer;"></CardImage>
                        </Card>
                        @*@if (string.IsNullOrEmpty(item.link))
                    {
                    <p class="m-0" style="color: red">link</p>
                    }
                    @if (string.IsNullOrEmpty(item.description))
                    {
                    <p class="m-0" style="color: red">description</p>
                    }
                    @if (!item.models.Any())
                    {
                    <p class="m-0" style="color: red">model</p>
                    }
                    @if (item.models.Any(a => a == SD.Shared.Modal.Enum.DeliveryModel.SVOD) && !item.plans.Any())
                    {
                    <p class="m-0" style="color: red">plan</p>
                    }*@
                    </Column>
                }
            </Row>
        </CustomVisibility>
    </Column>
    <Column>
        <Alert Visible="true" Color="Color.Secondary">
            <AlertMessage>Últimos Trailers</AlertMessage>
        </Alert>

        <CustomVisibility NoData="true">

        </CustomVisibility>
    </Column>
</Row>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    private HashSet<MediaDetail> ListPopular { get; set; } = new();

    public int TypeSelected { get; set; } = 1;
    public EventCallback<int> TypeSelectedChanged { get; set; }

    private AllProviders? AllProviders { get; set; }
    private WishList? wishList { get; set; }
    private WatchedList? watchedList { get; set; }

    public IEnumerable<ProviderModel> GetFilteredProviders() => AllProviders?.Items.OrderBy(o => o.priority).Where(p =>
        p.regions.Any(a => a == Settings.Region) &
        p.enabled &
        (p.empty_catalog.HasValue ? p.empty_catalog.Value == false : true))
        .Take(12) ?? Array.Empty<ProviderModel>();

    protected override Task OnInitializedAsync()
    {
        RefreshCore.RegionChanged = new EventCallbackFactory().Create(this, (Region value) => Settings.Region = value);

        return base.OnInitializedAsync();
    }

    protected override async Task LoadData()
    {
        try
        {
            wishList = await Http.WishList_Get(Session);
            watchedList = await Http.WatchedList_Get(Session);

            await Http.PopulateTMDBPopular(Session, Settings, ListPopular, null, 1);

            AllProviders = await Http.Provider_GetAll(Session);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenCompleteList()
    {
        //
    }

    private async Task ShowPopupProvider(ProviderModel item)
    {
        await ModalService.Show<Provider.Components.ProviderPopup>(item.name,
            x =>
            {
                x.Add(x => x.provider, item);
                x.Add(x => x.mediaType, MediaType.movie); //todo: passar null
                x.Add(x => x.WishList, wishList);
                x.Add(x => x.WatchedList, watchedList);
                x.Add(x => x.WishListChanged, new EventCallbackFactory().Create(this, (WishList value) => { wishList = value; }));
                x.Add(x => x.WatchedListChanged, new EventCallbackFactory().Create(this, (WatchedList value) => { watchedList = value; }));
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.ExtraLarge,
                });
    }
}