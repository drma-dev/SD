@page "/"
@page "/index"
<SeoHeader Title="Home" Description="@SeoTranslations.Description" Url="/"></SeoHeader>
@inherits PageCore<Index>

@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Suggestions.Components;
@using SD.WEB.Modules.Provider.Components;
@using SD.WEB.Modules.News.Components;
@using SD.WEB.Modules.Trailers.Components

@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@inject IJSRuntime JsRuntime

<Row VerticalGutter="4" HorizontalGutter="4" Margin="Margin.Is2.FromBottom">
    <Column>
        <TextEdit @bind-Text="@Search" Placeholder="@GlobalTranslations.TypeSomething" Size="Size.Small" KeyPress="KeyPress" />
    </Column>
    <Column ColumnSize="ColumnSize.IsAuto">
        <Button Color="Color.Primary" Block="true" Clicked="ShowSearchPopup" Disabled="string.IsNullOrEmpty(Search)" Size="Size.Small">
            @WEB.Resources.Button.Search
        </Button>
    </Column>
</Row>

<PopularIndexComponent WatchedList="Watched" WatchingList="Watching" WishList="Wish" ShowPrivateAction="true"></PopularIndexComponent>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <TrailersComponent></TrailersComponent>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <NewsComponent></NewsComponent>
    </Column>
</Row>

@code {
    [Parameter][SupplyParameterFromQuery(Name = "language")] public string? language { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "platform")] public string? platform { get; set; }


    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public string? Search { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        WatchedApi.DataChanged += (WatchedList? model) => { Watched = model; CoreWatched?.LoadingFinished?.Invoke(model); StateHasChanged(); };
        WatchingApi.DataChanged += (WatchingList? model) => { Watching = model; CoreWatching?.LoadingFinished?.Invoke(model); StateHasChanged(); };
        WishApi.DataChanged += (WishList? model) => { Wish = model; CoreWish?.LoadingFinished?.Invoke(model); StateHasChanged(); };

        if (platform.NotEmpty())
        {
            await JsRuntime.InvokeAsync<string>("SetLocalStorage", "platform", platform);
        }
        else
        {
            await JsRuntime.InvokeAsync<string>("TryDetectWindowsStore");
        }
    }

    protected override async Task LoadDataRender()
    {
        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));
    }

    public async Task ShowSearchPopup()
    {
        await ModalService.SearchPopup(Search, Search, Watched, Watching, Wish, true);
    }

    private async Task KeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await ShowSearchPopup();
        }
    }
}