@using SD.WEB.Modules.List.Core
@using SD.Shared.Model
@using SD.WEB.Modules.Profile.Core
@inherits ComponenteCore<CompleteListPopup>
@inject WatchedListApi WatchedListApi
@inject WishListApi WishListApi
@inject ExternalIdApi ExternalIdApi
@inject TmdbApi TmdbApi

<ModalHeader>
    <ModalTitle>@CardHeader</ModalTitle>
    <CloseButton Clicked="HideModal" />
</ModalHeader>
<ModalBody MaxHeight="70">
    <CustomVisibility NoData="(!Items.Any())">
        <Row HorizontalGutter="4" VerticalGutter="4">
            @for (int i = 1; i <= Items.Count; i++)
            {
                var item = Items.ElementAt(i - 1);
                <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
                    <Card>
                        <Blazorise.Link Clicked="@(() => OpenPopupMedia(item))" Style="position: relative;">
                            @if (ShowOnlyYear)
                            {
                                <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@item.release_date?.Year</Badge>
                            }
                            else
                            {
                                <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@item.release_date?.ToShortDateString()</Badge>
                            }
                            @if (item.rating >= 8)
                            {
                                <Badge Color="Color.Success" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px;">@item.rating</Badge>
                            }
                            else if (item.rating >= 6)
                            {
                                <Badge Color="Color.Warning" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px;">@item.rating</Badge>
                            }
                            else if (item.rating > 0)
                            {
                                <Badge Color="Color.Danger" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px;">@item.rating</Badge>
                            }
                            @if (string.IsNullOrEmpty(item.poster_small))
                            {
                                <CardImage Source="nopicture.jpg" Alt="@item.title" title="@item.title" Style="cursor: pointer;"></CardImage>

                                <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 115px;">
                                    @item.title
                                </Div>
                            }
                            else
                            {
                                var watchedMovie = WatchedList?.Movies.Any(a => a == item.tmdb_id & MediaType.movie == item.MediaType) ?? false;
                                var watchedShow = WatchedList?.Shows.Any(a => a == item.tmdb_id & MediaType.tv == item.MediaType) ?? false;
                                if (watchedMovie | watchedShow)
                                {
                                    <Blazorise.Icon Name="FontAwesomeIcons.Eye" IconSize="IconSize.x4"
                                        Style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0.7;"></Blazorise.Icon>
                                }
                                var wishedMovie = WishList?.Movies.Any(a => a.id == item.tmdb_id & MediaType.movie == item.MediaType) ?? false;
                                var wishedShow = WishList?.Shows.Any(a => a.id == item.tmdb_id & MediaType.tv == item.MediaType) ?? false;
                                if (wishedMovie | wishedShow)
                                {
                                    <Blazorise.Icon Name="FontAwesomeIcons.Bookmark" IconSize="IconSize.x2" TextColor="TextColor.Light"
                                        Style="position: absolute; bottom: 3px; right: 3px; opacity: 0.8;"></Blazorise.Icon>
                                }
                                <CardImage Source="@(item.poster_small)" Alt="@item.title" title="@item.title" Style=@($"cursor: pointer; {(watchedMovie | watchedShow?"opacity: 0.3":"")}")></CardImage>
                            }
                        </Blazorise.Link>
                        @if (!string.IsNullOrEmpty(item.comments))
                        {
                            <CardBody Padding="Padding.Is1">
                                @foreach (var item in item.comments.Split(","))
                                {
                                    <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item</Badge>
                                }
                            </CardBody>
                        }
                        <CardBody Padding="Padding.Is1">
                            @if (WishList?.Movies.Any(a => a.id == item?.tmdb_id && item?.MediaType == MediaType.movie) ?? false)
                            {
                                <Button Color="Color.Danger" Clicked="@(()=>Remove(item))" Margin="Margin.Is1.FromEnd" Size="Size.ExtraSmall" Style="min-width: 31.5px" title="Lista de Interesses">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon>
                                </Button>
                            }
                            else if (WishList?.Shows.Any(a => a.id == item?.tmdb_id && item?.MediaType == MediaType.tv) ?? false)
                            {
                                <Button Color="Color.Danger" Clicked="@(()=>Remove(item))" Margin="Margin.Is1.FromEnd" Size="Size.ExtraSmall" Style="min-width: 31.5px" title="Lista de Interesses">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon>
                                </Button>
                            }
                            else
                            {
                                <Button Color="Color.Primary" Clicked="@(()=>Add(item))" Margin="Margin.Is1.FromEnd" Size="Size.ExtraSmall" Style="min-width: 31.5px" title="Lista de Interesses">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon>
                                </Button>
                            }
                            @if (WatchedList?.Movies.Any(a => a == item?.tmdb_id && item?.MediaType == MediaType.movie) ?? false)
                            {
                                <Button Color="Color.Danger" Clicked="@(()=>NotWatched(item))" Margin="Margin.Is1.FromEnd" Size="Size.ExtraSmall" title="Assistido">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon>
                                </Button>
                            }
                            else if (WatchedList?.Shows.Any(a => a == item?.tmdb_id && item?.MediaType == MediaType.tv) ?? false)
                            {
                                <Button Color="Color.Danger" Clicked="@(()=>NotWatched(item))" Margin="Margin.Is1.FromEnd" Size="Size.ExtraSmall" title="Assistido">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon>
                                </Button>
                            }
                            else
                            {
                                <Button Color="Color.Primary" Clicked="@(()=>Watched(item))" Margin="Margin.Is1.FromEnd" Size="Size.ExtraSmall" title="Assistido">
                                    <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon>
                                </Button>
                            }
                        </CardBody>
                    </Card>
                </Column>
                if ((i % 10) == 0)
                {
                    <div class="w-100"></div>
                }
            }
            @for (int i = 1; i <= (10 - Items.Count % 10); i++)
            {
                <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
                </Column>
            }
        </Row>
        <Div TextAlignment="TextAlignment.Center">
            <Button Color="Color.Secondary" Margin="Margin.Is2" Clicked="LoadMore" Disabled="@(Items.Count>=maxItens|DisableLoadMore)">Carregar mais</Button>
        </Div>
    </CustomVisibility>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End">@TranslationText.Close</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public EventCallback NextPage { get; set; }
    [Parameter] public string? CardHeader { get; set; }
    [Parameter] public HashSet<MediaDetail> Items { get; set; } = new();
    [Parameter] public EnumLists list_id { get; set; }
    [Parameter] public int maxItens { get; set; } = 10;
    [Parameter] public bool IsIMDB { get; set; } = false;
    [Parameter] public bool ShowOnlyYear { get; set; } = true;
    [Parameter] public bool DisableLoadMore { get; set; } = false;
    [Parameter] public WishList? WishList { get; set; }
    [Parameter] public WatchedList? WatchedList { get; set; }

    [Parameter] public EventCallback<WishList> WishListChanged { get; set; }
    [Parameter] public EventCallback<WatchedList> WatchedListChanged { get; set; }

    private string GetCustomStyle => "col-xl col-md-2 col-4";
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            //if (!string.IsNullOrEmpty(list_id) && !NextPage.HasDelegate) throw new ArgumentNullException(nameof(NextPage));
            //if (NextPage.HasDelegate && string.IsNullOrEmpty(list_id)) throw new ArgumentNullException(nameof(list_id));
            if (string.IsNullOrEmpty(CardHeader)) throw new ArgumentNullException(nameof(CardHeader));
            if (maxItens == 0) throw new ArgumentNullException(nameof(maxItens));
            //if (WishList == null) throw new ArgumentNullException(nameof(WishList));
            //if (WatchedList == null) throw new ArgumentNullException(nameof(WatchedList));
            if (!WishListChanged.HasDelegate) throw new ArgumentNullException(nameof(WishListChanged));
            if (!WatchedListChanged.HasDelegate) throw new ArgumentNullException(nameof(WatchedListChanged));
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenPopupMedia(MediaDetail? media)
    {
        var tmdb_id = "";

        if (IsIMDB && media?.MediaType == MediaType.tv) //for now, only tv series (imdb) need this kind of workaround
        {
            tmdb_id = await ExternalIdApi.GetTmdbId(media?.tmdb_id);
        }
        else
        {
            tmdb_id = media?.tmdb_id;
        }

        await ModalService.Show<MediaPopup>(media?.title,
            x =>
            {
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, media?.MediaType);
                x.Add(x => x.ShowOnlyYear, ShowOnlyYear);
                x.Add(x => x.WishList, WishList);
                x.Add(x => x.WatchedList, WatchedList);
                x.Add(x => x.WishListChanged, new EventCallbackFactory().Create(this,
                    async (WishList value) => { WishList = value; await WishListChanged.InvokeAsync(value); }));
                x.Add(x => x.WatchedListChanged, new EventCallbackFactory().Create(this,
                    async (WatchedList value) => { WatchedList = value; await WatchedListChanged.InvokeAsync(value); }));
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }

    private async Task LoadMore()
    {
        if (NextPage.HasDelegate)
        {
            ++currentPage;
            await NextPage.InvokeAsync();
        }
        else
        {
            Items = await TmdbApi.GetListList(list_id, Items, ++currentPage);
        }
    }

    private async Task Add(MediaDetail? media)
    {
        try
        {
            if (WishList == null)
            {
                WishList = new WishList
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (media != null && media.MediaType == MediaType.movie)
            {
                WishList.Movies.Add(new WishListItem()
                    {
                        id = media?.tmdb_id,
                        name = media?.title,
                        logo = media?.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""),
                        runtime = media?.runtime
                    });
            }
            else if (media != null && media.MediaType == MediaType.tv)
            {
                WishList.Shows.Add(new WishListItem()
                    {
                        id = media?.tmdb_id,
                        name = media?.title,
                        logo = media?.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""),
                        runtime = media?.runtime
                    });
            }

            await WishListApi.Post(WishList);
            await WishListChanged.InvokeAsync(WishList);

            await Toast.Success("Media favoritado com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove(MediaDetail? media)
    {
        try
        {
            if (WishList == null)
            {
                WishList = new WishList
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (media != null && media.MediaType == MediaType.movie)
            {
                WishList.Movies.Remove(WishList.Movies.First(f => f.id == media?.tmdb_id));
            }
            else if (media != null && media.MediaType == MediaType.tv)
            {
                WishList.Shows.Remove(WishList.Shows.First(f => f.id == media?.tmdb_id));
            }

            await WishListApi.Post(WishList);
            await WishListChanged.InvokeAsync(WishList);

            await Toast.Success("Media removida com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Watched(MediaDetail? media)
    {
        try
        {
            if (WatchedList == null)
            {
                WatchedList = new WatchedList
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (media != null && media.MediaType == MediaType.movie && !string.IsNullOrEmpty(media.tmdb_id))
            {
                WatchedList.Movies.Add(media.tmdb_id);
            }
            else if (media != null && media.MediaType == MediaType.tv && !string.IsNullOrEmpty(media.tmdb_id))
            {
                WatchedList.Shows.Add(media.tmdb_id);
            }

            await WatchedListApi.Post(WatchedList);
            await WatchedListChanged.InvokeAsync(WatchedList);

            await Toast.Success("Operação efetuada com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task NotWatched(MediaDetail? media)
    {
        try
        {
            if (WatchedList == null)
            {
                WatchedList = new WatchedList
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (media != null && media.MediaType == MediaType.movie)
            {
                WatchedList.Movies.Remove(WatchedList.Movies.First(f => f == media?.tmdb_id & MediaType.movie == media?.MediaType));
            }
            else if (media != null && media.MediaType == MediaType.tv)
            {
                WatchedList.Shows.Remove(WatchedList.Shows.First(f => f == media?.tmdb_id & MediaType.tv == media?.MediaType));
            }

            await WatchedListApi.Post(WatchedList);
            await WatchedListChanged.InvokeAsync(WatchedList);

            await Toast.Success("Operação efetuada com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}
