@using SD.WEB.Modules.List.Core
@using SD.Shared.Model
@using SD.WEB.Modules.List.Interface;
@using SD.WEB.Modules.Profile.Core
@inherits ComponenteNoDataCore<CompleteListPopup>
@inject WatchedListApi WatchedListApi
@inject WishListApi WishListApi
@inject ExternalIdApi ExternalIdApi

<ModalHeader>
    <ModalTitle>@(List != null ? List.GetName() : TitleHead)</ModalTitle>
        <CloseButton Clicked="HideModal" />
    </ModalHeader>
    <ModalBody MaxHeight="70">
        <Row HorizontalGutter="4" VerticalGutter="4">
            @for (int i = 1; i <= Items.Count; i++)
        {
            var item = Items.ElementAt(i - 1);
            <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
                <Card>
                    <Blazorise.Link Clicked="@(() => OpenPopupMedia(item))" Style="position: relative;">
                        @if (ShowOnlyYear)
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date?.Year</Badge>
                        }
                        else
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date?.ToShortDateString()</Badge>
                        }
                        @if (item.rating >= 8)
                        {
                            <Badge Color="Color.Success" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                        }
                        else if (item.rating >= 6)
                        {
                            <Badge Color="Color.Warning" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                        }
                        else if (item.rating > 0)
                        {
                            <Badge Color="Color.Danger" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                        }
                        @if (string.IsNullOrEmpty(item.poster_small))
                        {
                            <CardImage Source="nopicture.jpg" Alt="@item.title" title="@item.title" Style="cursor: pointer;"></CardImage>

                            <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 115px;">
                                @item.title
                            </Div>
                        }
                        else
                        {
                            var watchedMovie = WatchedList?.Movies.Any(a => a == item.tmdb_id & MediaType.movie == item.MediaType) ?? false;
                            var watchedShow = WatchedList?.Shows.Any(a => a == item.tmdb_id & MediaType.tv == item.MediaType) ?? false;
                            if (watchedMovie | watchedShow)
                            {
                                <Blazorise.Icon Name="FontAwesomeIcons.Eye" IconSize="IconSize.x4"
                                    Style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0.8;"></Blazorise.Icon>
                            }
                            var wishedMovie = WishList?.Movies.Any(a => a.id == item.tmdb_id & MediaType.movie == item.MediaType) ?? false;
                            var wishedShow = WishList?.Shows.Any(a => a.id == item.tmdb_id & MediaType.tv == item.MediaType) ?? false;
                            if (wishedMovie | wishedShow)
                            {
                                <Blazorise.Icon Name="FontAwesomeIcons.Bookmark" IconSize="IconSize.x2" TextColor="TextColor.Light"
                                    Style="position: absolute; bottom: 3px; right: 3px; opacity: 0.8;"></Blazorise.Icon>
                            }
                            <CardImage Source="@(item.poster_small)" Alt="@item.title" title="@item.title" Style=@($"cursor: pointer; {(watchedMovie | watchedShow?"opacity: 0.5":"")}")></CardImage>
                        }
                    </Blazorise.Link>
                    @if (!string.IsNullOrEmpty(item.comments))
                    {
                        <CardBody Padding="Padding.Is1">
                            @foreach (var item in item.comments.Split(","))
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item</Badge>
                            }
                        </CardBody>
                    }
                </Card>
            </Column>
            if ((i % 10) == 0)
            {
                <div class="w-100"></div>
            }
        }
        @for (int i = 1; i <= (10 - Items.Count % 10); i++)
        {
            <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
            </Column>
        }
    </Row>
    <Div TextAlignment="TextAlignment.Center">
        <Button Color="Color.Secondary" Margin="Margin.Is2" Clicked="LoadMore" Disabled="@(Items.Count>=MaxItens|DisableLoadMore)">Carregar mais</Button>
    </Div>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End">@TranslationText.Close</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public IMediaListApi? MediaListApi { get; set; }
    [Parameter] public string? TitleHead { get; set; }
    [Parameter] public HashSet<MediaDetail> Items { get; set; } = new();
    [Parameter] public EnumLists? List { get; set; }
    [Parameter] public int MaxItens { get; set; } = 10;
    [Parameter] public bool IsIMDB { get; set; } = false;
    [Parameter] public bool ShowOnlyYear { get; set; } = true;
    [Parameter] public WishList? WishList { get; set; }
    [Parameter] public WatchedList? WatchedList { get; set; }
    [Parameter] public MediaType? TypeSelected { get; set; }
    [Parameter] public Dictionary<string, string> StringParameters { get; set; } = new();

    [Parameter] public EventCallback<WishList> WishListChanged { get; set; }
    [Parameter] public EventCallback<WatchedList> WatchedListChanged { get; set; }

    private string GetCustomStyle => "col-xl col-md-2 col-4";

    public bool DisableLoadMore { get; set; } = false;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            if (MediaListApi == null) throw new ArgumentNullException(nameof(MediaListApi));
            //if (!string.IsNullOrEmpty(list_id) && !NextPage.HasDelegate) throw new ArgumentNullException(nameof(NextPage));
            //if (NextPage.HasDelegate && string.IsNullOrEmpty(list_id)) throw new ArgumentNullException(nameof(list_id));
            if (List == null && string.IsNullOrEmpty(TitleHead)) throw new ArgumentNullException(nameof(TitleHead));
            if (MaxItens == 0) throw new ArgumentNullException(nameof(MaxItens));
            //if (WishList == null) throw new ArgumentNullException(nameof(WishList));
            //if (WatchedList == null) throw new ArgumentNullException(nameof(WatchedList));
            if (!WishListChanged.HasDelegate) throw new ArgumentNullException(nameof(WishListChanged));
            if (!WatchedListChanged.HasDelegate) throw new ArgumentNullException(nameof(WatchedListChanged));
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenPopupMedia(MediaDetail? media)
    {
        var tmdb_id = "";

        if (IsIMDB && media?.MediaType == MediaType.tv) //for now, only tv series (imdb) need this kind of workaround
        {
            tmdb_id = await ExternalIdApi.GetTmdbId(media?.tmdb_id);
        }
        else
        {
            tmdb_id = media?.tmdb_id;
        }

        await ModalService.Show<MediaPopup>(media?.title,
            x =>
            {
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, media?.MediaType);
                x.Add(x => x.ShowOnlyYear, ShowOnlyYear);
                x.Add(x => x.WishList, WishList);
                x.Add(x => x.WatchedList, WatchedList);
                x.Add(x => x.WishListChanged, new EventCallbackFactory().Create(this,
                    async (WishList value) => { WishList = value; await WishListChanged.InvokeAsync(value); }));
                x.Add(x => x.WatchedListChanged, new EventCallbackFactory().Create(this,
                    async (WatchedList value) => { WatchedList = value; await WatchedListChanged.InvokeAsync(value); }));
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }

    private async Task LoadMore()
    {
        if (MediaListApi != null)
        {
            var result = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, ++currentPage);
            Items = result.list;
            DisableLoadMore = result.lastPage;
        }
    }
}
