@using SD.Shared.Model.List.Tmdb
@using SD.WEB.Modules.List.Core;
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Core
@inherits ComponenteCore<MediaPopup>
@inject AllProvidersApi AllProvidersApi
@inject TmdbApi TmdbApi

<ModalHeader>
    <ModalTitle>@media?.title</ModalTitle>
    <CloseButton Clicked="HideModal" />
</ModalHeader>
<ModalBody MaxHeight="70">
    <Loading @ref="LoadingList">
        <Row HorizontalGutter="8" VerticalGutter="8">
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is4.OnDesktop">
                @if (string.IsNullOrEmpty(media?.poster_large))
                {
                    <CardImage Source="nopicture.jpg" Alt="@media?.title"></CardImage>
                }
                else
                {
                    <Div Style="position:relative;">
                        @if (ShowOnlyYear)
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="position: absolute; top: 5px; left: 5px;">@media?.release_date?.Year</Badge>
                        }
                        else
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="position: absolute; top: 5px; left: 5px;">@media?.release_date?.ToShortDateString()</Badge>
                        }
                        @if (media?.rating >= 8)
                        {
                            <Badge Color="Color.Success" Style="position: absolute; top: 5px; right: 5px;">@media?.rating.ToString("#.#")</Badge>
                        }
                        else if (media?.rating >= 6)
                        {
                            <Badge Color="Color.Warning" TextColor="TextColor.Dark" Style="position: absolute; top: 5px; right: 5px;">@media?.rating.ToString("#.#")</Badge>
                        }
                        else if (media?.rating > 0)
                        {
                            <Badge Color="Color.Danger" Style="position: absolute; top: 5px; right: 5px;">@media?.rating.ToString("#.#")</Badge>
                        }
                        <Image Source="@media?.poster_large" Text="@media?.title" Style="width: 100%;"></Image>
                    </Div>
                }
            </Column>
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is8.OnDesktop">
                <Tabs @bind-SelectedTab="@selectedTab" Pills="true" FullWidth="true" Justified="true">
                    <Items>
                        <Tab Name="About">About</Tab>
                        <Tab Name="Streaming">Streaming (@AppStateStatic.Region.GetName(false))</Tab>
                        @if (media?.Collection.Any() ?? false)
                        {
                            <Tab Name="Collection">Collection</Tab>
                        }
                    </Items>
                    <Content>
                        <TabPanel Name="About" Class="mt-2">
                            <Badge Color="Color.Secondary" Margin="Margin.Is2.FromEnd.Is2.FromBottom">@media?.runtime.FormatRuntime()</Badge>
                            @foreach (var item in media?.Genres ?? new List<string>())
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is2.FromEnd.Is2.FromBottom">@item</Badge>
                            }
                            <Paragraph TextAlignment="TextAlignment.Justified">
                                @media?.plot
                            </Paragraph>
                            @if (media != null && media.Videos.Any())
                            {
                                <Row HorizontalGutter="4" VerticalGutter="4">
                                    <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                        <Button Color="Color.Dark" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">Trailers</Button>
                                    </Column>
                                    @foreach (var item in media.Videos)
                                    {
                                        <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                            <Button Type="ButtonType.Link" To="@("https://www.youtube.com/watch?v=" + item.key)" Target="Target.Blank" Color="Color.Light"
                                            Padding="Padding.Is1" title="@item.name" Block="true">
                                                <Blazorise.Icon Name="FontAwesomeIcons.Video"></Blazorise.Icon>
                                            </Button>
                                        </Column>
                                    }
                                </Row>
                            }
                            @{
                                var link = Providers?.GetLink(AppStateStatic.Region);
                                if (string.IsNullOrEmpty(link))
                                {
                                    link = Providers?.GetLink(Region.US);
                                }
                                @if (!string.IsNullOrEmpty(link))
                                {
                                    var uri_link = new Uri(link);
                                    var fomatted_link = "https://" + uri_link.Host + string.Join("", uri_link.Segments.SkipLast(1));
                                    <Row Margin="Margin.Is3.FromTop">
                                        <Column>
                                            <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is0.FromBottom" Visible="true">
                                                @GlobalTranslations.MoreInformation: <a href="@fomatted_link" target="_blank" rel="noopener">@(uri_link.Host) <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon></a>
                                            </Alert>
                                        </Column>
                                    </Row>
                                }
                            }
                        </TabPanel>
                        <TabPanel Name="Streaming" Class="mt-2">
                            @{
                                var hasProvider = false;

                                if (Providers?.GetFreeListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelFree</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetFreeListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.FREE))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetAdsListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelAds</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetAdsListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.AVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetFlatRateListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelFlatRate</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetFlatRateListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.SVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetFlatRateBuyListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Warning" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelFlatRateBuy</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetFlatRateBuyListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.PVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetRentListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Primary" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelRent</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetRentListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.TVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetBuyListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Danger" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelBuy</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetBuyListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.TVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }

                                if (hasProvider)
                                {
                                    <Row Margin="Margin.Is3.FromTop">
                                        <Column>
                                            <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is0.FromBottom" Visible="true">
                                                @GlobalTranslations.Offering: <a href="https://www.justwatch.com/" target="_blank" rel="noopener">@(new Uri("https://www.justwatch.com/").Host) <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon></a>
                                            </Alert>
                                        </Column>
                                    </Row>
                                }
                                else
                                {
                                    <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is0.FromBottom" Visible="true">
                                        @GlobalTranslations.TitleNotAvailable
                                    </Alert>
                                }
                            }
                        </TabPanel>
                        @if (media?.Collection.Any() ?? false)
                        {
                            <TabPanel Name="Collection" Class="mt-2">
                                <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is1.FromBottom">
                                    @foreach (var item in media.Collection.OrderBy(o => o.release_date))
                                    {
                                        <Column ColumnSize="ColumnSize.Is6.OnMobile.Is4.OnWidescreen.Is3.OnFullHD">
                                            <Card>
                                                <Blazorise.Link Clicked="@(async() =>{if (media.MediaType== MediaType.movie)await OpenPopupMedia(item, media.MediaType);else await Toast.Warning("Not Available");})" Style="position: relative;">
                                                    @if (ShowOnlyYear)
                                                    {
                                                        <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date?.Year</Badge>
                                                    }
                                                    else
                                                    {
                                                        <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date?.ToShortDateString()</Badge>
                                                    }
                                                    @*@if (item.rating >= 8)
                                            {
                                            <Badge Color="Color.Success" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                                            }
                                            else if (item.rating >= 6)
                                            {
                                            <Badge Color="Color.Warning" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                                            }
                                            else if (item.rating > 0)
                                            {
                                            <Badge Color="Color.Danger" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                                            }*@
                                                    @if (string.IsNullOrEmpty(item.poster_small))
                                                    {
                                                        <CardImage data-src="nopicture.jpg" class="lazyload" Alt="@item.title" title="@item.title" Style="cursor: pointer;"></CardImage>

                                                        <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 115px;">
                                                            @item.title
                                                        </Div>
                                                    }
                                                    else
                                                    {
                                                        @*var watchedMovie = WatchedList?.Movies.Any(a => a == item.id & MediaType.movie == item.MediaType) ?? false;
                                            var watchedShow = WatchedList?.Shows.Any(a => a == item.id & MediaType.tv == item.MediaType) ?? false;
                                            if (watchedMovie | watchedShow)
                                            {
                                            <Blazorise.Icon Name="FontAwesomeIcons.Eye" IconSize="IconSize.x4"
                                            Style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0.8;"></Blazorise.Icon>
                                            }
                                            var wishedMovie = WishList?.Movies.Any(a => a.id == item.id & MediaType.movie == item.MediaType) ?? false;
                                            var wishedShow = WishList?.Shows.Any(a => a.id == item.id & MediaType.tv == item.MediaType) ?? false;
                                            if (wishedMovie | wishedShow)
                                            {
                                            <Blazorise.Icon Name="FontAwesomeIcons.Bookmark" IconSize="IconSize.x2" TextColor="TextColor.Light"
                                            Style="position: absolute; bottom: 3px; right: 3px; opacity: 0.8;"></Blazorise.Icon>
                                            }*@
                                                        @*<CardImage Source="@item.poster_small" Alt="@item.title" title="@item.title" Style=@($"cursor: pointer; {(watchedMovie | watchedShow?"opacity: 0.5":"")}")></CardImage>*@
                                                        <CardImage Source="@item.poster_small" Alt="@item.title" title="@item.title" Style=@($"cursor: pointer;")></CardImage>

                                                        <CardBody Class="py-1">
                                                            @item.title
                                                        </CardBody>
                                                    }
                                                </Blazorise.Link>
                                            </Card>
                                        </Column>
                                    }
                                </Row>
                            </TabPanel>
                        }
                    </Content>
                </Tabs>
            </Column>
        </Row>
    </Loading>
</ModalBody>
<ModalFooter>
    <Container Fluid="true" Margin="Margin.Is0">
        <Row HorizontalGutter="4" VerticalGutter="4">
            <Column VerticalAlignment="VerticalAlignment.Middle">
                @if (!string.IsNullOrEmpty(media?.homepage))
                {
                    <a href="@media.homepage" target="_blank" rel="noopener" style="float: left;">@(new Uri(media.homepage).Host) <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon></a>
                }
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (AppState.WishList?.Movies.Any(a => a.id == tmdb_id) ?? false)
                {
                    <Button Color="Color.Danger" Clicked="Remove" Margin="Margin.Is2.FromEnd" Disabled="!ComponenteUtils.IsAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> @GlobalTranslations.ButtonRemove
                    </Button>
                }
                else if (AppState.WishList?.Shows.Any(a => a.id == tmdb_id) ?? false)
                {
                    <Button Color="Color.Danger" Clicked="Remove" Margin="Margin.Is2.FromEnd" Disabled="!ComponenteUtils.IsAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> @GlobalTranslations.ButtonRemove
                    </Button>
                }
                else
                {
                    <Button Color="Color.Primary" Clicked="Add" Margin="Margin.Is2.FromEnd" Disabled="!ComponenteUtils.IsAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> @GlobalTranslations.ButtonAdd
                    </Button>
                }
                @if (AppState.WatchedList?.Movies.Any(a => a == tmdb_id) ?? false)
                {
                    <Button Color="Color.Danger" Clicked="NotWatched" Margin="Margin.Is2.FromEnd" Disabled="!ComponenteUtils.IsAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon> @GlobalTranslations.ButtonNotWatched
                    </Button>
                }
                else if (AppState.WatchedList?.Shows.Any(a => a == tmdb_id) ?? false)
                {
                    <Button Color="Color.Danger" Clicked="NotWatched" Margin="Margin.Is2.FromEnd" Disabled="!ComponenteUtils.IsAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon> @GlobalTranslations.ButtonNotWatched
                    </Button>
                }
                else
                {
                    <Button Color="Color.Primary" Clicked="Watched" Margin="Margin.Is2.FromEnd" Disabled="!ComponenteUtils.IsAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon> @GlobalTranslations.ButtonWatched
                    </Button>
                }
                @*<Button Color="Color.Secondary" Clicked="@Atualizar" Disabled="false">Atualizar</Button>*@
                <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End">@GlobalTranslations.ButtonClose</Button>
            </Column>
        </Row>
    </Container>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public bool ShowOnlyYear { get; set; } = true;
    [Parameter] public string? tmdb_id { get; set; }
    [Parameter] public MediaType? type { get; set; }

    public Loading? LoadingList { get; set; }

    private MediaDetail? media { get; set; }
    private MediaProviders? Providers { get; set; }
    private AllProviders? AllProviders { get; set; }

    string selectedTab = "About";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(tmdb_id)) throw new ArgumentNullException(nameof(tmdb_id));
        if (type == null) throw new ArgumentNullException(nameof(type));

        AppState.WishListChanged += StateHasChanged;
        AppState.WatchedListChanged += StateHasChanged;

        await base.OnInitializedAsync();
    }

    protected override async Task LoadData()
    {
        try
        {
            LoadingList?.Start();

            media = await TmdbApi.GetMediaDetail(tmdb_id, type);
            Providers = await TmdbApi.GetWatchProvidersList(tmdb_id, type);
            AllProviders = await AllProvidersApi.GetAll();

            LoadingList?.Finish(media == null);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }

    private async Task Atualizar()
    {
        if (Providers == null) return;

        foreach (var item in Providers.GetFreeListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.FREE;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetAdsListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.AVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetFlatRateListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.SVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetBuyListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.TVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetRentListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.TVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetFlatRateBuyListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.PVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        await AllProvidersApi.Post(AllProviders);
    }

    private async Task Add()
    {
        try
        {
            var list = AppState.WishList;

            if (list == null)
            {
                list = new WishList
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (media != null && media.MediaType == MediaType.movie)
            {
                list.Movies.Add(new WishListItem()
                    {
                        id = media?.tmdb_id,
                        name = media?.title,
                        logo = media?.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""),
                        runtime = media?.runtime
                    });
            }
            else if (media != null && media.MediaType == MediaType.tv)
            {
                list.Shows.Add(new WishListItem()
                    {
                        id = media?.tmdb_id,
                        name = media?.title,
                        logo = media?.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""),
                        runtime = media?.runtime
                    });
            }

            await WishListApi.Post(list);

            AppState.ChangeWishList(list);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove()
    {
        try
        {
            var list = AppState.WishList;

            if (list == null)
            {
                list = new WishList
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (media != null && media.MediaType == MediaType.movie)
            {
                list.Movies.Remove(list.Movies.First(f => f.id == media?.tmdb_id));
            }
            else if (media != null && media.MediaType == MediaType.tv)
            {
                list.Shows.Remove(list.Shows.First(f => f.id == media?.tmdb_id));
            }

            await WishListApi.Post(list);

            AppState.ChangeWishList(list);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Watched()
    {
        try
        {
            var list = AppState.WatchedList;

            if (list == null)
            {
                list = new WatchedList
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (media != null && media.MediaType == MediaType.movie && !string.IsNullOrEmpty(media.tmdb_id))
            {
                list.Movies.Add(media.tmdb_id);
            }
            else if (media != null && media.MediaType == MediaType.tv && !string.IsNullOrEmpty(media.tmdb_id))
            {
                list.Shows.Add(media.tmdb_id);
            }

            await WatchedListApi.Post(list);

            AppState.ChangeWatchedList(list);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task NotWatched()
    {
        try
        {
            var list = AppState.WatchedList;

            if (list == null)
            {
                list = new WatchedList
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (media != null && media.MediaType == MediaType.movie)
            {
                list.Movies.Remove(list.Movies.First(f => f == media?.tmdb_id & MediaType.movie == media?.MediaType));
            }
            else if (media != null && media.MediaType == MediaType.tv)
            {
                list.Shows.Remove(list.Shows.First(f => f == media?.tmdb_id & MediaType.tv == media?.MediaType));
            }

            await WatchedListApi.Post(list);

            AppState.ChangeWatchedList(list);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenPopupMedia(Collection? collection, MediaType mediaType)
    {
        await ModalService.Show<MediaPopup>(collection?.title,
            x =>
            {
                x.Add(x => x.tmdb_id, collection?.id?.ToString());
                x.Add(x => x.type, mediaType);
                x.Add(x => x.ShowOnlyYear, ShowOnlyYear);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }
}