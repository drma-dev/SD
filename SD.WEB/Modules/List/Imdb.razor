@page "/List/Imdb"
<PageTitle>SD - Lists - IMDB</PageTitle>
@inherits ComponenteCore<Imdb>
@inject ListService Service
@inject Settings Settings
@using SD.Shared.Model
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.List.Core.TMDB
@using SD.WEB.Modules.List.Core.IMDB

<HeadPage ImageSource="logo/imdb.png" Text="@TranslationText.imdb_desc" Link="https://www.imdb.com/"></HeadPage>

<MediaList CardHeader="@TranslationText.Popular" Items="@ListPopular" maxItens="50" IsIMDB="true" NextPage="@(()=>LoadPopular(popularMedia))" DisableLoadMore="PopularDisable"
           TypeSelected="popularMedia" TypeSelectedChanged="ChangePopularMediaType" ShowFilter="true"
           WishList="wishList" WishListChanged="@(async(WishList value)=>{wishList = value; })"
           WatchedList="watchedList" WatchedListChanged="@(async (WatchedList value) => { watchedList = value;  })"></MediaList>
<MediaList CardHeader="Top 250" Items="@ListTopRated" list_id="@(topRatedMedia== MediaType.movie?"8223821":"8223826")" maxItens="250"
           TypeSelected="topRatedMedia" TypeSelectedChanged="ChangeTopRatedMediaType" ShowFilter="true"
           WishList="wishList" WishListChanged="@(async(WishList value)=>{wishList = value; })"
           WatchedList="watchedList" WatchedListChanged="@(async (WatchedList value) => { watchedList = value;  })"></MediaList>
<MediaList CardHeader="@TranslationText.ComingSoon" Items="@ListUpcoming" maxItens="50" IsIMDB="true" NextPage="LoadUpcoming" DisableLoadMore="UpcomingDisable"
           ShowOnlyYear="false"
           WishList="wishList" WishListChanged="@(async(WishList value)=>{wishList = value; })"
           WatchedList="watchedList" WatchedListChanged="@(async (WatchedList value) => { watchedList = value;  })"></MediaList>

@code {
    private HashSet<MediaDetail> ListPopular { get; set; } = new();
    private HashSet<MediaDetail> ListTopRated { get; set; } = new();
    private HashSet<MediaDetail> ListUpcoming { get; set; } = new();

    private bool PopularDisable = true;
    private bool UpcomingDisable = true;

    private MediaType popularMedia = MediaType.movie;
    private MediaType topRatedMedia = MediaType.movie;

    private WishList? wishList { get; set; }
    private WatchedList? watchedList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        wishList = await Http.WishList_Get(Session);
        watchedList = await Http.WatchedList_Get(Session);

        await LoadPopular(popularMedia);
        await LoadTopRated(popularMedia);
        await LoadUpcoming();

        if (ListPopular.Count < 10) await LoadPopular(popularMedia);
    }

    private async Task ChangePopularMediaType(MediaType mediaType)
    {
        popularMedia = mediaType;

        ListPopular = new();

        await LoadPopular(mediaType);

        if (ListPopular.Count < 10) await LoadPopular(popularMedia);

        wishList = await Http.WishList_Get(Session);
        watchedList = await Http.WatchedList_Get(Session);
    }

    private async Task ChangeTopRatedMediaType(MediaType mediaType)
    {
        topRatedMedia = mediaType;

        ListTopRated = new();

        await LoadTopRated(mediaType);
    }

    private async Task LoadPopular(MediaType mediaType)
    {
        await Http.PopulateIMDBPopular(Session, ListPopular, mediaType);
    }

    private async Task LoadTopRated(MediaType mediaType)
    {
        if (mediaType == MediaType.movie)
            await Service.PopulateListMedia(Http, Session, Settings, ListTopRated, 1, GetExtraParameters("8223821"));
        else //tv
            await Service.PopulateListMedia(Http, Session, Settings, ListTopRated, 1, GetExtraParameters("8223826"));
    }

    private async Task LoadUpcoming()
    {
        await Http.PopulateIMDBUpcoming(Session, ListUpcoming, MediaType.movie);
    }

    private Dictionary<string, string> GetExtraParameters(string list_id)
    {
        return new Dictionary<string, string>() { { "list_id", list_id } }; ;
    }
}