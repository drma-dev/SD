@using SD.Shared.Models.Auth
@using SD.Shared.Models.Subscription
@using SD.WEB.Modules.Auth.Core
@using SD.WEB.Modules.Profile.Core
@inherits ComponenteCore<SubscriptionPopup>

@inject NavigationManager navigation
@inject IJSRuntime JsRuntime
@inject PaddleConfigurationApi ConfigurationApi
@inject PaddleSubscriptionApi SubscriptionApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">
        My Subscription
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    @if (Client?.ClientePaddle == null)
    {
        <div class="mt-2" style="text-align: center;">
            <RadioGroup @bind-CheckedValue="Cycle" Buttons="true" Color="Color.Primary">
                <Radio Value="AccountCycle.Monthly">
                    @AccountCycle.Monthly.GetName()
                </Radio>
                <Radio Value="AccountCycle.Yearly">
                    @AccountCycle.Yearly.GetName()
                </Radio>
            </RadioGroup>
            <Badge Color="Color.Success">@("save 17%")</Badge>
        </div>
        <CardDeck Class="mt-2">
            <Card Background="Background.Secondary" WhiteText="true">
                <CardBody>
                    <CardTitle Size="6" TextAlignment="TextAlignment.Center">
                        @AccountProduct.Basic.GetName()
                    </CardTitle>
                    <CardTitle Size="4" TextAlignment="TextAlignment.Center">
                        @GlobalTranslations.Free
                    </CardTitle>
                    <CardText>
                        <ListGroup Flush="true">
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Favorite Providers
                                <Badge Color="Color.Primary">1</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                @GlobalTranslations.MySuggestions
                                <Badge Color="Color.Primary">6</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Wishlist
                                <Badge Color="Color.Primary">6</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Watching
                                <Badge Color="Color.Primary">6</Badge>
                            </ListGroupItem>
                        </ListGroup>
                    </CardText>
                </CardBody>
            </Card>
            <Card Background="Background.Secondary" WhiteText="true">
                <CardBody>
                    <CardTitle Size="6" TextAlignment="TextAlignment.Center">
                        @AccountProduct.Standard.GetName()
                    </CardTitle>
                    <CardTitle Size="4" TextAlignment="TextAlignment.Center">
                        @GetSubscription(AccountProduct.Standard)?.Price / @Cycle.GetDescription()
                    </CardTitle>
                    <CardText>
                        <ListGroup Flush="true">
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Favorite Providers
                                <Badge Color="Color.Primary">6</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                @GlobalTranslations.MySuggestions
                                <Badge Color="Color.Primary">12</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Wishlist
                                <Badge Color="Color.Primary">12</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Watching
                                <Badge Color="Color.Primary">12</Badge>
                            </ListGroupItem>
                        </ListGroup>
                    </CardText>
                    <Button Color="Color.Primary" Block="true" Class="mt-3" Clicked="@(()=>OpenCheckout(GetSubscription(AccountProduct.Standard)?.PriceId))">Choose Plan</Button>
                </CardBody>
            </Card>
            <Card Background="Background.Secondary" WhiteText="true">
                <CardBody>
                    <CardTitle Size="6" TextAlignment="TextAlignment.Center">
                        @AccountProduct.Premium.GetName()
                    </CardTitle>
                    <CardTitle Size="4" TextAlignment="TextAlignment.Center">
                        @GetSubscription(AccountProduct.Premium)?.Price / @Cycle.GetDescription()
                    </CardTitle>
                    <CardText>
                        <ListGroup Flush="true">
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Favorite Providers
                                <Badge Color="Color.Primary">12</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                @GlobalTranslations.MySuggestions
                                <Badge Color="Color.Primary">24</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Wishlist
                                <Badge Color="Color.Primary">48</Badge>
                            </ListGroupItem>
                            <ListGroupItem Flex="Flex.JustifyContent.Between.AlignItems.Center" Background="Background.Secondary">
                                Watching
                                <Badge Color="Color.Primary">48</Badge>
                            </ListGroupItem>
                        </ListGroup>
                    </CardText>
                    <Button Color="Color.Primary" Block="true" Class="mt-3" Clicked="@(()=>OpenCheckout(GetSubscription(AccountProduct.Premium)?.PriceId))">Choose Plan</Button>
                </CardBody>
            </Card>
        </CardDeck>
    }
    else
    {
        @if (Subscription == null)
        {
            <Alert Color="Color.Warning" Visible="true">
                <AlertDescription>
                    <Blazorise.Icon Class="spinner-border spinner-border-sm"></Blazorise.Icon> Subscription is being processed. Please wait.
                </AlertDescription>
            </Alert>
        }
        else
        {
            <Card Margin="Margin.Is2.FromBottom">
                <CardHeader>
                    Subscription Details
                </CardHeader>
                <CardBody>
                    <Fields>
                        <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                            <FieldLabel>
                                Subscription / Product
                            </FieldLabel>
                            <TextEdit Text="@Client.ClientePaddle.Items.SingleOrDefault()?.Product.GetName()" Disabled="true" />
                        </Field>
                        <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                            <FieldLabel>
                                Status
                            </FieldLabel>
                            <TextEdit Text="@Subscription.data?.status" Disabled="true" />
                        </Field>
                    </Fields>
                    <Fields>
                        <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                            <FieldLabel>
                                Start (Current Billing Period)
                            </FieldLabel>
                            <TextEdit Text="@Subscription.data?.current_billing_period?.starts_at?.ToShortDateString()" Disabled="true" />
                        </Field>
                        <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                            <FieldLabel>
                                End (Current Billing Period)
                            </FieldLabel>
                            <TextEdit Text="@Subscription.data?.current_billing_period?.ends_at?.ToShortDateString()" Disabled="true" />
                        </Field>
                    </Fields>
                </CardBody>
            </Card>
            <Card Margin="Margin.Is2.FromBottom">
                <CardHeader>
                    @WEB.Resources.GlobalTranslations.Actions
                </CardHeader>
                <CardBody>
                    @if (ActiveBilling)
                    {
                        <Button Color="Color.Primary" Clicked="UpdateClick" Disabled="!ActiveBilling" Margin="Margin.Is1.FromEnd">
                            <Blazorise.Icon Name="FontAwesomeIcons.CreditCard" /> Update payment details
                        </Button>
                        <Button Color="Color.Danger" Clicked="CancelClick" Disabled="!ActiveBilling">
                            <Blazorise.Icon Name="FontAwesomeIcons.UserAltSlash" /> Cancel subscription
                        </Button>
                    }
                    else
                    {
                        <Alert Color="Color.Primary" Visible="true">
                            <AlertDescription>
                                <Blazorise.Icon Name="FontAwesomeIcons.ExclamationTriangle"></Blazorise.Icon> The subscription has been scheduled to be canceled at the end of the current billing period.
                            </AlertDescription>
                        </Alert>
                    }
                </CardBody>
            </Card>
        }
    }
</ModalBody>
<ModalFooter>
    <Container Fluid="true" Margin="Margin.Is0" Padding="Padding.Is0.OnX">
        <Row HorizontalGutter="4" VerticalGutter="4">
            <Column>
                Powered by <a href="https://www.paddle.com/" target="_blank" rel="nofollow"><Image Source="/logo/paddle.avif" Style="height: 30px;"></Image></a>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
                    @TranslationText.Close
                </Button>
            </Column>
        </Row>
    </Container>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public ClientePrincipal? Client { get; set; }

    public RootSubscription? Subscription { get; set; }
    public bool ActiveBilling => Subscription?.data?.items.FirstOrDefault()?.next_billed_at != null;

    private AccountCycle Cycle { get; set; } = AccountCycle.Monthly;

    private class Plan
    {
        public AccountProduct Product { get; set; }
        public AccountCycle Cycle { get; set; }
        public string? Price { get; set; }

        public string? ProductId { get; set; }
        public string? PriceId { get; set; }
    }

    private IEnumerable<Plan> Plans { get; set; } = [];
    private Plan? GetSubscription(AccountProduct product) => Plans.FirstOrDefault(f => f.Product == product && f.Cycle == Cycle);

    protected override void OnInitialized()
    {
        if (Client == null) throw new NotificationException("Client null");

        AppStateStatic.RegistrationSuccessful += async (client) => await RegistrationSuccessful(client);
    }

    protected override async Task LoadDataRender()
    {
        var config = await ConfigurationApi.GetConfigurations();
        if (config == null) throw new NotificationException("server comunication error");

        if (string.IsNullOrEmpty(Client?.ClientePaddle?.SubscriptionId))
        {
            await JsRuntime.InvokeVoidAsync("startPaddle", config.Token);
            Plans = await JsRuntime.InvokeAsync<IEnumerable<Plan>>("getPlans", config.PriceStandardMonth, config.PriceStandardYear, config.PricePremiumMonth, config.PricePremiumYear);
        }
        else
        {
            Subscription = await SubscriptionApi.GetSubscription(Client?.ClientePaddle?.SubscriptionId);
        }
    }

    protected async Task OpenCheckout(string? priceId)
    {
        var locale = AppStateStatic.Language.ToString()?.Substring(0, 2);

        await JsRuntime.InvokeVoidAsync("openCheckout", priceId, Client?.Email, locale, Client?.ClientePaddle?.CustomerId, Client?.ClientePaddle?.AddressId);
    }

    private async Task RegistrationSuccessful(TempClientePaddle client)
    {
        try
        {
            if (Client == null) throw new NotificationException("Client null");

            var product = Plans.Single(w => w.ProductId == client.ProductId && w.Cycle == Cycle).Product;

            if (Client.ClientePaddle == null)
            {
                Client.ClientePaddle = new ClientePaddle
                    {
                        CustomerId = client.CustomerId,
                        AddressId = client.AddressId,
                        Items = new List<PaddleItem>() { new PaddleItem { ProductId = client.ProductId, Product = product } }
                    };
            }
            else
            {
                Client.ClientePaddle.Items.Add(new PaddleItem { ProductId = client.ProductId, Product = product });
            }

            Client = await PrincipalApi.Paddle(Client);

            StateHasChanged();

            await Toast.Success("Registration successful!");

            await Task.Delay(10000).ContinueWith(async (task) => { await UpdateData(); });
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task UpdateData()
    {
        Client = await PrincipalApi.Get(true, true);
        await LoadDataRender();
        StateHasChanged();
    }

    private void UpdateClick()
    {
        Navigation.NavigateTo(Subscription?.data?.management_urls?.update_payment_method ?? "");
    }

    private void CancelClick()
    {
        Navigation.NavigateTo(Subscription?.data?.management_urls?.cancel ?? "");
    }
}