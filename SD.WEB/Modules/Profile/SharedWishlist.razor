@page "/shared/wishlist/{type}/{id}"
@page "/shared/wishlist/{type}"

@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core

@inherits PageCore<SharedWishlist>
@inject WishListApi WishApi
@inject WatchingListApi WatchingApi
@inject WatchedListApi WatchedApi

@if (type == "movie")
{
    <Wishlist Core="CoreWishlist" MediaType="MediaType.movie" Private="Private" ShowHeader="true" FullScreen="true" Id="@id"
              Watched="Watched" Watching="Watching" Wish="Wish"
              ExpressionEmpty="(WishList? list) => list == null || list.Movies.Empty()"></Wishlist>
}
else
{
    <Wishlist Core="CoreWishlist" MediaType="MediaType.movie" Private="Private" ShowHeader="true" FullScreen="true" Id="@id"
              Watched="Watched" Watching="Watching" Wish="Wish"
              ExpressionEmpty="(WishList? list) => list == null || list.Shows.Empty()"></Wishlist>
}

@code {
    [Parameter] public string? type { get; set; }
    [Parameter] public string? id { get; set; }

    public RenderControlCore<WishList?> CoreWishlist { get; set; } = new();
    public bool Private => string.IsNullOrEmpty(id);
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    protected override async Task LoadDataRender()
    {
        Watched = await WatchedApi.Get(IsAuthenticated, null, id);
        Watching = await WatchingApi.Get(IsAuthenticated, null);
        Wish = await WishApi.Get(IsAuthenticated, CoreWishlist, id);
    }
}
