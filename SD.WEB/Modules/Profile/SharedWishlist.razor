@page "/shared/wishlist/{type}/{id}"
@page "/shared/wishlist/{type}"

@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core

@inherits PageCore<SharedWishlist>
@inject WishListApi WishListApi
@inject WatchingListApi WatchingListApi
@inject WatchedListApi WatchedListApi

@if (type == "movie")
{
    <Wishlist Core="CoreWishlist" MediaType="MediaType.movie" Private="Private" ShowHeader="true" FullScreen="true" Id="@id"
              WatchedList="WatchedList" WatchingList="WatchingList" WishList="WishList"
              ExpressionEmpty="(WishList? list) => list == null || list.Movies.Empty()"></Wishlist>
}
else
{
    <Wishlist Core="CoreWishlist" MediaType="MediaType.movie" Private="Private" ShowHeader="true" FullScreen="true" Id="@id"
              WatchedList="WatchedList" WatchingList="WatchingList" WishList="WishList"
              ExpressionEmpty="(WishList? list) => list == null || list.Shows.Empty()"></Wishlist>
}

@code {
    [Parameter] public string? type { get; set; }
    [Parameter] public string? id { get; set; }

    public RenderControlCore<WishList?> CoreWishlist { get; set; } = new();
    public bool Private => string.IsNullOrEmpty(id);
    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsUserAuthenticated, null, id);
        WatchingList = await WatchingListApi.Get(IsUserAuthenticated, null);
        WishList = await WishListApi.Get(IsUserAuthenticated, CoreWishlist, id);
    }
}
