@using SD.WEB.Modules.Suggestions.Core;
@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Provider.Core;
@inherits ComponenteNoDataCore<MyWatchingListComponent>
@inject TmdbApi TmdbApi
@inject AppState State

<HeaderComponent IconName="@FontAwesomeIcons.Eye" Title="@GlobalTranslations.MyMovieWatching.Format(AppState.WatchingList?.Movies.Count() ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList(MediaType.movie))" title="@GlobalTranslations.SeeAllItems" Disabled="(!AppState.WatchingList?.Movies.Any()??true)" Class="ml-1">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await ChooseRandomTitle(MediaType.movie))" title="@GlobalTranslations.PickARandom" Disabled="(!AppState.WatchingList?.Movies.Any()??true)">
        <Blazorise.Icon Name="FontAwesomeIcons.Random"></Blazorise.Icon>
    </Button>
    @if (AppState.WatchingList?.MovieCanSync ?? false)
    {
        <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Margin="Margin.Is1.FromEnd" Clicked="()=>ImportFromWatched(MediaType.movie)" title="@GlobalTranslations.ButtonUpdate" Disabled="(!AppState.WatchedList?.Movies.Any()??true)">
            @GlobalTranslations.ButtonUpdate
        </Button>
    }
</HeaderComponent>
<Loading IsEmptyFilter="@(AppState.WatchingList == null || !AppState.WatchingList.Movies.Any())" UnauthenticatedUser="!IsUserAuthenticated">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in AppState.WatchingList?.Movies.Take(GetTotalItems) ?? new List<WatchingListItem>())
        {
            int percentComplete = (int)Math.Round((double)(100 * item.watched.Count) / item.maxItems);
            var resultPerc = $"{percentComplete}%";

            <Column ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is3.OnMobile">
                <Card Style="position: relative;">
                    <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                    @if (string.IsNullOrEmpty(item.logo))
                    {
                        <CardImage data-src="noimage.png" class="lazyload" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowCollectionPopup(item.id, item.name, MediaType.movie))" Style="cursor: pointer;"></CardImage>

                        <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 2rem; color: black; text-align: center; font-weight: 500;">
                            @item.name
                        </Div>
                    }
                    else
                    {
                        <CardImage Source="@(TmdbOptions.SmallPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowCollectionPopup(item.id, item.name, MediaType.movie))" Style="cursor: pointer;"></CardImage>
                    }
                </Card>
            </Column>
        }
    </Row>
</Loading>

<HeaderComponent IconName="@FontAwesomeIcons.Eye" Title="@GlobalTranslations.MyShowWatching.Format(AppState.WatchingList?.Shows.Count() ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList(MediaType.tv))" title="@GlobalTranslations.SeeAllItems" Disabled="(!AppState.WatchingList?.Shows.Any()??true)" Class="ml-1">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await ChooseRandomTitle(MediaType.tv))" title="@GlobalTranslations.PickARandom" Disabled="(!AppState.WatchingList?.Shows.Any()??true)">
        <Blazorise.Icon Name="FontAwesomeIcons.Random"></Blazorise.Icon>
    </Button>
    @if (AppState.WatchingList?.ShowCanSync ?? false)
    {
        <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Margin="Margin.Is1.FromEnd" Clicked="()=>ImportFromWatched(MediaType.tv)" title="@GlobalTranslations.ButtonUpdate" Disabled="(!AppState.WatchedList?.Shows.Any()??true)">
            @GlobalTranslations.ButtonUpdate
        </Button>
    }
</HeaderComponent>
<Loading IsEmptyFilter="@(AppState.WatchingList == null || !AppState.WatchingList.Shows.Any())" UnauthenticatedUser="!IsUserAuthenticated">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in AppState.WatchingList?.Shows.Take(GetTotalItems) ?? new List<WatchingListItem>())
        {
            int percentComplete = (int)Math.Round((double)(100 * item.watched.Count) / item.maxItems);
            var resultPerc = $"{percentComplete}%";

            <Column ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is3.OnMobile">
                <Card Style="position: relative;">
                    <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>

                    @if (string.IsNullOrEmpty(item.logo))
                    {
                        <CardImage data-src="noimage.png" class="lazyload" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowCollectionPopup(item.id, item.name, MediaType.tv))" Style="cursor: pointer;"></CardImage>

                        <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 2rem; color: black; text-align: center; font-weight: 500;">
                            @item.name
                        </Div>
                    }
                    else
                    {
                        <CardImage Source="@(TmdbOptions.SmallPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowCollectionPopup(item.id, item.name, MediaType.tv))" Style="cursor: pointer;"></CardImage>
                    }
                </Card>
            </Column>
        }
    </Row>
</Loading>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public bool Fake { get; set; } = false;

    private int GetTotalItems => AppStateStatic.OnFullHD ? 6 : 4;
    private bool IsUserAuthenticated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppState.WatchingListChanged += StateHasChanged;
        AppState.WatchedListChanged += StateHasChanged;
        AppState.WishListChanged += StateHasChanged;

        if (Fake)
            IsUserAuthenticated = true;
        else
            IsUserAuthenticated = await State.IsUserAuthenticated();

        await base.OnInitializedAsync();
    }

    private async Task OpenCompleteList(MediaType mediaType)
    {
        await ModalService.Show<MyWatchingListPopup>(null,
        x =>
        {
            x.Add(x => x.MediaType, mediaType);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }

    public async Task ChooseRandomTitle(MediaType type)
    {
        if (AppState.WatchingList == null) return;

        var random = new Random();

        if (type == MediaType.movie)
        {
            var index = random.Next(AppState.WatchingList.Movies.Count);
            var media = AppState.WatchingList.Movies.ToList()[index];
            await ShowCollectionPopup(media?.id, media?.name, MediaType.movie);
        }
        else
        {
            var index = random.Next(AppState.WatchingList.Shows.Count);
            var media = AppState.WatchingList.Shows.ToList()[index];
            await ShowCollectionPopup(media?.id, media?.name, MediaType.tv);
        }
    }

    public Task ShowCollectionPopup(string? tmdb_id, string? name, MediaType type)
    {
        if (string.IsNullOrEmpty(tmdb_id)) return default!;

        return ModalService.Show<Suggestions.Components.CollectionPopup>(name,
            x =>
            {
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, type);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    private async Task ImportFromWatched(MediaType type)
    {
        var watching = AppState.WatchingList ?? new WatchingList();

        if (type == MediaType.movie)
        {
            AppState.WatchingList?.Movies.Clear();

            foreach (var tmdb_id in AppState.WatchedList?.GetItems(MediaType.movie) ?? new())
            {
                var media = await TmdbApi.GetMediaDetail(tmdb_id, MediaType.movie);
                if (media == null) continue;
                var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

                if (hasCollection && !watching.DeletedMovies.Any(a => a == media.collectionId.ToString()))
                {
                    var item = watching?.GetItem(MediaType.movie, media.collectionId?.ToString());

                    if (item == null)
                    {
                        var items = new HashSet<string>();
                        items.Add(tmdb_id);

                        item = new WatchingListItem(media.collectionId?.ToString(), media.collectionName, media.collectionLogo?.Replace(TmdbOptions.SmallPosterPath, ""), media.Collection.Count, items);
                    }
                    else
                    {
                        item.watched.Add(tmdb_id);
                    }

                    if (item.watched.Count < item.maxItems)
                    {
                        watching = await WatchingListApi.Add(MediaType.movie, item);
                    }
                    else
                    {
                        watching = await WatchingListApi.Remove(MediaType.movie, media.collectionId?.ToString());
                    }

                    AppState.ChangeWatchingList(watching);
                }
            }

            watching = await WatchingListApi.Sync(MediaType.movie);

            AppState.ChangeWatchingList(watching);
        }
        else
        {
            AppState.WatchingList?.Shows.Clear();

            foreach (var tmdb_id in AppState.WatchedList?.GetItems(MediaType.tv) ?? new())
            {
                var media = await TmdbApi.GetMediaDetail(tmdb_id, MediaType.tv);
                if (media == null) continue;
                var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

                if (hasCollection && !watching.DeletedShows.Any(a => a == media.tmdb_id))
                {
                    var item = watching?.GetItem(MediaType.tv, media.tmdb_id);

                    if (item == null)
                    {
                        var items = new HashSet<string>();
                        items.Add(media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).FirstOrDefault()?.id ?? "");

                        item = new WatchingListItem(media.tmdb_id, media.title, media.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), media.Collection.Count, items);
                    }
                    else
                    {
                        item.watched.Add(media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).FirstOrDefault()?.id ?? "");
                    }

                    watching = await WatchingListApi.Add(MediaType.tv, item);

                    AppState.ChangeWatchingList(watching);
                }
            }

            watching = await WatchingListApi.Sync(MediaType.tv);

            AppState.ChangeWatchingList(watching);
        }

        StateHasChanged();
    }
}
