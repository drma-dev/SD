@using SD.WEB.Modules.Suggestions.Core;
@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Provider.Core;
@inherits ComponenteCore<MyWatchingListComponent>

@inject TmdbApi TmdbApi
@inject AppState State
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi

<HeaderComponent IconName="@FontAwesomeIcons.Eye" Title="@GlobalTranslations.MyMovieWatching.Format(WatchingList?.Movies.Count() ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList(MediaType.movie))" title="@GlobalTranslations.SeeAllItems" Disabled="(!WatchingList?.Movies.Any()??true)" Class="ml-1">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await ChooseRandomTitle(MediaType.movie))" title="@GlobalTranslations.PickARandom" Disabled="(!WatchingList?.Movies.Any()??true)">
        <Blazorise.Icon Name="FontAwesomeIcons.Random"></Blazorise.Icon>
    </Button>
    @if ((WatchingList?.MovieCanSync ?? false) && (WatchedList?.Movies.Any() ?? false))
    {
        <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Margin="Margin.Is1.FromEnd" Clicked="()=>ImportFromWatched(MediaType.movie)" title="@GlobalTranslations.ButtonUpdate" Disabled="MovieUpdating">
            @GlobalTranslations.ButtonUpdate
        </Button>
    }
</HeaderComponent>
<RenderControl @ref="RenderControlMovies" Task="LoadWatchingListMovies" PrivateContent="true">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in WatchingList?.Movies.Take(GetTotalItems) ?? new List<WatchingListItem>())
        {
            int percentComplete = (int)Math.Round((double)(100 * item.watched.Count) / item.maxItems);
            var resultPerc = $"{percentComplete}%";

            <Column ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is3.OnMobile">
                <Card Style="position: relative;">
                    @if (percentComplete == 100)
                    {
                        <Badge Color="Color.Success" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                    }
                    else
                    {
                        <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                    }

                    @if (string.IsNullOrEmpty(item.logo))
                    {
                        <CardImage Source="noimage.png" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowCollectionPopup(item.id, item.name, MediaType.movie))" Style="cursor: pointer;"></CardImage>

                        <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 2rem; color: black; text-align: center; font-weight: 500;">
                            @item.name
                        </Div>
                    }
                    else
                    {
                        <CardImage Source="@(TmdbOptions.SmallPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowCollectionPopup(item.id, item.name, MediaType.movie))" Style="cursor: pointer;"></CardImage>
                    }
                </Card>
            </Column>
        }
    </Row>
</RenderControl>

<HeaderComponent IconName="@FontAwesomeIcons.Eye" Title="@GlobalTranslations.MyShowWatching.Format(WatchingList?.Shows.Count() ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList(MediaType.tv))" title="@GlobalTranslations.SeeAllItems" Disabled="(!WatchingList?.Shows.Any()??true)" Class="ml-1">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await ChooseRandomTitle(MediaType.tv))" title="@GlobalTranslations.PickARandom" Disabled="(!WatchingList?.Shows.Any()??true)">
        <Blazorise.Icon Name="FontAwesomeIcons.Random"></Blazorise.Icon>
    </Button>
    @if ((WatchingList?.ShowCanSync ?? false) && (WatchedList?.Shows.Any() ?? false))
    {
        <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Margin="Margin.Is1.FromEnd" Clicked="()=>ImportFromWatched(MediaType.tv)" title="@GlobalTranslations.ButtonUpdate" Disabled="ShowUpdating">
            @GlobalTranslations.ButtonUpdate
        </Button>
    }
</HeaderComponent>
<RenderControl @ref="RenderControlShows" Task="LoadWatchingListShows" PrivateContent="true">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in WatchingList?.Shows.Take(GetTotalItems) ?? new List<WatchingListItem>())
        {
            int percentComplete = (int)Math.Round((double)(100 * item.watched.Count) / item.maxItems);
            var resultPerc = $"{percentComplete}%";

            <Column ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is3.OnMobile">
                <Card Style="position: relative;">
                    @if (percentComplete == 100)
                    {
                        <Badge Color="Color.Success" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                    }
                    else
                    {
                        <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@resultPerc</Badge>
                    }

                    @if (string.IsNullOrEmpty(item.logo))
                    {
                        <CardImage Source="noimage.png" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowCollectionPopup(item.id, item.name, MediaType.tv))" Style="cursor: pointer;"></CardImage>

                        <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 2rem; color: black; text-align: center; font-weight: 500;">
                            @item.name
                        </Div>
                    }
                    else
                    {
                        <CardImage Source="@(TmdbOptions.SmallPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowCollectionPopup(item.id, item.name, MediaType.tv))" Style="cursor: pointer;"></CardImage>
                    }
                </Card>
            </Column>
        }
    </Row>
</RenderControl>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public bool Fake { get; set; } = false;

    private int GetTotalItems => AppStateStatic.OnFullHD ? 6 : 4;

    public bool MovieUpdating { get; set; } = false;
    public bool ShowUpdating { get; set; } = false;

    private WatchedList? WatchedList;
    private WatchingList? WatchingList;

    private RenderControl? RenderControlMovies;
    private RenderControl? RenderControlShows;

    protected override void OnInitialized()
    {
        AppState.WatchedListChanged += (WatchedList? list) => { WatchedList = list; StateHasChanged(); };
        AppState.WatchingListChanged += (WatchingList? list) => { WatchingList = list; StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        await base.LoadDataRender();
        if (await AppState.IsUserAuthenticated()) WatchedList ??= await AppState.GetWatchedList(true);
    }

    protected async Task<bool> LoadWatchingListMovies()
    {
        WatchingList ??= await AppState.GetWatchingList(true);

        return WatchingList == null || !WatchingList.Movies.Any();
    }

    protected async Task<bool> LoadWatchingListShows()
    {
        WatchingList ??= await AppState.GetWatchingList(true);

        return WatchingList == null || !WatchingList.Shows.Any();
    }

    private async Task OpenCompleteList(MediaType mediaType)
    {
        await ModalService.Show<MyWatchingListPopup>(null,
        x =>
        {
            x.Add(x => x.MediaType, mediaType);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }

    public async Task ChooseRandomTitle(MediaType type)
    {
        if (WatchingList == null) return;

        var random = new Random();

        if (type == MediaType.movie)
        {
            var index = random.Next(WatchingList.Movies.Count);
            var media = WatchingList.Movies.ToList()[index];
            await ShowCollectionPopup(media?.id, media?.name, MediaType.movie);
        }
        else
        {
            var index = random.Next(WatchingList.Shows.Count);
            var media = WatchingList.Shows.ToList()[index];
            await ShowCollectionPopup(media?.id, media?.name, MediaType.tv);
        }
    }

    public Task ShowCollectionPopup(string? tmdb_id, string? name, MediaType type)
    {
        if (string.IsNullOrEmpty(tmdb_id)) return default!;

        return ModalService.Show<Suggestions.Components.CollectionPopup>(name,
            x =>
            {
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, type);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    private async Task ImportFromWatched(MediaType type)
    {
        try
        {
            var watching = WatchingList ?? new WatchingList();

            if (type == MediaType.movie)
            {
                WatchingList?.Movies.Clear();
                MovieUpdating = true;
                RenderControlMovies?.ShowLoading();

                foreach (var tmdb_id in WatchedList?.GetItems(MediaType.movie) ?? new())
                {
                    var media = await TmdbApi.GetMediaDetail(tmdb_id, MediaType.movie);
                    if (media == null) continue;
                    var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

                    if (hasCollection && !watching.DeletedMovies.Any(a => a == media.collectionId.ToString()))
                    {
                        var item = watching?.GetItem(MediaType.movie, media.collectionId?.ToString());

                        if (item == null)
                        {
                            var items = new HashSet<string>();
                            items.Add(tmdb_id);

                            item = new WatchingListItem(media.collectionId?.ToString(), media.collectionName, media.collectionLogo?.Replace(TmdbOptions.SmallPosterPath, ""), media.Collection.Count, items);
                        }
                        else
                        {
                            item.maxItems = media.Collection.Count;
                            item.watched.Add(tmdb_id);
                        }

                        watching = await WatchingListApi.Add(MediaType.movie, item);

                        AppState.ChangeWatchingList(watching);
                    }
                }

                watching = await WatchingListApi.Sync(MediaType.movie);

                AppState.ChangeWatchingList(watching);
                MovieUpdating = false;
                RenderControlMovies?.ShowContent(watching == null || !watching.Movies.Any());
            }
            else
            {
                WatchingList?.Shows.Clear();
                ShowUpdating = true;
                RenderControlShows?.ShowLoading();

                foreach (var tmdb_id in WatchedList?.GetItems(MediaType.tv) ?? new())
                {
                    var media = await TmdbApi.GetMediaDetail(tmdb_id, MediaType.tv);
                    if (media == null) continue;
                    var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

                    if (hasCollection && !watching.DeletedShows.Any(a => a == media.tmdb_id))
                    {
                        var item = watching?.GetItem(MediaType.tv, media.tmdb_id);

                        if (item == null)
                        {
                            var items = new HashSet<string>();
                            items.Add(media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).FirstOrDefault()?.id ?? "");

                            item = new WatchingListItem(media.tmdb_id, media.title, media.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), media.Collection.Count, items);
                        }
                        else
                        {
                            item.maxItems = media.Collection.Count;
                            item.watched.Add(media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue).FirstOrDefault()?.id ?? "");
                        }

                        watching = await WatchingListApi.Add(MediaType.tv, item);

                        AppState.ChangeWatchingList(watching);
                    }
                }

                watching = await WatchingListApi.Sync(MediaType.tv);

                AppState.ChangeWatchingList(watching);
                ShowUpdating = false;
                RenderControlShows?.ShowContent(watching == null || !watching.Shows.Any());
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            MovieUpdating = false;
            ShowUpdating = false;
            RenderControlMovies?.ShowError(ex.Message);
            RenderControlShows?.ShowError(ex.Message);
            ex.ProcessException(Toast, Logger);
        }
    }
}
