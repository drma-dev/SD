@inherits ComponenteCore<Wishlist>

@inject IJSRuntime JS

@if (ShowHeader)
{
    <HeaderComponent IconName="@FontAwesomeIcons.Bookmark" Title="@Title">
        @if (ShowPrivateAction)
        {
            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList())"
                    title="@GlobalTranslations.SeeAllItems" Disabled="Items.Empty()" Class="ml-1">
                <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
            </Button>
            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" Clicked="@(()=>Share($"{Navigation.BaseUri}shared/wishlist/{MediaType}/{UserId}"))"
                    title="@GlobalTranslations.Share" Disabled="Items.Empty()">
                <Blazorise.Icon Name="FontAwesomeIcons.Share"></Blazorise.Icon>
            </Button>
        }
    </HeaderComponent>
}
<RenderControl Core="Core" PrivateContent="ShowPrivateAction" Model="Wish" ExpressionEmpty="ExpressionEmpty">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in Items.Take(GetTotalItems) ?? [])
        {
            var logo = string.IsNullOrEmpty(item.logo) ? "" : TmdbOptions.SmallPosterPath + item.logo;
            <Column ColumnSize="@ColSize">
                <Card>
                    <PosterComponent Poster="@logo" Title="@item.name" Runtime="item.runtime" TmdbId="@item.id" MediaType="MediaType"
                                     Clicked="@(async()=>await ShowMediaPopup(item.id, item.name))" ShowWished="false"
                                     WatchedList="Watched" WishList="Wish"></PosterComponent>
                </Card>
            </Column>
        }
    </Row>
</RenderControl>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter][EditorRequired] public RenderControlCore<WishList?> Core { get; set; } = new();
    [Parameter][EditorRequired] public MediaType MediaType { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }
    [Parameter][EditorRequired] public bool ShowHeader { get; set; }
    [Parameter][EditorRequired] public bool FullScreen { get; set; }
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public Func<WishList?, bool> ExpressionEmpty { get; set; } = default!;
    [Parameter] public string? CustomTitle { get; set; }

    private HashSet<WishListItem> Items => MediaType == MediaType.movie ? Wish?.Movies ?? new HashSet<WishListItem>() : Wish?.Shows ?? new HashSet<WishListItem>();

    private int GetTotalItems => !FullScreen ? (AppStateStatic.OnFullHD ? 6 : 4) : 100;
    private string? Title => CustomTitle ?? (MediaType == MediaType.movie ? GlobalTranslations.MyMovieWishlist.Format(Items.Count()) : GlobalTranslations.MyShowWishlist.Format(Items.Count()));
    private IFluentColumn ColSize => FullScreen ? ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile : ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is3.OnMobile;

    private async Task OpenCompleteList()
    {
        await ModalService.MyWishListPopup(Core, Watched, Watching, Wish, MediaType, ShowPrivateAction);
    }

    public Task ShowMediaPopup(string? tmdb_id, string? name)
    {
        if (string.IsNullOrEmpty(tmdb_id)) return default!;

        return ModalService.MediaPopup(Watched, Watching, Wish, MediaType, tmdb_id, ShowPrivateAction);
    }

    private async Task Share(string? link)
    {
        await JS.InvokeVoidAsync("share", link);
    }
}
