@if (ShowHeader)
{
    <HeaderComponent IconName="@FontAwesomeIcons.Bookmark" Title="@Title">
        @if (Private)
        {
            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList())" title="@GlobalTranslations.SeeAllItems" Disabled="(!Items.Any())" Class="ml-1">
                <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
            </Button>
            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await ChooseRandomTitle())" title="@GlobalTranslations.PickARandom" Disabled="(!Items.Any())">
                <Blazorise.Icon Name="FontAwesomeIcons.Random"></Blazorise.Icon>
            </Button>
        }
    </HeaderComponent>
}
<RenderControl Core="Core" PrivateContent="Private" Model="WishList"
               ExpressionEmpty="@((WishList? list)=>MediaType==MediaType.movie ? list==null||!list.Movies.Any() : list==null||!list.Shows.Any())">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in Items.Take(GetTotalItems) ?? new List<WishListItem>())
        {
            var logo = string.IsNullOrEmpty(item.logo) ? "" : TmdbOptions.SmallPosterPath + item.logo;
            <Column ColumnSize="@ColSize">
                <Card>
                    <PosterComponent Poster="@logo" Title="@item.name" Runtime="item.runtime" TmdbId="@item.id" MediaType="MediaType"
                                     Clicked="@(async()=>await ShowMediaPopup(item.id, item.name))" ShowWished="false"
                                     Private="Private" WatchedList="WatchedList" WishList="WishList"></PosterComponent>
                </Card>
            </Column>
        }
    </Row>
</RenderControl>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter][EditorRequired] public RenderControlCore<WishList?>? Core { get; set; }
    [Parameter][EditorRequired] public MediaType MediaType { get; set; }
    [Parameter][EditorRequired] public bool Private { get; set; }
    [Parameter][EditorRequired] public bool ShowHeader { get; set; }
    [Parameter][EditorRequired] public bool FullScreen { get; set; }
    [Parameter][EditorRequired] public WatchedList? WatchedList { get; set; }
    [Parameter][EditorRequired] public WishList? WishList { get; set; }

    private HashSet<WishListItem> Items => MediaType == MediaType.movie ? WishList?.Movies ?? new HashSet<WishListItem>() : WishList?.Shows ?? new HashSet<WishListItem>();

    private int GetTotalItems => !FullScreen ? (AppStateStatic.OnFullHD ? 6 : 4) : 100;
    private string? Title => MediaType == MediaType.movie ? GlobalTranslations.MyMovieWishlist.Format(Items.Count()) : GlobalTranslations.MyShowWishlist.Format(Items.Count());
    private IFluentColumn ColSize => FullScreen ? ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile : ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is3.OnMobile;

    private async Task OpenCompleteList()
    {
        await ModalService.Show<MyWishListPopup>(null,
        x =>
        {
            x.Add(x => x.MediaType, MediaType);
            x.Add(x => x.WatchedList, WatchedList);
            x.Add(x => x.WishList, WishList);
            x.Add(x => x.Core, Core);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }

    public async Task ChooseRandomTitle()
    {
        if (!Items.Any()) return;

        var random = new Random();

        if (MediaType == MediaType.movie)
        {
            var index = random.Next(Items.Count);
            var media = Items.ToList()[index];
            await ShowMediaPopup(media?.id, media?.name);
        }
        else
        {
            var index = random.Next(Items.Count);
            var media = Items.ToList()[index];
            await ShowMediaPopup(media?.id, media?.name);
        }
    }

    public Task ShowMediaPopup(string? tmdb_id, string? name)
    {
        if (string.IsNullOrEmpty(tmdb_id)) return default!;

        return ModalService.Show<Suggestions.Components.MediaPopup>(name,
            x =>
            {
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, MediaType);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }
}
