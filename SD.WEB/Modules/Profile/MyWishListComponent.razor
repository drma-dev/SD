@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Provider.Core;
@inherits ComponenteCore<MyWishListComponent>
@inject AppState State

<HeaderComponent IconName="@FontAwesomeIcons.Bookmark" Title="@GlobalTranslations.MyMovieWishlist.Format(WishList?.Movies.Count() ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList(MediaType.movie))" title="@GlobalTranslations.SeeAllItems" Disabled="(!WishList?.Movies.Any()??true)" Class="ml-1">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await ChooseRandomTitle(MediaType.movie))" title="@GlobalTranslations.PickARandom" Disabled="(!WishList?.Movies.Any()??true)">
        <Blazorise.Icon Name="FontAwesomeIcons.Random"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<RenderControl Task="LoadWishListMovies" PrivateContent="true">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in WishList?.Movies.Take(GetTotalItems) ?? new List<WishListItem>())
        {
            var logo = string.IsNullOrEmpty(item.logo) ? "" : TmdbOptions.SmallPosterPath + item.logo;
            <Column ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is3.OnMobile">
                <Card>
                    <PosterComponent Poster="@logo" Title="@item.name" Runtime="item.runtime" TmdbId="@item.id" MediaType="@MediaType.movie"
                                     Clicked="@(async()=>await ShowMediaPopup(item.id, item.name, MediaType.movie))" ShowWished="false"></PosterComponent>
                </Card>
            </Column>
        }
    </Row>
</RenderControl>

<HeaderComponent IconName="@FontAwesomeIcons.Bookmark" Title="@GlobalTranslations.MyShowWishlist.Format(WishList?.Shows.Count() ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList(MediaType.tv))" title="@GlobalTranslations.SeeAllItems" Disabled="(!WishList?.Shows.Any()??true)" Class="ml-1">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await ChooseRandomTitle(MediaType.tv))" title="@GlobalTranslations.PickARandom" Disabled="(!WishList?.Shows.Any()??true)">
        <Blazorise.Icon Name="FontAwesomeIcons.Random"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<RenderControl Task="LoadWishListShows" PrivateContent="true">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in WishList?.Shows.Take(GetTotalItems) ?? new List<WishListItem>())
        {
            var logo = string.IsNullOrEmpty(item.logo) ? "" : TmdbOptions.SmallPosterPath + item.logo;
            <Column ColumnSize="ColumnSize.Is2.OnFullHD.Is3.OnDesktop.Is3.OnMobile">
                <Card>
                    <PosterComponent Poster="@logo" Title="@item.name" Runtime="item.runtime" TmdbId="@item.id" MediaType="@MediaType.movie"
                                     Clicked="@(async()=>await ShowMediaPopup(item.id, item.name, MediaType.tv))" ShowWished="false"></PosterComponent>
                </Card>
            </Column>
        }
    </Row>
</RenderControl>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public bool Fake { get; set; } = false;

    private int GetTotalItems => AppStateStatic.OnFullHD ? 6 : 4;

    private WishList? WishList;

    protected override void OnInitialized()
    {
        AppState.WishListChanged += (WishList? list) => { WishList = list; StateHasChanged(); };
    }

    protected async Task<bool> LoadWishListMovies()
    {
        WishList ??= await AppState.GetWishList(true);

        return WishList == null || !WishList.Movies.Any();
    }

    protected async Task<bool> LoadWishListShows()
    {
        WishList ??= await AppState.GetWishList(true);

        return WishList == null || !WishList.Shows.Any();
    }

    private async Task OpenCompleteList(MediaType mediaType)
    {
        await ModalService.Show<MyWishListPopup>(null,
        x =>
        {
            x.Add(x => x.MediaType, mediaType);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }

    public async Task ChooseRandomTitle(MediaType type)
    {
        if (WishList == null) return;

        var random = new Random();

        if (type == MediaType.movie)
        {
            var index = random.Next(WishList.Movies.Count);
            var media = WishList.Movies.ToList()[index];
            await ShowMediaPopup(media?.id, media?.name, MediaType.movie);
        }
        else
        {
            var index = random.Next(WishList.Shows.Count);
            var media = WishList.Shows.ToList()[index];
            await ShowMediaPopup(media?.id, media?.name, MediaType.tv);
        }
    }

    public Task ShowMediaPopup(string? tmdb_id, string? name, MediaType type)
    {
        if (string.IsNullOrEmpty(tmdb_id)) return default!;

        return ModalService.Show<Suggestions.Components.MediaPopup>(name,
            x =>
            {
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, type);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }
}
