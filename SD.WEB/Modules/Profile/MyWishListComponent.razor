@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Provider.Core;
@inherits ComponenteCore<MyWishListComponent>

<Alert Visible="true" Color="Color.Secondary" Margin="Margin.Is2.FromTop">
    <AlertMessage><Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> @GlobalTranslations.MyMovieWishlist.Format(AppState.WishList?.Movies.Count() ?? 0)</AlertMessage>

    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList(MediaType.movie))">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</Alert>
<AuthorizeView>
    <Authorized>
        <Loading @ref="LoadingWishlistMovie">
            <Row HorizontalGutter="4" VerticalGutter="4">
                @foreach (var item in AppState.WishList?.Movies.Take(GetTotalItems) ?? new List<WishListItem>())
                {
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                        <Card>
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@item?.runtime.FormatRuntime()</Badge>
                            <CardImage Source="@(TmdbOptions.SmallPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowMediaPopup(item, MediaType.movie))" Style="cursor: pointer;"></CardImage>
                        </Card>
                    </Column>
                }
            </Row>
        </Loading>
    </Authorized>
    <NotAuthorized>
        <Alert Visible="true" Color="Color.Primary">
            <AlertMessage><Blazorise.Icon Name="FontAwesomeIcons.ExclamationTriangle"></Blazorise.Icon> Realizar login para utilizar essa funcionalidade</AlertMessage>
        </Alert>
    </NotAuthorized>
</AuthorizeView>

<Alert Visible="true" Color="Color.Secondary" Margin="Margin.Is2.FromTop">
    <AlertMessage><Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> @GlobalTranslations.MyShowWishlist.Format(AppState.WishList?.Shows.Count() ?? 0)</AlertMessage>

    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(async()=>await OpenCompleteList(MediaType.tv))">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</Alert>
<AuthorizeView>
    <Authorized>
        <Loading @ref="LoadingWishlistShow">
            <Row HorizontalGutter="4" VerticalGutter="4">
                @foreach (var item in AppState.WishList?.Shows.Take(GetTotalItems) ?? new List<WishListItem>())
                {
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                        <Card>
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@item?.runtime.FormatRuntime()</Badge>
                            <CardImage Source="@(TmdbOptions.SmallPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                                   onclick="@(async()=>await ShowMediaPopup(item, MediaType.tv))" Style="cursor: pointer;"></CardImage>
                        </Card>
                    </Column>
                }
            </Row>
        </Loading>
    </Authorized>
    <NotAuthorized>
        <Alert Visible="true" Color="Color.Primary">
            <AlertMessage><Blazorise.Icon Name="FontAwesomeIcons.ExclamationTriangle"></Blazorise.Icon> Realizar login para utilizar essa funcionalidade</AlertMessage>
        </Alert>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    public Loading? LoadingWishlistMovie { get; set; }
    public Loading? LoadingWishlistShow { get; set; }

    private int GetTotalItems => AppStateStatic.OnFullHD ? 12 : (AppStateStatic.OnTablet ? 6 : 8);

    protected override void OnInitialized()
    {
        AppState.WishListChanged += () =>
        {
            LoadingWishlistMovie?.Finish(!AppState.WishList?.Movies.Any() ?? true);
            LoadingWishlistShow?.Finish(!AppState.WishList?.Shows.Any() ?? true);
            StateHasChanged();
        };
        AppState.WatchedListChanged += StateHasChanged;

        base.OnInitialized();
    }

    protected override async Task LoadData()
    {
        LoadingWishlistMovie?.Start();
        LoadingWishlistShow?.Start();

        AppState.ChangeWishList(await WishListApi.Get(await AppState.IsUserAuthenticated()));
        AppState.ChangeWatchedList(await WatchedListApi.Get(await AppState.IsUserAuthenticated()));

        LoadingWishlistMovie?.Finish(!AppState.WishList?.Movies.Any() ?? true);
        LoadingWishlistShow?.Finish(!AppState.WishList?.Shows.Any() ?? true);
    }

    private async Task OpenCompleteList(MediaType mediaType)
    {
        await ModalService.Show<MyWishListPopup>(null,
        x =>
        {
            x.Add(x => x.MediaType, mediaType);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }

    public Task ShowMediaPopup(WishListItem item, MediaType type)
    {
        return ModalService.Show<List.Components.MediaPopup>(item.name,
            x =>
            {
                x.Add(x => x.tmdb_id, item.id);
                x.Add(x => x.type, type);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }
}
