@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Profile.Resources
@using SD.WEB.Modules.Provider.Core;
@inherits ComponentCore<MyProviderComponent>

@inject MyProvidersApi MyProvidersApi
@inject AllProvidersApi AllProvidersApi
@inject IHttpClientFactory httpClientFactory

<HeaderComponent IconName="@FontAwesomeIcons.Star" Title="@Translations.MyProviders.Format(myProviders?.Items.Count ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(()=>{ expand = !expand; })" title="Show all providers" Disabled="(myProviders == null || myProviders.Items.Empty())">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>

<RenderControl Core="Core" Model="myProviders" ExpressionEmpty="((MyProviders? obj)=> obj == null || obj.Items.Empty())" PrivateContent="true">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in myProviders?.Items.Take(GetTotalItems(expand)) ?? new List<MyProvidersItem>())
        {
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                <Card Style="position: relative;">
                    <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="padding: 0.15rem; font-size: 0.65rem; position: absolute; top: 3px; left: 3px; z-index: 1;"
                           title="@item.region?.GetCustomAttribute()?.Name">
                        @item.region?.ToString()
                    </Badge>
                    @if (!allProviders?.Items.Any(a => a.id == item.id) ?? false)
                    {
                        <Badge Color="Color.Danger" Style="position: absolute; bottom: 0; z-index: 1; width: 100%;">
                            <Blazorise.Icon Name="FontAwesomeIcons.Trash" TextColor="TextColor.Light" IconSize="IconSize.x2"></Blazorise.Icon>
                        </Badge>
                    }
                    <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                               onclick="@(()=>ShowProviderPopup(item))" Style="cursor: pointer;"></CardImage>
                </Card>
            </Column>
        }
    </Row>
</RenderControl>

@code {
    [Parameter][EditorRequired] public WatchedList? WatchedList { get; set; }
    [Parameter][EditorRequired] public WatchingList? WatchingList { get; set; }
    [Parameter][EditorRequired] public WishList? WishList { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }

    [Parameter] public bool Fake { get; set; } = false;

    public RenderControlCore<MyProviders?> Core { get; set; } = new();
    private AllProviders? allProviders { get; set; }
    private MyProviders? myProviders { get; set; }
    private bool expand { get; set; }

    private int GetTotalItems(bool expand) => AppStateStatic.OnMobile && !expand ? 4 : 12;

    protected override void OnInitialized()
    {
        MyProvidersApi.DataChanged += (MyProviders? model) => { myProviders = model; Core?.LoadingFinished?.Invoke(model); StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        if (Fake)
        {
            var http = httpClientFactory.CreateClient("RetryHttpClient");

            myProviders = await http.GetFromJsonAsync<MyProviders>("/data/MyProvider.json");
        }
        else
        {
            myProviders = await MyProvidersApi.Get(IsAuthenticated, Core);
            if (allProviders == null) allProviders = await AllProvidersApi.GetAll(null);
        }

        if (myProviders != null)
        {
            if (myProviders.Items.Any(a => !a.region.HasValue)) //update region (legacy)
            {
                foreach (var item in myProviders.Items)
                {
                    if (!item.region.HasValue)
                    {
                        var provider = allProviders?.Items.FirstOrDefault(f => f.id == item.id);

                        if (provider != null)
                        {
                            if (provider.regions.Any(a => a == AppStateStatic.Region))
                            {
                                item.region = AppStateStatic.Region;
                            }
                            else
                            {
                                item.region = provider.regions.First();
                            }
                        }
                    }
                }

                var client = await PrincipalApi.Get(IsAuthenticated);
                await Toast.Warning(Translations.RegionsApplied);
                await MyProvidersApi.Update(myProviders, client?.ClientePaddle);

                StateHasChanged();
            }
        }
    }

    public async Task ShowProviderPopup(MyProvidersItem item)
    {
        if (allProviders == null) allProviders = await AllProvidersApi.GetAll(null);

        await ModalService.ProviderPopup(allProviders?.Items.FirstOrDefault(f => f.id == item.id), WatchedList, WatchingList, WishList, ShowPrivateAction,
            item.region?.ToString(), item.id);
    }
}
