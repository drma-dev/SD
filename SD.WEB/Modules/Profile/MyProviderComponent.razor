@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Provider.Core;
@inherits ComponenteCore<MyProviderComponent>

@inject MyProvidersApi MyProvidersApi
@inject AllProvidersApi AllProvidersApi
@inject IHttpClientFactory httpClientFactory
@inject AppState State

<HeaderComponent IconName="@FontAwesomeIcons.Star" Title="@GlobalTranslations.MyProviders.Format(myProviders?.Items.Count ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(()=>{ expand = !expand; })" title="Show all providers">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>

<Loading @ref="LoadingProvider" UnauthenticatedUser="!IsUserAuthenticated">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in myProviders?.Items.Take(GetTotalItems(expand)) ?? new List<MyProvidersItem>())
        {
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                <Card>
                    <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                           onclick="@(()=>ShowProviderPopup(item))" Style="cursor: pointer;"></CardImage>
                </Card>
            </Column>
        }
    </Row>
</Loading>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public bool Fake { get; set; } = false;

    private AllProviders? allProviders { get; set; }
    private MyProviders? myProviders { get; set; }
    private Loading? LoadingProvider { get; set; }
    private bool IsUserAuthenticated { get; set; }
    private bool expand { get; set; }

    private int GetTotalItems(bool expand) => AppStateStatic.OnMobile && !expand ? 4 : 12;

    protected override async Task LoadData()
    {
        LoadingProvider?.Start();

        if (Fake)
        {
            var http = httpClientFactory.CreateClient("RetryHttpClient");

            IsUserAuthenticated = true;

            myProviders = await http.GetFromJsonAsync<MyProviders>("/Data/MyProvider.json");
            LoadingProvider?.Finish(!myProviders?.Items.Any() ?? true);
        }
        else
        {
            IsUserAuthenticated = await State.IsUserAuthenticated();

            if (IsUserAuthenticated)
            {
                myProviders = await MyProvidersApi.Get(await AppState.IsUserAuthenticated());
                LoadingProvider?.Finish(!myProviders?.Items.Any() ?? true);
            }
            else
            {
                LoadingProvider?.Finish(true);
            }
        }

        StateHasChanged();
    }

    public async Task ShowProviderPopup(MyProvidersItem item)
    {
        if (allProviders == null) allProviders = await AllProvidersApi.GetAll();

        await ModalService.Show<Provider.Components.ProviderPopup>(item.name,
            x =>
            {
                x.Add(x => x.provider, allProviders?.Items.FirstOrDefault(f => f.id == item.id));
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.ExtraLarge,
                });
    }
}
