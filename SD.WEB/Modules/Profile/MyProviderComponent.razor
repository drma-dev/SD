@using SD.WEB.Modules.Profile.Core;
@using SD.WEB.Modules.Provider.Core;
@inherits ComponenteCore<MyProviderComponent>

@inject MyProvidersApi MyProvidersApi
@inject AllProvidersApi AllProvidersApi
@inject IHttpClientFactory httpClientFactory

<HeaderComponent IconName="@FontAwesomeIcons.Star" Title="@GlobalTranslations.MyProviders.Format(myProviders?.Items.Count ?? 0)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@(()=>{ expand = !expand; })" title="Show all providers" Disabled="(myProviders == null || myProviders.Items.Empty())">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>

<RenderControl Core="Core" Model="myProviders" ExpressionEmpty="((MyProviders? obj)=> obj == null || obj.Items.Empty())" PrivateContent="true">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in myProviders?.Items.Take(GetTotalItems(expand)) ?? new List<MyProvidersItem>())
        {
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                <Card>
                    <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo)" Alt="@item.name" title="@item.name"
                               onclick="@(()=>ShowProviderPopup(item))" Style="cursor: pointer;"></CardImage>
                </Card>
            </Column>
        }
    </Row>
</RenderControl>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter][EditorRequired] public WatchedList? WatchedList { get; set; }
    [Parameter][EditorRequired] public WatchingList? WatchingList { get; set; }
    [Parameter][EditorRequired] public WishList? WishList { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }

    [Parameter] public bool Fake { get; set; } = false;

    public RenderControlCore<MyProviders?> Core { get; set; } = new();
    private AllProviders? allProviders { get; set; }
    private MyProviders? myProviders { get; set; }
    private bool expand { get; set; }

    private int GetTotalItems(bool expand) => AppStateStatic.OnMobile && !expand ? 4 : 12;

    protected override void OnInitialized()
    {
        MyProvidersApi.DataChanged += (MyProviders? model) => { myProviders = model; Core?.LoadingFinished?.Invoke(model); StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        if (Fake)
        {
            var http = httpClientFactory.CreateClient("RetryHttpClient");

            myProviders = await http.GetFromJsonAsync<MyProviders>("/data/MyProvider.json");
        }
        else
        {
            myProviders = await MyProvidersApi.Get(IsAuthenticated, Core);
        }
    }

    public async Task ShowProviderPopup(MyProvidersItem item)
    {
        if (allProviders == null) allProviders = await AllProvidersApi.GetAll(null);

        await ModalService.ProviderPopup(allProviders?.Items.FirstOrDefault(f => f.id == item.id), WatchedList, WatchingList, WishList, ShowPrivateAction);
    }
}
