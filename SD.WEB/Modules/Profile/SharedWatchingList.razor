@page "/shared/watching/{type}/{token}"
<SeoHeader Title="@($"Watching ({Gravatar?.displayName}) | {(type == "movie" ? MediaType.movie.GetName() : MediaType.tv.GetName())}")" Icon="@Gravatar?.photos.LastOrDefault()?.value"></SeoHeader>

@using SD.Shared.Core.Models
@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core

@inherits PageCore<SharedWatchingList>
@inject WishListApi WishApi
@inject WatchingListApi WatchingApi
@inject WatchedListApi WatchedApi

@if (type == "movie")
{
    <WatchingComponent Core="CoreWatching" MediaType="MediaType.movie" ShowPrivateAction="false" ShowHeader="true" FullScreen="true"
                       Watched="Watched" Watching="Watching" Wish="Wish"
                       ExpressionEmpty="(WatchingList? list) => list == null || list.Movies.Empty()" CustomTitle="@($"Watching ({Gravatar?.displayName}) | { MediaType.movie.GetName()}")"></WatchingComponent>
}
else
{
    <WatchingComponent Core="CoreWatching" MediaType="MediaType.tv" ShowPrivateAction="false" ShowHeader="true" FullScreen="true"
                       Watched="Watched" Watching="Watching" Wish="Wish"
                       ExpressionEmpty="(WatchingList? list) => list == null || list.Shows.Empty()" CustomTitle="@($"Watching ({Gravatar?.displayName}) | { MediaType.tv.GetName()}")"></WatchingComponent>
}

@code {
    [Parameter] public string? type { get; set; }
    [Parameter] public string? token { get; set; }

    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public Gravatar? Gravatar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var Client = await PrincipalApi.Get();
        Gravatar = await PrincipalApi.GetGravatar(Client?.Email);
    }

    protected override async Task LoadDataRender()
    {
        (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, null, token), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, null, token));
    }
}
