@page "/profile"
@using SD.WEB.Modules.Profile.Components;
@using SD.WEB.Modules.Profile.Core
<SeoHeader Title="@SeoTranslations.ProfileTitle" Description="@SeoTranslations.ProfileDescription" Url="/profile"></SeoHeader>
@inherits PageCore<Profile>
@inject IHttpClientFactory httpClientFactory

@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

@if (IsUserAuthenticated)
{
    <Jumbotron Background="Background.Primary" Margin="Margin.Is4.FromBottom" Padding="Padding.Is4">
        <JumbotronTitle Size="JumbotronTitleSize.Is4">Wellcome!</JumbotronTitle>
        <JumbotronSubtitle>
            You have free access to the entire platform, but with some restrictions.
        </JumbotronSubtitle>
        <Divider DividerType="DividerType.Solid" Border="Border.White"></Divider>
        <Paragraph>
            For more benefits, we invite you to become a premium user. <Blazorise.Link Clicked="OpenSubscription" TextColor="TextColor.White" Style="cursor: pointer;">click here</Blazorise.Link> to find out more.
        </Paragraph>
    </Jumbotron>
}

<MyProviderComponent Fake="Fake" WatchedList="WatchedList" WishList="WishList"></MyProviderComponent>

<MySuggestions Fake="Fake" WatchedList="WatchedList" WishList="WishList"></MySuggestions>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <MyWishListComponent WatchedList="WatchedList" WishList="WishList" CoreWishlist="CoreWishlist"></MyWishListComponent>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <MyWatchingListComponent Fake="Fake" WatchedList="WatchedList" WatchingList="WatchingList" WishList="WishList" Core="CoreWatching"></MyWatchingListComponent>
    </Column>
</Row>

@code {
    [Parameter][SupplyParameterFromQuery(Name = "Fake")] public bool Fake { get; set; } = false;
    [Inject] public IModalService ModalService { get; set; } = default!;

    public RenderControlCore<WatchedList> CoreWatchedList { get; set; } = new();
    public RenderControlCore<WatchingList> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList> CoreWishlist { get; set; } = new();

    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override void OnInitialized()
    {
        WatchedListApi.DataChanged += (WatchedList? model) => WatchedList = model;
        WatchedListApi.SetRenderCore(CoreWatchedList);

        WatchingListApi.DataChanged += (WatchingList? model) => WatchingList = model;
        WatchingListApi.SetRenderCore(CoreWatching);

        WishListApi.DataChanged += (WishList? model) => WishList = model;
        WishListApi.SetRenderCore(CoreWishlist);
    }

    protected override async Task LoadDataRender()
    {
        if (Fake)
        {
            var http = httpClientFactory.CreateClient("RetryHttpClient");

            WatchedList = await http.GetFromJsonAsync<WatchedList>("/data/WatchedList.json");
            WatchingList = await http.GetFromJsonAsync<WatchingList>("/data/WatchingList.json");
            WishList = await http.GetFromJsonAsync<WishList>("/data/WishList.json");
        }
        else
        {
            WatchedList = await WatchedListApi.Get(IsUserAuthenticated);
            WatchingList = await WatchingListApi.Get(IsUserAuthenticated);
            WishList = await WishListApi.Get(IsUserAuthenticated);
        }
    }

    private async Task OpenSubscription()
    {
        await ModalService.Show<SubscriptionPopup>(null,
        x =>
        {
            // x.Add(x => x.MediaType, mediaType);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.Large,
            });
    }
}