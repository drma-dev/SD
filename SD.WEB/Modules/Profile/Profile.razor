@page "/profile"
@using SD.Shared.Core.Models
@using SD.Shared.Models.Auth
@using SD.WEB.Modules.Auth
@using SD.WEB.Modules.Auth.Core
@using SD.WEB.Modules.Profile.Components;
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Profile.Resources
<SeoHeader Title="@SeoTranslations.ProfileTitle" Description="@SeoTranslations.ProfileDescription" Url="/profile"></SeoHeader>
@inherits PageCore<Profile>
@inject IHttpClientFactory httpClientFactory
@inject IJSRuntime JsRuntime

@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi
@inject PaddleConfigurationApi ConfigurationApi
@inject GravatarApi GravatarApi

@if (IsAuthenticated)
{
    <Jumbotron Background="Background.Secondary" Margin="Margin.Is3.FromBottom" Padding="Padding.Is3">
        <Row>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Figure Size="FigureSize.Is64x64" Margin="Margin.Is0.OnDesktop">
                    <FigureImage Source="@Gravatar?.photos.LastOrDefault()?.value" AlternateText="@Gravatar?.displayName" Rounded="true" />
                </Figure>
            </Column>
            <Column>
                <Text TextSize="TextSize.Heading4">
                    @Gravatar?.displayName
                </Text><br />
                <Text TextSize="TextSize.Heading6">
                    @Client?.Email
                </Text>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="MyAccount">
                    <Blazorise.Icon Name="FontAwesomeIcons.UserCircle"></Blazorise.Icon>
                    @Translations.Account
                </Button>
                <Button Color="Color.Primary" Clicked="OpenSubscription">
                    <Blazorise.Icon Name="FontAwesomeIcons.Gem"></Blazorise.Icon>
                    @Translations.Subscription
                </Button>
            </Column>
        </Row>
    </Jumbotron>
}

<MyProviderComponent Fake="Fake" WatchedList="Watched" WatchingList="Watching" WishList="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MyProviderComponent>

<MySuggestions Fake="Fake" Watched="Watched" Watching="Watching" Wish="Wish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MySuggestions>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <MyWishListComponent Watched="Watched" Watching="Watching" Wish="Wish" CoreWishlist="CoreWish" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated" UserId="@UserId"></MyWishListComponent>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <MyWatchingListComponent Watched="Watched" Watching="Watching" Wish="Wish" CoreWatching="CoreWatching" ShowPrivateAction="true" IsAuthenticated="IsAuthenticated" UserId="@UserId"></MyWatchingListComponent>
    </Column>
</Row>

@code {
    [SupplyParameterFromQuery][Parameter] public string? _ptxn { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "Fake")] public bool Fake { get; set; } = false;

    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    public ClientePrincipal? Client { get; set; }
    public Gravatar? Gravatar { get; set; }

    protected override void OnInitialized()
    {
        WatchedApi.DataChanged += (WatchedList? model) => { Watched = model; CoreWatched?.LoadingFinished?.Invoke(model); StateHasChanged(); };
        WatchingApi.DataChanged += (WatchingList? model) => { Watching = model; CoreWatching?.LoadingFinished?.Invoke(model); StateHasChanged(); };
        WishApi.DataChanged += (WishList? model) => { Wish = model; CoreWish?.LoadingFinished?.Invoke(model); StateHasChanged(); };
        PrincipalApi.DataChanged += (ClientePrincipal? model) => { Client = model; StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        Client = await PrincipalApi.Get(IsAuthenticated);
        Gravatar = await GravatarApi.GetGravatar(Client?.Email);

        if (!string.IsNullOrEmpty(_ptxn))
        {
            var config = await ConfigurationApi.GetConfigurations();
            if (config == null) throw new NotificationException("server comunication error");

            await JsRuntime.InvokeVoidAsync("startPaddle", config.Token);
        }

        if (Fake)
        {
            var http = httpClientFactory.CreateClient("RetryHttpClient");

            Watched = await http.GetFromJsonAsync<WatchedList>("/data/WatchedList.json");
            Watching = await http.GetFromJsonAsync<WatchingList>("/data/WatchingList.json");
            Wish = await http.GetFromJsonAsync<WishList>("/data/WishList.json");
        }
        else
        {
            (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));
        }
    }

    private async Task MyAccount()
    {
        await ModalService.OpenPopup<ProfilePopup>(x => { x.Add(x => x.principal, Client); x.Add(x => x.Gravatar, Gravatar); }, ModalSize.Large);
    }

    private async Task OpenSubscription()
    {
        await ModalService.SubscriptionPopup(Client, IsAuthenticated);
    }

    protected async Task OpenCheckout(string? priceId)
    {
        var locale = AppStateStatic.Language.ToString()?.Substring(0, 2);

        await JsRuntime.InvokeVoidAsync("openCheckout", null, null, locale, null, null, _ptxn);
    }
}