@page "/profile"
@using SD.WEB.Modules.Profile.Components;
@using SD.WEB.Modules.Profile.Core
<SeoHeader Title="@SeoTranslations.ProfileTitle" Description="@SeoTranslations.ProfileDescription" Url="/profile"></SeoHeader>
@inherits PageCore<Profile>
@inject IHttpClientFactory httpClientFactory

@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi

@if (IsAuthenticated)
{
    <Jumbotron Background="Background.Primary" Margin="Margin.Is3.FromBottom" Padding="Padding.Is3">
        <JumbotronTitle Size="JumbotronTitleSize.Is4">
            @GlobalTranslations.SubscriptionTitle
        </JumbotronTitle>
        <JumbotronSubtitle>
            @GlobalTranslations.SubscriptionSubTitle
        </JumbotronSubtitle>
        <Divider DividerType="DividerType.Solid" Border="Border.White"></Divider>
        <Paragraph>
            @{
                var sentence = @GlobalTranslations.SubscriptionSubTitle2.Split("|");
            }
            @sentence[0] <Blazorise.Link Clicked="OpenSubscription" TextColor="TextColor.White" Style="cursor: pointer; text-decoration-line: underline;">@sentence[1]</Blazorise.Link> @sentence[2]
        </Paragraph>
        <Button Clicked="MyAccount">minha conta</Button>
    </Jumbotron>
}

<MyProviderComponent Fake="Fake" WatchedList="Watched" WatchingList="Watching" WishList="Wish"></MyProviderComponent>

<MySuggestions Fake="Fake" Watched="Watched" Watching="Watching" Wish="Wish"></MySuggestions>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <MyWishListComponent Watched="Watched" Watching="Watching" Wish="Wish" CoreWishlist="CoreWish"></MyWishListComponent>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <MyWatchingListComponent Watched="Watched" Watching="Watching" Wish="Wish" CoreWatching="CoreWatching"></MyWatchingListComponent>
    </Column>
</Row>

    @code {
        [Parameter][SupplyParameterFromQuery(Name = "Fake")] public bool Fake { get; set; } = false;
        [Inject] public IModalService ModalService { get; set; } = default!;

    public RenderControlCore<WatchedList?> CoreWatched { get; set; } = new();
    public RenderControlCore<WatchingList?> CoreWatching { get; set; } = new();
    public RenderControlCore<WishList?> CoreWish { get; set; } = new();

    public WatchedList? Watched { get; set; }
    public WatchingList? Watching { get; set; }
    public WishList? Wish { get; set; }

    protected override void OnInitialized()
    {
        WatchedApi.DataChanged += (WatchedList? model) => { Watched = model; StateHasChanged(); };
        WatchingApi.DataChanged += (WatchingList? model) => { Watching = model; StateHasChanged(); };
        WishApi.DataChanged += (WishList? model) => { Wish = model; StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        if (Fake)
        {
            var http = httpClientFactory.CreateClient("RetryHttpClient");

            Watched = await http.GetFromJsonAsync<WatchedList>("/data/WatchedList.json");
            Watching = await http.GetFromJsonAsync<WatchingList>("/data/WatchingList.json");
            Wish = await http.GetFromJsonAsync<WishList>("/data/WishList.json");
        }
        else
        {
            (Watched, Watching, Wish) = await (WatchedApi.Get(IsAuthenticated, CoreWatched), WatchingApi.Get(IsAuthenticated, CoreWatching), WishApi.Get(IsAuthenticated, CoreWish));
        }
    }

    private async Task OpenSubscription()
    {
        await ModalService.SubscriptionPopup();
    }

    private void MyAccount()
    {
        Navigation.NavigateTo("profile/account");
    }
}