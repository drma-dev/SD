@using SD.WEB.Modules.Profile.Components
@using SD.WEB.Modules.Profile.Core
@inherits ComponenteCore<MyWatchingListPopup>

@inject WatchedListApi WatchedApi
@inject WatchingListApi WatchingApi
@inject WishListApi WishApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">
        @Title.Format(Quantity)
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    @if (MediaType == MediaType.movie)
    {
        <WatchingComponent MediaType="MediaType" Private="true" ShowHeader="false" FullScreen="true" Watched="Watched" Watching="Watching" Wish="Wish"
                           Core="Core" ExpressionEmpty="(WatchingList? list) => list == null || list.Movies.Empty()"></WatchingComponent>
    }
    else
    {
        <WatchingComponent MediaType="MediaType" Private="true" ShowHeader="false" FullScreen="true" Watched="Watched" Watching="Watching" Wish="Wish"
                           Core="Core" ExpressionEmpty="(WatchingList? list) => list == null || list.Shows.Empty()"></WatchingComponent>
    }
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
        @TranslationText.Close
    </Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter][EditorRequired] public RenderControlCore<WatchingList?>? Core { get; set; }
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter] public MediaType MediaType { get; set; }

    private string Title => MediaType == MediaType.movie ? GlobalTranslations.MyMovieWatching : GlobalTranslations.MyShowWatching;
    private int Quantity => MediaType == MediaType.movie ? Watching?.Movies.Count ?? 0 : Watching?.Shows.Count ?? 0;

    protected override void OnInitialized()
    {
        WatchedApi.DataChanged += (WatchedList? model) => { Watched = model; StateHasChanged(); };
        WatchingApi.DataChanged += (WatchingList? model) => { Watching = model; Core?.LoadingFinished?.Invoke(model); StateHasChanged(); };
        WishApi.DataChanged += (WishList? model) => { Wish = model; StateHasChanged(); };
    }
}
