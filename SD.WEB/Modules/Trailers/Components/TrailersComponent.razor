@using SD.Shared.Models.News;
@using SD.Shared.Models.Trailers;
@inherits ComponenteCore<TrailersComponent>

@inject CacheYoutubeApi CacheYoutubeApi

<HeaderComponent Title="@($"{GlobalTranslations.TrailersTitle} - {Language.enUS.GetName()}")" IconImage="logo/one-media.png">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@OpenCompleteList" title="Show all news">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<RenderControl Core="Core" Model="TrailerModel" ExpressionEmpty="@((TrailerModel? obj) => obj == null || obj.Items.Empty())">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is1.FromBottom">
        @foreach (var item in TrailerModel?.Items ?? new())
        {
            <Column ColumnSize="ColumnSize.Is6.OnMobile.Is4.OnWidescreen.Is3.OnFullHD">
                <Blazorise.Link Target="Target.Blank" To="@($"https://www.youtube.com/watch?v={item?.id}")">
                    <Card>
                        <CardImage Source="@item?.url" Alt="@item?.title">
                        </CardImage>
                        <CardBody>
                            <CardText Style="line-height: normal; font-size: 0.8rem;">
                                @item?.title.GetResume(45)
                            </CardText>
                        </CardBody>
                    </Card>
                </Blazorise.Link>
            </Column>
        }
    </Row>
</RenderControl>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    public RenderControlCore<TrailerModel?> Core { get; set; } = new();
    private TrailerModel? TrailerModel { get; set; }

    protected override void OnInitialized()
    {
        CacheYoutubeApi.SetRenderCore(Core);
    }

    protected override async Task LoadDataRender()
    {
        TrailerModel = await CacheYoutubeApi.GetTrailers("compact");
    }

    private async Task OpenCompleteList()
    {
        await ModalService.Show<TrailersPopup>(null,
        x =>
        {
            //
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }
}