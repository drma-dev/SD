@using SD.Shared.Models.News;
@using SD.Shared.Models.Trailers;
@using System.Text.Json;
@inherits ComponenteCore<TrailersPopup>

@inject CacheApi CacheApi

<ModalHeader>
    <ModalTitle>@GlobalTranslations.TrailersTitle</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <Loading @ref="Loading">
        <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is1.FromBottom">
            @foreach (var item in YoutubeChanel?.Items ?? new())
            {
                <Column ColumnSize="ColumnSize.Is6.OnMobile.Is4.OnWidescreen.Is3.OnFullHD">
                    <Blazorise.Link Target="Target.Blank" To="@($"https://www.youtube.com/watch?v={item?.id}")">
                        <Card>
                            <CardImage Source="@item?.url" Alt="@item?.title">
                            </CardImage>
                            <CardBody>
                                <CardText Style="line-height: normal; font-size: 0.75rem;">
                                    @item?.title
                                </CardText>
                            </CardBody>
                        </Card>
                    </Blazorise.Link>
                </Column>
            }
        </Row>
    </Loading>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide">@TranslationText.Close</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    public Loading? Loading { get; set; }
    private TrailerModel? YoutubeChanel { get; set; }

    protected override async Task LoadData()
    {
        Loading?.Start();

        var cache = await CacheApi.GetTrailers("full");

        YoutubeChanel = (TrailerModel?)cache?.Data;

        Loading?.Finish(YoutubeChanel == null);
    }
}