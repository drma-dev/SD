@using SD.Shared.Models.News;
@using SD.Shared.Models.Trailers;
@using SD.WEB.Modules.Trailers.Resources
@using System.Text.Json;
@inherits ComponentCore<TrailersPopup>

@inject CacheYoutubeApi CacheYoutubeApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@($"{Translations.TrailersTitle} - ONE Media")</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <RenderControl Core="Core" Model="TrailerModel" ExpressionEmpty="@((TrailerModel? obj) => obj == null || obj.Items.Empty())">
        <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is1.FromBottom">
            @foreach (var item in TrailerModel?.Items ?? new())
            {
                <Column ColumnSize="ColumnSize.Is6.OnMobile.Is4.OnWidescreen.Is3.OnFullHD">
                    <Blazorise.Link Target="Target.Blank" To="@($"https://www.youtube.com/watch?v={item?.id}".HideExternalLink())">
                        <Card>
                            <CardImage Source="@item?.url" Alt="@item?.title">
                            </CardImage>
                            <CardBody>
                                <CardText Style="line-height: normal; font-size: 0.8rem;">
                                    @item?.title
                                </CardText>
                            </CardBody>
                        </Card>
                    </Blazorise.Link>
                </Column>
            }
        </Row>
    </RenderControl>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
        @WEB.Resources.Button.Close
    </Button>
</ModalFooter>

@code {
    public RenderControlCore<TrailerModel?> Core { get; set; } = new();
    private TrailerModel? TrailerModel { get; set; }

    protected override async Task LoadDataRender()
    {
        TrailerModel = await CacheYoutubeApi.GetTrailers("full", Core);
    }
}