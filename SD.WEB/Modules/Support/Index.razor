@page "/support/"
@page "/support/index"
<SeoHeader Title="@SeoTranslations.SupportTitle" Description="@SeoTranslations.SupportDescription" Url="/support"></SeoHeader>
@inherits PageCore<Support.Index>
@using SD.Shared.Models.Support
@using SD.WEB.Modules.Support.Component

<Alert Color="Color.Secondary" Visible="true">
    <AlertDescription>
        <Blazorise.Link To="@("support/terms/" + (AppStateStatic.Language == Language.ptBR ? "pt" : "en"))">
            @Resources.Translations.LinkTerm
        </Blazorise.Link> ▪ <Blazorise.Link To="@("support/privacy/" + (AppStateStatic.Language == Language.ptBR ? "pt" : "en"))">
            @Resources.Translations.LinkPrivacy
        </Blazorise.Link>
    </AlertDescription>
</Alert>

<Div Margin="Margin.Is2.OnY">
    <Button Size="Size.Small" Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Announcements)" Clicked="(() => ChangeOrder(Tabs.Announcements))">
        @Resources.Translations.TabAnnouncements
    </Button>
    <Button Size="Size.Small" Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Roadmap)" Clicked="(() => ChangeOrder(Tabs.Roadmap))">
        @Resources.Translations.TabRoadmap
    </Button>
    <Button Size="Size.Small" Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Feedback)" Clicked="(() => ChangeOrder(Tabs.Feedback))">
        @Resources.Translations.TabFeedback
    </Button>
    <Button Size="Size.Small" Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Downloads)" Clicked="(() => ChangeOrder(Tabs.Downloads))">
        @Resources.Translations.TabDownloads
    </Button>
</Div>

@if (SelectedTab == Tabs.Announcements)
{
    <AnnouncementComponent></AnnouncementComponent>
}
else if (SelectedTab == Tabs.Roadmap)
{
    <CardDeck>
        <Card Background="Background.Secondary">
            <CardHeader TextWeight="TextWeight.Bold">
                @TicketStatus.UnderConsideration.GetName()
            </CardHeader>
            <CardBody>
                <CardText>
                    <ListGroup Flush="true">
                        <ListGroupItem Background="Background.Secondary">
                            Notify users when new movies and TV shows are added to the platform, or when their favorite movies and TV shows become available to provider
                        </ListGroupItem>
                        <ListGroupItem Background="Background.Secondary">
                            A section where users can rate the provider and leave their own reviews and feedback, helping others to make an informed decision
                        </ListGroupItem>
                        <ListGroupItem Background="Background.Secondary">
                            show original content (movies, series, etc) that the provider offers
                        </ListGroupItem>
                        <ListGroupItem Background="Background.Secondary">
                            A list of the devices that are compatible with the provider, such as smart TVs, gaming consoles, mobile devices, etc.
                        </ListGroupItem>
                        <ListGroupItem Background="Background.Secondary">
                            Information about the provider's customer support, including the availability of live chat, email, phone, and self-help resources.
                        </ListGroupItem>
                        <ListGroupItem Background="Background.Secondary">
                            A list of any unique features or tools that the provider offers, such as parental controls, offline viewing, and personalized recommendations.
                        </ListGroupItem>
                    </ListGroup>
                </CardText>
            </CardBody>
        </Card>
        <Card Background="Background.Primary">
            <CardHeader TextWeight="TextWeight.Bold">
                @TicketStatus.Planned.GetName()
            </CardHeader>
            <CardBody>
                <CardText>
                    <ListGroup Flush="true">
                        <ListGroupItem Background="Background.Primary">
                            Implement paying user features, thus enabling platform maintenance and new features.
                        </ListGroupItem>
                    </ListGroup>
                </CardText>
            </CardBody>
        </Card>
        <Card Background="Background.Warning">
            <CardHeader TextWeight="TextWeight.Bold">
                @TicketStatus.Progress.GetName()
            </CardHeader>
            <CardBody>
                <CardText>
                    <ListGroup Flush="true">
                        <ListGroupItem Background="Background.Warning">
                            Allow users to share what they are watching with friends and family through social media platforms like Facebook, Twitter, and Instagram
                        </ListGroupItem>
                    </ListGroup>
                </CardText>
            </CardBody>
        </Card>
        <Card Background="Background.Success">
            <CardHeader TextWeight="TextWeight.Bold">
                @TicketStatus.Done.GetName()
            </CardHeader>
            <CardBody>
                <CardText>
                    <ListGroup Flush="true">
                        <ListGroupItem Background="Background.Success">
                            Show reviews (with ratings) from expert critics
                        </ListGroupItem>
                        <ListGroupItem Background="Background.Success">
                            Show ratings from various specialized sites, such as: IMDB, TMDB, Metacritic, Trakt, etc.
                        </ListGroupItem>
                    </ListGroup>
                </CardText>
            </CardBody>
        </Card>
    </CardDeck>
}
else if (SelectedTab == Tabs.Feedback)
{
    <FeedbackComponent></FeedbackComponent>
}
else if (SelectedTab == Tabs.Downloads)
{
    <DownloadComponent></DownloadComponent>
}

@code {
    private enum Tabs
    {
        Announcements,
        Roadmap,
        Feedback,
        Downloads
    }

    private Tabs SelectedTab = Tabs.Announcements;

    private void ChangeOrder(Tabs tab)
    {
        SelectedTab = tab;
    }
}