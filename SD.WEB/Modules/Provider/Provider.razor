@page "/Provider"
<PageTitle>SD - Provedores</PageTitle>
@using SD.Shared.Model
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Core
@inherits ComponenteCore<Provider>
@inject Settings Settings

<Alert Visible="true" Color="Color.Secondary">
    <AlertMessage>@TranslationText.Providers (@Settings?.Region)</AlertMessage>
    <RadioGroup TValue="int" @bind-CheckedValue="ProviderCount" Buttons="true" Float="Float.End" Class="btn-group-xs">
        <Radio TValue="int" Value="48">48</Radio>
        <Radio TValue="int" Value="1000">@TranslationText.All</Radio>
    </RadioGroup>
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Margin="Margin.Is2.FromEnd" Clicked="@(async()=>{if(PopupFilter!=null)await PopupFilter.ShowModal();})">
        <Blazorise.Icon Name="FontAwesomeIcons.Filter"></Blazorise.Icon>
    </Button>
</Alert>

<CustomVisibility NoData="(!AllProviders?.Items.Any()??true)">
    <Row HorizontalGutter="4" VerticalGutter="4">
        @foreach (var item in GetFilteredProviders(MediaType, DeliveryModel, Content))
        {
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                <Card>
                    <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Alt="@item.name"
                           onclick="@(() => ShowPopupProvider(item))" Style="cursor: pointer;"></CardImage>
                </Card>
                @*@if (string.IsNullOrEmpty(item.link))
                {
                    <p class="m-0" style="color: red">link</p>
                }
                @if (string.IsNullOrEmpty(item.description))
                {
                    <p class="m-0" style="color: red">description</p>
                }
                @if (!item.models.Any())
                {
                    <p class="m-0" style="color: red">model</p>
                }
                @if (item.models.Any(a => a == SD.Shared.Modal.Enum.DeliveryModel.SVOD) && !item.plans.Any())
                {
                    <p class="m-0" style="color: red">plan</p>
                }*@
            </Column>
        }
    </Row>
</CustomVisibility>

<PopupFilter @ref="PopupFilter" @bind-MediaTypeNull="MediaType" @bind-DeliveryModel="DeliveryModel" @bind-Content="Content"></PopupFilter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    public PopupFilter? PopupFilter { get; set; }

    public MediaType? MediaType { get; set; } = SD.Shared.Enums.MediaType.movie;
    public DeliveryModel? DeliveryModel { get; set; }
    public string? Content { get; set; }

    public int ProviderCount { get; set; } = 48;

    private AllProviders? AllProviders { get; set; }
    private WishList? wishList { get; set; }
    private WatchedList? watchedList { get; set; }

    public IEnumerable<ProviderModel> GetFilteredProviders(MediaType? mediaType, DeliveryModel? deliveryModel, string? content) => AllProviders?.Items.OrderBy(o => o.priority).Where(p =>
        p.regions.Any(a => a == Settings.Region) &
        (mediaType.HasValue ? p.types.Any(a => a == mediaType.Value) : true) &
        (deliveryModel.HasValue ? p.models.Any(a => a == deliveryModel.Value) : true) &
        p.enabled &
        (p.empty_catalog.HasValue ? p.empty_catalog.Value == false : true) &
        (string.IsNullOrEmpty(content) ? true : (p.name?.Contains(content, StringComparison.InvariantCultureIgnoreCase) ?? false | (string.IsNullOrEmpty(p.description) ? true : p.description.Contains(content, StringComparison.InvariantCultureIgnoreCase))))
    ).Take(ProviderCount) ?? Array.Empty<ProviderModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            RefreshCore.RegionChanged = new EventCallbackFactory().Create(this, (Region value) => Settings.Region = value);

            wishList = await Http.WishList_Get(Session);
            watchedList = await Http.WatchedList_Get(Session);

            AllProviders = await Http.Provider_GetAll(Session);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task ShowPopupProvider(ProviderModel item)
    {
        var type = MediaType.HasValue ? MediaType.Value : SD.Shared.Enums.MediaType.movie;

        await ModalService.Show<ProviderPopup>(item.name,
            x =>
            {
                x.Add(x => x.provider, item);
                x.Add(x => x.mediaType, type);
                x.Add(x => x.WishList, wishList);
                x.Add(x => x.WatchedList, watchedList);
                x.Add(x => x.WishListChanged, new EventCallbackFactory().Create(this, (WishList value) => { wishList = value; }));
                x.Add(x => x.WatchedListChanged, new EventCallbackFactory().Create(this, (WatchedList value) => { watchedList = value; }));
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.ExtraLarge,
                });
    }
}