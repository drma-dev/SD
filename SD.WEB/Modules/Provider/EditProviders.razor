@page "/edit-providers"
@inherits PageCore<EditProviders>
@attribute [Authorize(Roles = "administrator")]

@using Blazorise.DataGrid
@using HtmlAgilityPack
@using System.Net.Http
@using SD.Shared.Models.List.Tmdb;
@using SD.WEB.Modules.Provider.Core
@using System.Text.Json;
@inject AllProvidersApi AllProvidersApi
@inject IJSRuntime JS

<Button Clicked="@SyncProvidersOnClick" Color="Color.Primary">Sync Providers</Button>
<Button Clicked="@SaveSession" Color="Color.Primary">Save Session</Button>

<DataGrid @ref="DataGrid" TItem="ProviderModel" Data="@AllProviders?.Items" Filterable="true" Editable="true" EditMode="DataGridEditMode.Form"
          ShowPager="true" PageSize="10" FilterMethod="DataGridFilterMethod.Contains"
          RowUpdated="RowUpdated">
    <DataGridColumns>
        <DataGridCommandColumn TItem="ProviderModel" Width="140px">
            <ClearFilterCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked" Size="Size.Small">
                    <Blazorise.Icon Name="FontAwesomeIcons.Filter"></Blazorise.Icon>
                </Button>
            </ClearFilterCommandTemplate>
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked" Size="Size.Small">
                    <Blazorise.Icon Name="FontAwesomeIcons.Plus"></Blazorise.Icon>
                </Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked" Size="Size.Small" Margin="Margin.Is1.FromEnd">
                    <Blazorise.Icon Name="FontAwesomeIcons.Edit"></Blazorise.Icon>
                </Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked" Size="Size.Small" Margin="Margin.Is1.FromEnd">
                    <Blazorise.Icon Name="FontAwesomeIcons.Save"></Blazorise.Icon>
                </Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked" Size="Size.Small" Margin="Margin.Is1.FromEnd">
                    <Blazorise.Icon Name="FontAwesomeIcons.Ban"></Blazorise.Icon>
                </Button>
            </CancelCommandTemplate>
            <DeleteCommandTemplate>
                @*<Button Color="Color.Danger" Clicked="@context.Clicked" Size="Size.Small">
                <Blazorise.Icon Name="FontAwesomeIcons.Trash"></Blazorise.Icon>
                </Button>*@
                <Button Color="Color.Secondary" Clicked="@(async() => await ShowPopupProvider(context.Item))" Size="Size.Small">
                    <Blazorise.Icon Name=" FontAwesomeIcons.Eye">
                    </Blazorise.Icon>
                </Button>
                <Button Color="Color.Link" To="@("https://www.google.com/search?q=streaming+" + @context.Item.name)" Type="ButtonType.Link" Target="Target.Blank" Size="Size.Small" Visibility="@(string.IsNullOrEmpty(context.Item.link)?Visibility.Visible:Visibility.Invisible)">
                    <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon>
                </Button>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="ProviderModel" Field="@nameof(ProviderModel.name)" Caption="Name" />
        <DataGridColumn TItem="ProviderModel" Field="@nameof(ProviderModel.description)" Caption="Description" Editable="true">
            <EditTemplate>
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <MemoEdit Text="@((string)context.CellValue)" TextChanged="@((v) => context.CellValue = v)" Rows="3" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Success" Clicked="@(async() => { context.CellValue = "searching..."; context.CellValue = await GetDescriptionOnClick(context.Item.link); })" Size="Size.Small" Visibility="@(string.IsNullOrEmpty(context.Item.link)?Visibility.Invisible:Visibility.Visible)">
                            <Blazorise.Icon Name="FontAwesomeIcons.Sync"></Blazorise.Icon>
                        </Button>
                    </Addon>
                </Addons>
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="ProviderModel" Field="@nameof(ProviderModel.link)" Caption="Link" Editable="true"></DataGridColumn>
        <DataGridColumn TItem="ProviderModel" Field="@nameof(ProviderModel.head_language)" Caption="Head Language" Editable="true">
            <EditTemplate>
                <Select TValue="Language?" SelectedValue="@((Language?)context.CellValue)" SelectedValueChanged="@((v) => context.CellValue = v)" Size="Size.Small" Style="width:auto;">
                    <SelectItem TValue="@(Language?)" Value="@((Language?)null)"></SelectItem>
                    @foreach (var item in Languages.Where(w => !string.IsNullOrEmpty(w.Name)).OrderBy(o => o.Name))
                    {
                        <SelectItem TValue="Language?" Value="@((Language)item.Value)">@item.Name</SelectItem>
                    }
                </Select>
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    public MediaType MediaType { get; set; } = MediaType.movie;

    public DataGrid<ProviderModel>? DataGrid { get; set; }
    private AllProviders? AllProviders { get; set; }

    public IEnumerable<EnumObject> Languages { get; set; } = Array.Empty<EnumObject>();

    protected override void OnInitialized()
    {
        Languages = EnumHelper.GetList<Language>();
    }

    protected override async Task LoadDataRender()
    {
        AllProviders = await AllProvidersApi.GetAll();
    }

    private async Task ShowPopupProvider(ProviderModel item)
    {
        await ModalService.Show<Components.ProviderPopup>(item.name,
            x =>
            {
                x.Add(x => x.provider, item);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.ExtraLarge,
                });
    }

    protected async Task SaveSession()
    {
        if (AllProviders != null)
        {
            await JS.InvokeVoidAsync("window.localStorage.setItem",
                new object[] { "AllProviders", JsonSerializer.Serialize(AllProviders, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) });
        }
    }

    protected async Task SyncProvidersOnClick()
    {
        try
        {
            var result = new List<ProviderModel>();

            if (AllProviders != null)
            {
                var details = AllProviders.Items;

                foreach (var region in EnumHelper.GetArray<Region>())
                {
                    var parameter = new Dictionary<string, string>()
                        {
                            { "api_key", TmdbOptions.ApiKey },
                            { "language", Language.enUS.GetName(false) ?? "en-US" },
                            { "watch_region", region.ToString() }
                        };

                    using (var http = new HttpClient())
                    {
                        var movies = await http.GetFromJsonAsync<TMDB_AllProviders>(TmdbOptions.BaseUri + "watch/providers/movie".ConfigureParameters(parameter));
                        if (movies != null) AddProvider(result, movies.results, details, region, MediaType.movie);

                        var tvs = await http.GetFromJsonAsync<TMDB_AllProviders>(TmdbOptions.BaseUri + "watch/providers/tv".ConfigureParameters(parameter));
                        if (tvs != null) AddProvider(result, tvs.results, details, region, MediaType.tv);
                    }
                }

                AllProviders.Items = result.OrderBy(o => int.Parse(o.id ?? "0")).ToList();

                await SaveSession();
            }

            await Toast.Success("Synchronization Finished");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private static void AddProvider(List<ProviderModel> final_list, List<ProviderBase> new_providers, List<ProviderModel> current_providers, Region region, MediaType type)
    {
        foreach (var item in new_providers)
        {
            var detail = current_providers.FirstOrDefault(f => f.id == item.provider_id.ToString());
            var new_item = final_list.FirstOrDefault(f => f.id == item.provider_id.ToString());

            if (new_item == null)
            {
                final_list.Add(new ProviderModel
                    {
                        //api
                        id = item.provider_id.ToString(),
                        name = item.provider_name,
                        priority = item.display_priority,
                        logo_path = item.logo_path,
                        //own data (manual update)
                        description = detail?.description,
                        link = detail?.link,
                        head_language = detail?.head_language,
                        plans = detail?.plans ?? new(),
                        models = detail?.models ?? new(),
                        //api by regions
                        regions = new List<Region> { region },
                        types = new List<MediaType> { type }
                    });
            }
            else
            {
                if (!new_item.regions.Any(a => a == region))
                {
                    new_item.regions.Add(region);
                }
                new_item.regions = new_item.regions.OrderBy(o => o).ToList();

                if (!new_item.types.Any(a => a == type))
                {
                    new_item.types.Add(type);
                }
                new_item.types = new_item.types.OrderBy(o => o).ToList();
            }
        }
    }

    protected void RowUpdated(SavedRowItem<ProviderModel, Dictionary<string, object>> e)
    {
        var item = AllProviders?.Items.FirstOrDefault(f => f.id == e.Item.id);

        item = e.Item;
    }

    protected async Task<string> GetDescriptionOnClick(string? url)
    {
        if (url == null) throw new ArgumentNullException(nameof(url));

        try
        {
            var client = new HttpClient();

            using (var requestMessage = new HttpRequestMessage(HttpMethod.Get, "https://cors-anywhere.herokuapp.com/" + url))
            {
                requestMessage.Headers.Add("origin", "x-requested-with");

                var response = await client.SendAsync(requestMessage);
                using HttpContent content = response.Content;
                var sourcedata = await content.ReadAsStringAsync();

                if (sourcedata == "See /corsdemo for more info\n")
                {
                    return "https://cors-anywhere.herokuapp.com/";
                }

                var result = GetMetaTagValue(sourcedata);
                return result;
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
            return ex.Message;
        }
    }

    private string GetMetaTagValue(string html)
    {
        var doc = new HtmlDocument();

        doc.LoadHtml(html);

        var metaTags = doc.DocumentNode.SelectNodes("//meta");
        if (metaTags != null)
        {
            foreach (var sitetag in metaTags)
            {
                if (sitetag.Attributes["name"] != null && sitetag.Attributes["content"] != null && sitetag.Attributes["name"].Value.Contains("description"))
                {
                    var content = sitetag.Attributes["content"].Value;

                    if (string.IsNullOrEmpty(content)) return "description empty";

                    return System.Web.HttpUtility.HtmlDecode(content);
                }
            }
        }
        else
        {
            return "something wrong (metaTags null)";
        }

        return "no description found";
    }
}