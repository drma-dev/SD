@using SD.Shared.Model
@inherits ComponenteCore<ProviderPopup>
@using SD.WEB.Modules.List.Core
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.List.Components
@inject MyProvidersApi MyProvidersApi
@inject TmdbDiscoveryApi TmdbDiscoveryApi

<ModalHeader>
    <ModalTitle>@provider?.name</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <Tabs @bind-SelectedTab="@selectedTab" Pills="true" FullWidth="true" Justified="true">
        <Items>
            <Tab Name="About">@GlobalTranslations.ProviderPopupTabAbout</Tab>
            <Tab Name="Details">@GlobalTranslations.ProviderPopupTabDetails</Tab>
            <Tab Name="Catalog">@GlobalTranslations.ProviderPopupTabCatalog</Tab>
        </Items>
        <Content>
            <TabPanel Name="About" Class="mt-3">
                <Row Margin="Margin.Is2.FromBottom" HorizontalGutter="4" VerticalGutter="4">
                    <Column ColumnSize="ColumnSize.IsAuto">
                        @if (!string.IsNullOrEmpty(provider?.logo_path))
                        {
                            <Image Source="@(TmdbOptions.OriginalPosterPath + provider.logo_path)" Text="@provider.name"></Image>
                        }
                    </Column>
                    <Column>
                        <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom">
                            @provider?.description
                        </Paragraph>
                        <Paragraph>
                            @if (string.IsNullOrEmpty(provider?.link))
                            {
                                <a href="@("https://www.google.com/search?q=streaming+" + provider?.name)" target="_blank" rel="noopener" style="float: left;">search on google</a>
                            }
                            else
                            {
                                <a href="@provider.link" target="_blank" rel="noopener" style="float: left;">@(new Uri(provider.link).Host)</a>
                            }
                        </Paragraph>
                    </Column>
                </Row>
            </TabPanel>
            <TabPanel Name="Details" Class="mt-3">
                <Divider DividerType="DividerType.TextContent" Text="@TranslationText.MediaTypes" />
                @foreach (var item in provider?.types ?? new List<MediaType>())
                {
                    <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.GetName()</Badge>
                }
                <Divider DividerType="DividerType.TextContent" Text="@TranslationText.Regions" />
                @foreach (var item in provider?.regions.OrderBy(o => o.GetName()).ToList() ?? new List<Region>())
                {
                    <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.GetName()</Badge>
                }
                <Divider DividerType="DividerType.TextContent" Text="@TranslationText.DeliveryModel" />
                @foreach (var item in provider?.models ?? new List<DeliveryModel>())
                {
                    <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd" title="@item.GetDescription()" Style="cursor: help;">
                        @item.GetName() <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle"></Blazorise.Icon>
                    </Badge>
                }
                @if (provider?.models.Any(a => a == DeliveryModel.SVOD) ?? false)
                {
                    <Divider DividerType="DividerType.TextContent" Text="@TranslationText.Plans" />
                    @if (provider.plans.Any())
                    {
                        @foreach (var item in provider.plans)
                        {
                            <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.name: @item.price.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture(provider.head_language?.GetName(false)??""))</Badge>
                        }
                    }
                    else
                    {
                        <Badge Color="Color.Danger">@TranslationText.NotFound</Badge>
                    }
                }
            </TabPanel>
            <TabPanel Name="Catalog" Class="mt-3">
                <MediaList TitleHead="@TranslationText.Popular" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(provider?.id, "popularity.desc")" MaxItens="50" ShowFilter="true"></MediaList>
                <MediaList TitleHead="@TranslationText.Release" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(provider?.id, "primary_release_date.desc")" MaxItens="50" ShowFilter="true" ShowOnlyYear="false"></MediaList>
                <MediaList TitleHead="@TranslationText.TopRated" MediaListApi="TmdbDiscoveryApi" StringParameters="@GetExtraParameters(provider?.id, "vote_average.desc")" MaxItens="50" ShowFilter="true"></MediaList>
            </TabPanel>
        </Content>
    </Tabs>
</ModalBody>
<ModalFooter>
    @if (myProviders?.Items.Any(a => a.id == provider?.id) ?? false)
    {
        <Button Color="Color.Danger" Clicked="Remove" Disabled="!ComponenteUtils.IsAuthenticated">
            <Blazorise.Icon Name="FontAwesomeIcons.Heart"></Blazorise.Icon> @GlobalTranslations.ButtonRemove
        </Button>
    }
    else
    {
        <Button Color="Color.Primary" Clicked="Add" Disabled="!ComponenteUtils.IsAuthenticated">
            <Blazorise.Icon Name="FontAwesomeIcons.Heart"></Blazorise.Icon> @GlobalTranslations.ButtonAdd
        </Button>
    }
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide">@TranslationText.Close</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public ProviderModel? provider { get; set; }

    string selectedTab = "About";

    private MyProviders? myProviders { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (provider == null) throw new ArgumentNullException(nameof(provider));

    }

    protected override async Task LoadData()
    {
        try
        {
            myProviders = await MyProvidersApi.Get();

        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private Dictionary<string, string> GetExtraParameters(string? provider_id, string sort_by)
    {
        if (provider_id == null) throw new ArgumentNullException(nameof(provider_id));

        return new Dictionary<string, string>() { { "with_watch_providers", provider_id }, { "sort_by", sort_by } }; ;
    }

    private async Task Add()
    {
        try
        {
            if (myProviders == null)
            {
                myProviders = new MyProviders
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            if (provider != null) myProviders.Items.Add(new MyProvidersItem() { id = provider.id, name = provider.name, logo = provider.logo_path });

            await MyProvidersApi.Post(myProviders);

            await Toast.Success("Provedor favoritado com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove()
    {
        try
        {
            if (myProviders == null)
            {
                myProviders = new MyProviders
                    {
                        DtInsert = DateTimeOffset.UtcNow
                    };
            }

            myProviders.Items.Remove(myProviders.Items.First(f => f.id == provider?.id));

            await MyProvidersApi.Post(myProviders);

            await Toast.Success("Provedor removido com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}