@using SD.WEB.Modules.Provider.Core;

@inherits ComponenteCore<ProviderComponent>

@inject AllProvidersApi AllProvidersApi

<HeaderComponent Title="@Provider.Resources.Translations.TitleProviders.Format(AppStateStatic.Region)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@OpenCompleteList" title="Show all providers">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<RenderControl Core="Core" Model="AllProviders" ExpressionEmpty="@((AllProviders? obj)=> obj == null || obj.Items.Empty())">
    <Row HorizontalGutter="4" VerticalGutter="4">
        @foreach (var item in GetFilteredProviders())
        {
            <Column ColumnSize="ColumnSize.Is3.OnMobile.Is2.OnDesktop">
                <Card>
                    <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Alt="@item.name"
                               onclick="@(() => ShowPopupProvider(item))" Style="cursor: pointer;" title="@item.name"></CardImage>
                </Card>
                @*@if (string.IsNullOrEmpty(item.link))
            {
            <p class="m-0" style="color: red">link</p>
            }
            @if (string.IsNullOrEmpty(item.description))
            {
            <p class="m-0" style="color: red">description</p>
            }
            @if (item.models.Empty())
            {
            <p class="m-0" style="color: red">model</p>
            }
            @if (item.models.Any(a => a == SD.Shared.Modal.Enum.DeliveryModel.SVOD) && item.plans.Empty())
            {
            <p class="m-0" style="color: red">plan</p>
            }*@
            </Column>
        }
    </Row>
</RenderControl>

@code {
    [Parameter][EditorRequired] public WatchedList? Watched { get; set; }
    [Parameter][EditorRequired] public WatchingList? Watching { get; set; }
    [Parameter][EditorRequired] public WishList? Wish { get; set; }
    [Parameter][EditorRequired] public bool ShowPrivateAction { get; set; }

    private RenderControlCore<AllProviders?>? Core { get; set; } = new();
    private AllProviders? AllProviders { get; set; }

    private int GetTotalItems => AppStateStatic.OnMobile ? 8 : 18;

    public IEnumerable<ProviderModel> GetFilteredProviders() => AllProviders?.Items.OrderBy(o => o.priority).Where(p =>
        p.regions.Any(a => a == AppStateStatic.Region))
        .Take(GetTotalItems) ?? Array.Empty<ProviderModel>();

    protected override async Task OnInitializedAsync()
    {
        throw new Exception("component sendo usado");

        AppStateStatic.RegionChanged += StateHasChanged;

        AllProviders = await AllProvidersApi.GetAll(Core);
    }

    private async Task OpenCompleteList()
    {
        await ModalService.CompleteListProvider(@Provider.Resources.Translations.TitleProviders.Format(AppStateStatic.Region), AllProviders, Watched, Watching, Wish, ShowPrivateAction);
    }

    private async Task ShowPopupProvider(ProviderModel item)
    {
        await ModalService.ProviderPopup(item, Watched, Watching, Wish, ShowPrivateAction);
    }
}