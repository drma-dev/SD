@using SD.WEB.Modules.Provider.Core;

@inherits ComponenteCore<ProviderComponent>

@inject AllProvidersApi AllProvidersApi

<HeaderComponent Title="@Provider.Resources.Translations.TitleProviders.Format(AppStateStatic.Region)">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@OpenCompleteList" title="Show all providers">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<Loading @ref="LoadingProvider">
    <Row HorizontalGutter="4" VerticalGutter="4">
        @foreach (var item in GetFilteredProviders())
        {
            <Column ColumnSize="ColumnSize.Is3.OnMobile.Is2.OnDesktop">
                <Card>
                    <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Alt="@item.name"
                           onclick="@(() => ShowPopupProvider(item))" Style="cursor: pointer;" title="@item.name"></CardImage>
                </Card>
                @*@if (string.IsNullOrEmpty(item.link))
            {
            <p class="m-0" style="color: red">link</p>
            }
            @if (string.IsNullOrEmpty(item.description))
            {
            <p class="m-0" style="color: red">description</p>
            }
            @if (!item.models.Any())
            {
            <p class="m-0" style="color: red">model</p>
            }
            @if (item.models.Any(a => a == SD.Shared.Modal.Enum.DeliveryModel.SVOD) && !item.plans.Any())
            {
            <p class="m-0" style="color: red">plan</p>
            }*@
            </Column>
        }
    </Row>
</Loading>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    private AllProviders? AllProviders { get; set; }
    public Loading? LoadingProvider { get; set; }

    public IEnumerable<ProviderModel> GetFilteredProviders() => AllProviders?.Items.OrderBy(o => o.priority).Where(p =>
        p.regions.Any(a => a == AppStateStatic.Region))
        .Take(GetTotalItems) ?? Array.Empty<ProviderModel>();

    protected override async Task OnInitializedAsync()
    {
        AppStateStatic.RegionChanged += ChangeRegion;

        await base.OnInitializedAsync();
    }

    private int GetTotalItems => AppStateStatic.OnMobile ? 8 : 18;

    private async void ChangeRegion()
    {
        LoadingProvider?.Start();

        await Task.Delay(1); //TODO: for some reason, changing the media type is not updating the post image (probably because of the lazyload css class)
        StateHasChanged(); //reload title

        LoadingProvider?.Finish(AllProviders == null);
    }

    protected override async Task LoadData()
    {
        LoadingProvider?.Start();

        AllProviders = await AllProvidersApi.GetAll();

        LoadingProvider?.Finish(AllProviders == null);
    }

    private async Task OpenCompleteList()
    {
        await ModalService.Show<Modules.Suggestions.Components.CompleteListProvider>(@Provider.Resources.Translations.TitleProviders.Format(AppStateStatic.Region),
        x =>
        {
            x.Add(x => x.CardHeader, @Provider.Resources.Translations.TitleProviders.Format(AppStateStatic.Region));
            x.Add(x => x.AllProviders, AllProviders);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }

    private async Task ShowPopupProvider(ProviderModel item)
    {
        await ModalService.Show<Provider.Components.ProviderPopup>(item.name,
        x =>
        {
            x.Add(x => x.provider, item);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }
}