@page "/suggestions/berlin"
<SeoHeader Title="Suggestions | Berlin" Keywords="@(new []{"Berlin"})" Url="/suggestions/berlin"></SeoHeader>
@inherits PageCore<Emmys>

@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Suggestions.Core
@using SD.WEB.Modules.Suggestions.Components
@inject TmdbListApi TmdbListApi
@inject WatchedListApi WatchedListApi
@inject WatchingListApi WatchingListApi
@inject WishListApi WishListApi

<HeadPage Title="Berlin International Film Festival" ImageSource="logo/berlin.png" Text="The Berlinale is a unique place of artistic exploration and entertainment. It is one of the largest public film festivals in the world, attracting tens of thousands of visitors from around the globe each year."
          Link="https://www.berlinale.de/" IsAuthenticated="IsAuthenticated"></HeadPage>

@*https://www.imdb.com/event/ev0000091/2023/1*@
<MediaList MediaListApi="TmdbListApi" List="@EnumLists.BerlinBestFilm" MaxItens="13" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
           ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>
<MediaList MediaListApi="TmdbListApi" List="@EnumLists.BerlinBestShortFilm" MaxItens="13" Watched="WatchedList" Watching="WatchingList" Wish="WishList"
           ShowPrivateAction="true" IsAuthenticated="IsAuthenticated"></MediaList>

@code {
    public WatchedList? WatchedList { get; set; }
    public WatchingList? WatchingList { get; set; }
    public WishList? WishList { get; set; }

    protected override void OnInitialized()
    {
        WatchedListApi.DataChanged += (WatchedList? model) => { WatchedList = model; StateHasChanged(); };
        WatchingListApi.DataChanged += (WatchingList? model) => { WatchingList = model; StateHasChanged(); };
        WishListApi.DataChanged += (WishList? model) => { WishList = model; StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        WatchedList = await WatchedListApi.Get(IsAuthenticated, null);
        WatchingList = await WatchingListApi.Get(IsAuthenticated, null);
        WishList = await WishListApi.Get(IsAuthenticated, null);
    }
}