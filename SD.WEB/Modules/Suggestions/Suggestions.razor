@page "/Suggestions"
<SeoHeader Title="@SeoTranslations.SuggestionsTitle" Description="@SeoTranslations.SuggestionsDescription" Url="/Suggestions"></SeoHeader>
@inherits PageNoDataCore<Suggestions>

<Alert Visible="true" Color="Color.Secondary">
    <AlertMessage>@Resources.Translations.TitleAwards</AlertMessage>
</Alert>
<Row HorizontalGutter="4" VerticalGutter="4">
    @foreach (var item in Awards)
    {
        <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is4.OnMobile" TextAlignment="TextAlignment.Center">
            <Card Class="p-1" Border="Border.Secondary" Background="Background.Light">
                <Blazorise.Link To="@item.link" Target="Target.Self" Title="@item.name">
                    <CardImage Source="@(item.logo_path)" Alt="@item.name" Style="cursor: pointer;"></CardImage>
                </Blazorise.Link>
                <CardBody Padding="Padding.Is1" Style="min-height: 46.4px">
                    <CardTitle Size="6" Margin="Margin.Is0">@item.name</CardTitle>
                </CardBody>
            </Card>
        </Column>
    }
</Row>

<Alert Visible="true" Color="Color.Secondary" Margin="Margin.Is2.FromTop">
    <AlertMessage>@Resources.Translations.TitleSpecializedSites</AlertMessage>
</Alert>
<Row HorizontalGutter="4" VerticalGutter="4">
    @foreach (var item in Sites)
    {
        <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is4.OnMobile" TextAlignment="TextAlignment.Center">
            <Card Class="p-1" Border="Border.Secondary" Background="Background.Light">
                <Blazorise.Link To="@item.link" Target="Target.Self" Title="@item.name">
                    <CardImage Source="@(item.logo_path)" Alt="@item.name" Style="cursor: pointer;"></CardImage>
                </Blazorise.Link>
                <CardBody Padding="Padding.Is1" Style="min-height: 46.4px">
                    <CardTitle Size="6" Margin="Margin.Is0">@item.name</CardTitle>
                </CardBody>
            </Card>
        </Column>
    }
</Row>

@code {
    private List<Item> Awards { get; set; } = new();
    private List<Item> Sites { get; set; } = new();

    public class Item
    {
        public string? name { get; set; }
        public string? logo_path { get; set; }
        public string? link { get; set; }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Awards.Add(new Item() { name = "Oscar", logo_path = "logo/oscar.png", link = "/Suggestions/Oscar" });
        Awards.Add(new Item() { name = "Golden Globe", logo_path = "logo/goldenglobes.png", link = "/Suggestions/GoldenGlobes" });
        Awards.Add(new Item() { name = "Emmys", logo_path = "logo/emmys.png", link = "/Suggestions/Emmys" });
        Awards.Add(new Item() { name = "Bafta", logo_path = "logo/bafta.png", link = "/Suggestions/Bafta" });
        Awards.Add(new Item() { name = "FI Spirit", logo_path = "logo/spirit.png", link = "/Suggestions/Spirit" });
        Awards.Add(new Item() { name = "Critics Choice", logo_path = "logo/critics.png", link = "/Suggestions/CriticsChoice" });
        Awards.Add(new Item() { name = "Festival de Cannes", logo_path = "logo/festival-cannes.png", link = "/Suggestions/FestivalCannes" });

        Sites.Add(new Item() { name = "IMDB", logo_path = "logo/imdb.png", link = "/Suggestions/Imdb" });
        Sites.Add(new Item() { name = "TMDB", logo_path = "logo/tmdb.png", link = "/Suggestions/Tmdb" });
        Sites.Add(new Item() { name = "Hollywood Reporter", logo_path = "logo/HollywoodReporter.png", link = "/Suggestions/HollywoodReporter" });
        Sites.Add(new Item() { name = "Rotten Tomatoes", logo_path = "logo/RottenTomatoes.png", link = "/Suggestions/RottenTomatoes" });
        Sites.Add(new Item() { name = "Metacritic", logo_path = "logo/metacritic.png", link = "/Suggestions/Metacritic" });
        Sites.Add(new Item() { name = "Empire", logo_path = "logo/empire.png", link = "/Suggestions/Empire" });
        Sites.Add(new Item() { name = "Rolling Stone", logo_path = "logo/rollingstone.png", link = "/Suggestions/RollingStone" });
    }
}