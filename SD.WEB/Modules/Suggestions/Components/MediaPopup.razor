@using SD.Shared.Model.List.Tmdb
@using SD.Shared.Models;
@using SD.Shared.Models.List.Imdb;
@using SD.Shared.Models.List.Tmdb;
@using SD.WEB.Modules.Suggestions.Core;
@using SD.WEB.Modules.Profile.Core
@using SD.WEB.Modules.Provider.Core
@inherits ComponenteCore<MediaPopup>
@inject AllProvidersApi AllProvidersApi
@inject TmdbApi TmdbApi
@inject ImdbApi ImdbApi
@inject CacheApi CacheApi
@inject ExternalIdApi ExternalIdApi
@inject TmdbCreditApi TmdbCreditApi

<ModalHeader>
    <ModalTitle>@media?.title</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <Loading @ref="LoadingList">
        <Row HorizontalGutter="8" VerticalGutter="8">
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is4.OnDesktop">
                @if (string.IsNullOrEmpty(media?.poster_large))
                {
                    <CardImage Source="noimage.png" Alt="@media?.title"></CardImage>
                }
                else
                {
                    <Div Style="position:relative;">
                        @if (@media?.release_date < DateTime.Now.AddMonths(-3))
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="position: absolute; top: 5px; left: 5px;">@media?.release_date?.Year</Badge>
                        }
                        else
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Style="position: absolute; top: 5px; left: 5px;">@media?.release_date?.ToShortDateString()</Badge>
                        }
                        <Image Source="@media?.poster_large" Text="@media?.title" Style="width: 100%;"></Image>
                    </Div>
                }
            </Column>
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is8.OnDesktop">
                <Tabs @bind-SelectedTab="@selectedTab" Pills="true" FullWidth="true" Justified="true">
                    <Items>
                        <Tab Name="About">@GlobalTranslations.TabAbout</Tab>
                        <Tab Name="Streaming">@GlobalTranslations.TabStreaming.Format(@AppStateStatic.Region.GetName(false))</Tab>
                        <Tab Name="Credits">@GlobalTranslations.TabCredits</Tab>
                        @if (media?.Collection.Any() ?? false)
                        {
                            <Tab Name="Collection">@GlobalTranslations.TabCollection</Tab>
                        }
                    </Items>
                    <Content>
                        <TabPanel Name="About" Class="mt-2">
                            <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd.Is1.FromBottom">@media?.runtime.FormatRuntime()</Badge>
                            @foreach (var item in media?.Genres ?? new List<string>())
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd.Is1.FromBottom">@item</Badge>
                            }

                            <Paragraph>
                                @if (!string.IsNullOrEmpty(Ratings?.imDb))
                                {
                                    <Badge Color="GetColorByRating(Ratings?.imDb)" Margin="Margin.Is1.FromEnd">IMDB: @Ratings?.imDb</Badge>
                                }
                                @if (media?.rating != null && media?.rating != 0)
                                {
                                    <Badge Color="GetColorByRating(media?.rating.ToString())" Margin="Margin.Is1.FromEnd">TMDB: @media?.rating.ToString("#.#")</Badge>
                                }
                                @if (!string.IsNullOrEmpty(Ratings?.metacritic))
                                {
                                    <Badge Color="GetColorByRating(Ratings?.metacritic)" Margin="Margin.Is1.FromEnd">Metacritic: @Ratings?.metacritic</Badge>
                                }
                                @if (!string.IsNullOrEmpty(Ratings?.rottenTomatoes))
                                {
                                    <Badge Color="GetColorByRating(Ratings?.rottenTomatoes)" Margin="Margin.Is1.FromEnd">Rotten Tomatoes: @Ratings?.rottenTomatoes</Badge>
                                }
                                @if (!string.IsNullOrEmpty(Ratings?.filmAffinity))
                                {
                                    <Badge Color="GetColorByRating(Ratings?.filmAffinity)" Margin="Margin.Is1.FromEnd">Filme Affinity: @Ratings?.filmAffinity</Badge>
                                }
                            </Paragraph>

                            <Paragraph TextAlignment="TextAlignment.Justified">
                                @media?.plot
                            </Paragraph>
                            @if (media != null && media.Videos.Any())
                            {
                                <Row HorizontalGutter="4" VerticalGutter="4">
                                    <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                        <Button Color="Color.Dark" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">Trailers</Button>
                                    </Column>
                                    @foreach (var item in media.Videos)
                                    {
                                        <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                            <Button Type="ButtonType.Link" To="@("https://www.youtube.com/watch?v=" + item.key)" Target="Target.Blank" Color="Color.Light"
                                            Padding="Padding.Is1" title="@item.name" Block="true">
                                                <Blazorise.Icon Name="FontAwesomeIcons.Video"></Blazorise.Icon>
                                            </Button>
                                        </Column>
                                    }
                                </Row>
                            }
                            @{
                                var link = Providers?.GetLink(AppStateStatic.Region);
                                if (string.IsNullOrEmpty(link))
                                {
                                    link = Providers?.GetLink(Region.US);
                                }
                                @if (!string.IsNullOrEmpty(link))
                                {
                                    var uri_link = new Uri(link);
                                    var fomatted_link = "https://" + uri_link.Host + string.Join("", uri_link.Segments.SkipLast(1));
                                    <Row Margin="Margin.Is2.FromTop">
                                        <Column>
                                            <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is0.FromBottom" Visible="true">
                                                @GlobalTranslations.MoreInformation: <a href="@fomatted_link" target="_blank" rel="noopener">@(uri_link.Host) <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon></a>
                                            </Alert>
                                        </Column>
                                    </Row>
                                }
                            }
                        </TabPanel>
                        <TabPanel Name="Streaming" Class="mt-2">
                            @{
                                var hasProvider = false;

                                if (Providers?.GetFreeListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelFree</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetFreeListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.FREE))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetAdsListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelAds</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetAdsListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.AVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetFlatRateListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Success" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelFlatRate</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetFlatRateListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.SVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetFlatRateBuyListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Warning" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelFlatRateBuy</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetFlatRateBuyListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.PVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetRentListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Primary" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelRent</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetRentListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.TVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }
                                if (Providers?.GetBuyListProviders(AppStateStatic.Region).Any() ?? false)
                                {
                                    hasProvider = true;
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        <Column ColumnSize="ColumnSize.Is4.OnMobile.Is2.OnWidescreen">
                                            <Button Color="Color.Danger" Size="Size.Small" Block="true" Style="height: 100%" Disabled="true">@GlobalTranslations.DeliveryModelBuy</Button>
                                        </Column>
                                        @foreach (var item in Providers.GetBuyListProviders(AppStateStatic.Region))
                                        {
                                            @if (AllProviders?.Items.Any(a => a.id == item.provider_id.ToString()) ?? false) //sometimes a link from an excluded provider appears
                                            {
                                                <Column ColumnSize="ColumnSize.Is2.OnMobile.Is1.OnWidescreen">
                                                    <Button Target="Target.Blank" Color="Color.Light" Padding="Padding.Is0" title="@item.provider_name">
                                                        <Image Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Text="@item.provider_name" Style="width: 100%"></Image>
                                                        @if (!AllProviders.Items.Single(s => s.id == item.provider_id.ToString()).models.Any(a => a == DeliveryModel.TVOD))
                                                        {
                                                            <span>false</span>
                                                        }
                                                    </Button>
                                                </Column>
                                            }
                                        }
                                    </Row>
                                }

                                if (hasProvider)
                                {
                                    <Row Margin="Margin.Is3.FromTop">
                                        <Column>
                                            <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is0.FromBottom" Visible="true">
                                                @GlobalTranslations.Offering: <a href="https://www.justwatch.com/" target="_blank" rel="noopener">@(new Uri("https://www.justwatch.com/").Host) <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon></a>
                                            </Alert>
                                        </Column>
                                    </Row>
                                }
                                else
                                {
                                    <Alert Color="Color.Info" Padding="Padding.Is1" Margin="Margin.Is0.FromBottom" Visible="true">
                                        @GlobalTranslations.TitleNotAvailable
                                    </Alert>
                                }
                            }
                        </TabPanel>
                        <TabPanel Name="Credits" Class="mt-2">
                            @if (type == MediaType.movie)
                            {
                                var directors = Credits?.crew.Where(w => w.job == "Director").ToList() ?? new List<Crew>();
                                if (directors.Any())
                                {
                                    <Divider DividerType="DividerType.TextContent" Text="@GlobalTranslations.Directing" />
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        @foreach (var item in directors)
                                        {
                                            <Column ColumnSize="ColumnSize.Is2">
                                                <Blazorise.Link Clicked="@(async() => await OpenCompleteList(item))" Style="cursor: pointer;">
                                                    @if (string.IsNullOrEmpty(item.profile_path))
                                                    {
                                                        <Image Source="no-user.png" Text="@item.original_name" Style="width: 100%"></Image>
                                                    }
                                                    else
                                                    {
                                                        <Image Source="@(TmdbOptions.FacePath + item.profile_path)" Text="@item.original_name" Style="width: 100%"></Image>
                                                    }
                                                </Blazorise.Link>
                                            </Column>
                                            <Column ColumnSize="ColumnSize.Is4">
                                                <Paragraph Margin="Margin.Is0.FromBottom" TextWeight="TextWeight.Bold">@item.original_name</Paragraph>
                                                <Paragraph Margin="Margin.Is0.FromBottom">@item.job</Paragraph>
                                            </Column>
                                        }
                                    </Row>
                                }
                                var writers = Credits?.crew.Where(w => w.job == "Writer" || w.job == "Screenplay" || w.job == "Author" || w.job == "Story").ToList() ?? new List<Crew>();
                                if (writers.Any())
                                {
                                    <Divider DividerType="DividerType.TextContent" Text="@GlobalTranslations.Writing" />
                                    <Row HorizontalGutter="4" VerticalGutter="4">
                                        @foreach (var item in writers)
                                        {
                                            <Column ColumnSize="ColumnSize.Is2">
                                                <Blazorise.Link Clicked="@(async() => await OpenCompleteList(item))" Style="cursor: pointer;">
                                                    @if (string.IsNullOrEmpty(item.profile_path))
                                                    {
                                                        <Image Source="no-user.png" Text="@item.original_name" Style="width: 100%"></Image>
                                                    }
                                                    else
                                                    {
                                                        <Image Source="@(TmdbOptions.FacePath + item.profile_path)" Text="@item.original_name" Style="width: 100%"></Image>
                                                    }
                                                </Blazorise.Link>
                                            </Column>
                                            <Column ColumnSize="ColumnSize.Is4">
                                                <Paragraph Margin="Margin.Is0.FromBottom" TextWeight="TextWeight.Bold">@item.original_name</Paragraph>
                                                <Paragraph Margin="Margin.Is0.FromBottom">@item.job</Paragraph>
                                            </Column>
                                        }
                                    </Row>
                                }
                            }
                            <Divider DividerType="DividerType.TextContent" Text="@GlobalTranslations.Cast" />
                            <Row HorizontalGutter="4" VerticalGutter="4">
                                @foreach (var item in Credits?.cast.OrderBy(o => o.order).Take(24) ?? new List<Cast>())
                                {
                                    <Column ColumnSize="ColumnSize.Is2">
                                        <Blazorise.Link Clicked="@(async() => await OpenCompleteList(item))" Style="cursor: pointer;">
                                            @if (string.IsNullOrEmpty(item.profile_path))
                                            {
                                                <Image Source="no-user.png" Text="@item.original_name" Style="width: 100%"></Image>
                                            }
                                            else
                                            {
                                                <Image Source="@(TmdbOptions.FacePath + item.profile_path)" Text="@item.original_name" Style="width: 100%"></Image>
                                            }
                                        </Blazorise.Link>
                                    </Column>
                                    <Column ColumnSize="ColumnSize.Is4">
                                        <Paragraph Margin="Margin.Is0.FromBottom" TextWeight="TextWeight.Bold">@item.original_name</Paragraph>
                                        <Paragraph Margin="Margin.Is0.FromBottom">@item.character</Paragraph>
                                    </Column>
                                }
                            </Row>
                        </TabPanel>
                        @if (media?.Collection.Any() ?? false)
                        {
                            <TabPanel Name="Collection" Class="mt-2">
                                <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is1.FromBottom">
                                    @foreach (var item in media.Collection.OrderBy(o => o.release_date ?? DateTime.MaxValue))
                                    {
                                        <Column ColumnSize="ColumnSize.Is6.OnMobile.Is4.OnWidescreen.Is3.OnFullHD">
                                            <Card>
                                                <Blazorise.Link Clicked="@(async() => await CollectionClicked(item))" Style="position: relative;">
                                                    @if (item.release_date.HasValue)
                                                    {
                                                        if (item.release_date.Value < DateTime.Now.AddMonths(-3))
                                                        {
                                                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date.Value.Year</Badge>
                                                        }
                                                        else
                                                        {
                                                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date.Value.ToShortDateString()</Badge>
                                                        }
                                                    }
                                                    @if (string.IsNullOrEmpty(item.poster_small))
                                                    {
                                                        <CardImage data-src="noimage.png" class="lazyload" Alt="@item.title" title="@item.title" Style="cursor: pointer;"></CardImage>
                                                    }
                                                    else
                                                    {
                                                        if (type == MediaType.movie) //you don't put seasons as wishes
                                                        {
                                                            var wishedMovie = AppState.WishList?.Contains(MediaType.movie, item.id) ?? false;
                                                            if (wishedMovie)
                                                            {
                                                                <Blazorise.Icon Name="FontAwesomeIcons.Bookmark" IconSize="IconSize.x2" TextColor="TextColor.Light"
                                                            Style="position: absolute; bottom: 5px; left: 5px; z-index: 1;"></Blazorise.Icon>
                                                            }
                                                        }

                                                        var movieWatched = AppState.WatchedList?.Contains(MediaType.movie, item.id) ?? false;
                                                        var showWatched = AppState.WatchingList?.GetWatchedItems(MediaType.tv, media.tmdb_id).Any(a => a == item.id) ?? false;
                                                        if (movieWatched | showWatched)
                                                        {
                                                            <Blazorise.Icon Name="FontAwesomeIcons.Eye" IconSize="IconSize.x2" TextColor="TextColor.Light"
                                                            Style="position: absolute; bottom: 2px; right: 5px; z-index: 1;"></Blazorise.Icon>
                                                        }

                                                        <CardImage data-src="@item.poster_small" class="lazyload" Alt="@item.title" title="@item.title" Style=@($"cursor: pointer;")></CardImage>
                                                    }
                                                </Blazorise.Link>

                                                <CardBody Class="py-1">
                                                    @item.title
                                                </CardBody>
                                            </Card>
                                        </Column>
                                    }
                                </Row>
                            </TabPanel>
                        }
                    </Content>
                </Tabs>
            </Column>
        </Row>
    </Loading>
</ModalBody>
<ModalFooter>
    <Container Fluid="true" Margin="Margin.Is0" Padding="Padding.Is0.OnX">
        <Row HorizontalGutter="4" VerticalGutter="4">
            <Column VerticalAlignment="VerticalAlignment.Middle">
                @if (!string.IsNullOrEmpty(media?.homepage))
                {
                    <a href="@media.homepage" target="_blank" rel="noopener" style="float: left;">@(new Uri(media.homepage).Host) <Blazorise.Icon Name="FontAwesomeIcons.ExternalLinkAlt"></Blazorise.Icon></a>
                }
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (AppState.WishList?.Movies.Any(a => a.id == tmdb_id) ?? false)
                {
                    <Button Color="Color.Danger" Clicked="Remove" Margin="Margin.Is2.FromEnd" Disabled="!IsUserAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> @GlobalTranslations.ButtonRemove
                    </Button>
                }
                else if (AppState.WishList?.Shows.Any(a => a.id == tmdb_id) ?? false)
                {
                    <Button Color="Color.Danger" Clicked="Remove" Margin="Margin.Is2.FromEnd" Disabled="!IsUserAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> @GlobalTranslations.ButtonRemove
                    </Button>
                }
                else
                {
                    <Button Color="Color.Primary" Clicked="Add" Margin="Margin.Is2.FromEnd" Disabled="!IsUserAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> @GlobalTranslations.ButtonAdd
                    </Button>
                }
                @if (AppState.WatchedList?.Movies.Any(a => a == tmdb_id) ?? false)
                {
                    <Button Color="Color.Danger" Clicked="NotWatched" Margin="Margin.Is2.FromEnd" Disabled="!IsUserAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon> @GlobalTranslations.ButtonNotWatched
                    </Button>
                }
                else if (AppState.WatchedList?.Shows.Any(a => a == tmdb_id) ?? false)
                {
                    <Button Color="Color.Danger" Clicked="NotWatched" Margin="Margin.Is2.FromEnd" Disabled="!IsUserAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon> @GlobalTranslations.ButtonNotWatched
                    </Button>
                }
                else
                {
                    <Button Color="Color.Primary" Clicked="Watched" Margin="Margin.Is2.FromEnd" Disabled="!IsUserAuthenticated">
                        <Blazorise.Icon Name="FontAwesomeIcons.Eye"></Blazorise.Icon> @GlobalTranslations.ButtonWatched
                    </Button>
                }
                @*<Button Color="Color.Secondary" Clicked="@Atualizar" Disabled="false">Atualizar</Button>*@
                <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End">@GlobalTranslations.ButtonClose</Button>
            </Column>
        </Row>
    </Container>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public string? tmdb_id { get; set; }
    [Parameter] public MediaType? type { get; set; }

    public Loading? LoadingList { get; set; }

    private MediaDetail? media { get; set; }
    private MediaProviders? Providers { get; set; }
    private Ratings? Ratings { get; set; }
    private AllProviders? AllProviders { get; set; }
    private Credits? Credits { get; set; }

    public bool IsUserAuthenticated { get; set; }
    string selectedTab = "About";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(tmdb_id)) throw new ArgumentNullException(nameof(tmdb_id));
        if (type == null) throw new ArgumentNullException(nameof(type));

        AppState.WishListChanged += StateHasChanged;
        AppState.WatchedListChanged += StateHasChanged;

        IsUserAuthenticated = await AppState.IsUserAuthenticated();

        await base.OnInitializedAsync();
    }

    protected override async Task LoadData()
    {
        LoadingList?.Start();

        media = await TmdbApi.GetMediaDetail(tmdb_id, type);
        Providers = await TmdbApi.GetWatchProvidersList(tmdb_id, type);
        AllProviders = await AllProvidersApi.GetAll();

        var imdb_id = await ExternalIdApi.GetImdbId(type, tmdb_id);
        if (!string.IsNullOrEmpty(imdb_id))
        {
            var cache = await CacheApi.GetRatings(imdb_id);
            if (cache == null)
            {
                Ratings = await ImdbApi.GetRatings(imdb_id);
                if (Ratings != null && string.IsNullOrEmpty(Ratings.errorMessage))
                {
                    if (!media.release_date.HasValue)
                    {
                        await CacheApi.AddRatings(new RatingsCache($"rating_{imdb_id}", Ratings, ttlCache.one_day), imdb_id);
                    }
                    else if (media.release_date.Value > DateTime.Now.AddMonths(-1))
                    {
                        await CacheApi.AddRatings(new RatingsCache($"rating_{imdb_id}", Ratings, ttlCache.one_week), imdb_id);
                    }
                    else if (media.release_date.Value > DateTime.Now.AddMonths(-6))
                    {
                        await CacheApi.AddRatings(new RatingsCache($"rating_{imdb_id}", Ratings, ttlCache.one_month), imdb_id);
                    }
                    else
                    {
                        await CacheApi.AddRatings(new RatingsCache($"rating_{imdb_id}", Ratings, ttlCache.one_year), imdb_id);
                    }
                }
            }
            else
            {
                Ratings = (Ratings?)cache?.Data;
            }
        }

        Credits = await TmdbCreditApi.GetList(type, tmdb_id);

        StateHasChanged();
        LoadingList?.Finish(media == null);
    }

    private Color GetColorByRating(string? rating)
    {
        if (string.IsNullOrEmpty(rating)) return Color.Secondary;

        var val = double.Parse(rating);

        if (val > 10) val = val / 10;

        if (val >= 8)
        {
            return Color.Success;
        }
        else if (val >= 6)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Danger;
        }
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }

    private async Task CollectionClicked(Collection? item)
    {
        if (type == MediaType.movie)
            await OpenPopupMedia(item, type);
        else
            await OpenPopupSeason(item);
    }

    private async Task Atualizar()
    {
        if (Providers == null) return;

        foreach (var item in Providers.GetFreeListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.FREE;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetAdsListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.AVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetFlatRateListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.SVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetBuyListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.TVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetRentListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.TVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        foreach (var item in Providers.GetFlatRateBuyListProviders(AppStateStatic.Region))
        {
            var provider = AllProviders?.Items.SingleOrDefault(s => s.id == item.provider_id.ToString());

            var model = DeliveryModel.PVOD;

            if (provider != null && !provider.models.Contains(model))
            {
                provider.models.Add(model);

                provider.models = provider.models.OrderBy(o => o).ToList();
            }
        }

        await AllProvidersApi.Post(AllProviders);
    }

    private async Task Add()
    {
        if (media == null) throw new ArgumentNullException(nameof(media));

        try
        {
            var list = AppState.WishList ?? new WishList();

            var item = new WishListItem(media.tmdb_id, media.title, media.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), media.runtime);

            list = await WishListApi.Add(media.MediaType, item);

            AppState.ChangeWishList(list);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove()
    {
        if (media == null) throw new ArgumentNullException(nameof(media));

        try
        {
            var list = AppState.WishList ?? new WishList();

            list = await WishListApi.Remove(media.MediaType, media.tmdb_id);

            AppState.ChangeWishList(list);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Watched()
    {
        if (media == null) throw new ArgumentNullException(nameof(media));

        try
        {
            var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

            if (hasCollection)
            {
                var watching = AppState.WatchingList ?? new WatchingList();
                var collectionId = media.MediaType == MediaType.movie ? media.collectionId?.ToString() : media.tmdb_id;

                await ModalService.Show<SelectItemsCollection>(null,
                    x =>
                    {
                        x.Add(x => x.ItemsCollection, media.Collection);
                        x.Add(x => x.SelectedItems, watching.GetWatchedItems(media.MediaType, collectionId));
                        x.Add(x => x.SelectedItemsChanged,
                            new EventCallbackFactory().Create(this, async (HashSet<string> list) => await SelectedItemsChanged(media, list, media.Collection.Count)));
                    },
                    new ModalInstanceOptions()
                        {
                            UseModalStructure = false,
                            Centered = true,
                            Size = ModalSize.Default,
                        });
            }
            else
            {
                var watched = AppState.WatchedList ?? new WatchedList();

                watched = await WatchedListApi.Add(media.MediaType, media.tmdb_id);

                AppState.ChangeWatchedList(watched);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task SelectedItemsChanged(MediaDetail media, HashSet<string> items, int collectionItemsCount)
    {
        //watched list

        var watched = AppState.WatchedList ?? new WatchedList();

        if (media.MediaType == MediaType.movie)
        {
            watched = await WatchedListApi.Add(MediaType.movie, string.Join(',', items));
        }
        else
        {
            watched = await WatchedListApi.Add(MediaType.tv, media.tmdb_id);
        }

        AppState.ChangeWatchedList(watched);

        //watching list

        var watching = AppState.WatchingList ?? new WatchingList();

        if (items.Count < collectionItemsCount)
        {
            WatchingListItem item;

            if (media.MediaType == MediaType.movie)
            {
                item = new WatchingListItem(media?.collectionId?.ToString(), media?.collectionName, media?.collectionLogo?.Replace(TmdbOptions.SmallPosterPath, ""), collectionItemsCount, items);
            }
            else
            {
                item = new WatchingListItem(media?.tmdb_id, media?.title, media?.poster_small?.Replace(TmdbOptions.SmallPosterPath, ""), collectionItemsCount, items);
            }

            watching = await WatchingListApi.Add(type, item);
        }
        else
        {
            if (media.MediaType == MediaType.movie)
            {
                watching = await WatchingListApi.Remove(media?.MediaType, media?.collectionId?.ToString());
            }
            else
            {
                watching = await WatchingListApi.Remove(media?.MediaType, media?.tmdb_id);
            }
        }

        AppState.ChangeWatchingList(watching);
    }

    private async Task NotWatched()
    {
        if (media == null) throw new ArgumentNullException(nameof(media));

        try
        {
            //watched

            var watched = AppState.WatchedList ?? new WatchedList();

            watched = await WatchedListApi.Remove(media.MediaType, media.tmdb_id);

            AppState.ChangeWatchedList(watched);

            //watching

            var hasCollection = media.Collection.Any() && media.Collection.Count > 1;

            if (hasCollection)
            {
                var watching = AppState.WatchingList ?? new WatchingList();

                if (media.MediaType == MediaType.movie)
                {
                    watching = await WatchingListApi.Remove(media.MediaType, media.collectionId?.ToString(), media.tmdb_id);
                }
                else if (media.MediaType == MediaType.tv)
                {
                    watching = await WatchingListApi.Remove(media.MediaType, media.tmdb_id);
                }

                AppState.ChangeWatchingList(watching);
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenPopupMedia(Collection? collection, MediaType? mediaType)
    {
        await ModalService.Show<MediaPopup>(collection?.title,
            x =>
            {
                x.Add(x => x.tmdb_id, collection?.id?.ToString());
                x.Add(x => x.type, mediaType);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    private async Task OpenPopupSeason(Collection? collection)
    {
        await ModalService.Show<SeasonPopup>(null,
            x =>
            {
                x.Add(x => x.ShowTitle, media?.title);
                x.Add(x => x.ShowSeasonName, collection?.title);
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.season_number, collection?.SeasonNumber);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    private async Task OpenCompleteList(Crew crew)
    {
        try
        {
            var result = await TmdbCreditApi.GetListByPerson(crew.id.ToString());
            var items = new HashSet<MediaDetail>();

            foreach (var item in result?.crew.Where(w => w.job == crew.job) ?? Enumerable.Empty<CrewByPerson>())
            {
                var type = item.media_type == "tv" ? MediaType.tv : MediaType.movie;
                items.Add(new MediaDetail
                    {
                        tmdb_id = item.id.ToString(),
                        title = type == MediaType.movie ? item.title : item.name,
                        plot = string.IsNullOrEmpty(item.overview) ? "No plot found" : item.overview,
                        release_date = type == MediaType.movie ? item.release_date?.GetDate() : item.first_air_date?.GetDate(),
                        poster_small = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.SmallPosterPath + item.poster_path,
                        poster_large = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.LargePosterPath + item.poster_path,
                        rating = item.vote_count > 10 ? item.vote_average ?? 0 : 0,
                        MediaType = type
                    });
            }

            await ModalService.Show<CompleteListPopup>(null,
                x =>
                {
                    x.Add(x => x.TitleHead, $"{crew.original_name} ({crew.job})");
                    x.Add(x => x.Items, items.OrderByDescending(o => o.release_date).ToHashSet());
                },
                new ModalInstanceOptions()
                    {
                        UseModalStructure = false,
                        Centered = true,
                        Size = ModalSize.ExtraLarge,
                    });
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OpenCompleteList(Cast cast)
    {
        try
        {
            var result = await TmdbCreditApi.GetListByPerson(cast.id.ToString());
            var items = new HashSet<MediaDetail>();

            foreach (var item in result?.cast ?? new List<CastByPerson>())
            {
                var type = item.media_type == "tv" ? MediaType.tv : MediaType.movie;

                if (type == MediaType.movie && item.order > 24) continue;
                if (type == MediaType.tv && item.episode_count < 3) continue;

                items.Add(new MediaDetail
                    {
                        tmdb_id = item.id.ToString(),
                        title = type == MediaType.movie ? item.title : item.name,
                        plot = string.IsNullOrEmpty(item.overview) ? "No plot found" : item.overview,
                        release_date = type == MediaType.movie ? item.release_date?.GetDate() : item.first_air_date?.GetDate(),
                        poster_small = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.SmallPosterPath + item.poster_path,
                        poster_large = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.LargePosterPath + item.poster_path,
                        rating = item.vote_count > 10 ? item.vote_average ?? 0 : 0,
                        MediaType = type,
                        comments = type == MediaType.tv ? $"{item.episode_count} episodes" : ""
                    });
            }

            await ModalService.Show<CompleteListPopup>(null,
                x =>
                {
                    x.Add(x => x.TitleHead, $"{cast.original_name}");
                    x.Add(x => x.Items, items.OrderByDescending(o => o.release_date).ToHashSet());
                },
                new ModalInstanceOptions()
                    {
                        UseModalStructure = false,
                        Centered = true,
                        Size = ModalSize.ExtraLarge,
                    });
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}