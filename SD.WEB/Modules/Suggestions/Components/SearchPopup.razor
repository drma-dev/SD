@using SD.WEB.Modules.Suggestions.Core;
@inherits ComponenteCore<SearchPopup>

@inject TmdbSearchApi TmdbSearch

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">
        @TitleHead
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <RenderControl Core="Core" Model="Items" ExpressionEmpty="@((HashSet<MediaDetail> list) => list.Empty())">
        <MediaListFull @ref="MediaListFull" MediaListApi="TmdbSearch" StringParameters="@StringParameters" Items="Items" MaxItens="100" ShowHead="false" Private="Private"
                       WatchedList="WatchedList" WatchingList="WatchingList" WishList="WishList"></MediaListFull>
    </RenderControl>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End" Size="Size.Small">
        @TranslationText.Close
    </Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter][EditorRequired] public bool Private { get; set; }
    [Parameter][EditorRequired] public WatchedList? WatchedList { get; set; }
    [Parameter][EditorRequired] public WatchingList? WatchingList { get; set; }
    [Parameter][EditorRequired] public WishList? WishList { get; set; }

    [Parameter] public string? TitleHead { get; set; }
    [Parameter] public HashSet<MediaDetail> Items { get; set; } = new();
    [Parameter] public string? Search { get; set; }

    public RenderControlCore<HashSet<MediaDetail>> Core { get; set; } = new();
    private MediaListFull? MediaListFull;
    private Dictionary<string, string> StringParameters => new Dictionary<string, string>() { { "query", Search ?? "" } };

    protected override async Task LoadDataRender()
    {
        Core?.LoadingStarted?.Invoke();
        var result = await TmdbSearch.GetList(Items, null, StringParameters);
        Items = result.list;
        Core?.LoadingFinished?.Invoke(Items);
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }
}
