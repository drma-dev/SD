@using SD.WEB.Modules.Suggestions.Core
@using SD.Shared.Models
@using SD.WEB.Modules.Suggestions.Interface;
@using SD.WEB.Modules.Profile.Core
@inherits ComponenteCore<CompleteListPopup>
@inject ExternalIdApi ExternalIdApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@GetTitle</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <MediaListFull Items="Items" IsIMDB="IsIMDB" MaxItens="MaxItens" MediaListApi="MediaListApi" TypeSelected="TypeSelected"
                   StringParameters="StringParameters" List="List" TitleHead="@TitleHead" ShowHead="false"></MediaListFull>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End" Size="Size.Small">@TranslationText.Close</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public string? TitleHead { get; set; }
    [Parameter] public IMediaListApi? MediaListApi { get; set; }
    [Parameter] public HashSet<MediaDetail> Items { get; set; } = new();
    [Parameter] public EnumLists? List { get; set; }
    [Parameter] public int MaxItens { get; set; } = 10;
    [Parameter] public bool IsIMDB { get; set; } = false;
    [Parameter] public MediaType? TypeSelected { get; set; }
    [Parameter] public Dictionary<string, string> StringParameters { get; set; } = new();

    private string? GetTitle => List != null ? List.GetName() : TitleHead;

    protected override void OnInitialized()
    {
        if (List == null && string.IsNullOrEmpty(TitleHead)) throw new ArgumentNullException(nameof(TitleHead));
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }
}
