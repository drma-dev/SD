@using SD.WEB.Modules.Profile.Core;
@inherits ComponenteCore<HeadPage>

@inject MyProvidersApi MyProvidersApi
@inject IJSRuntime JS

<Alert Color="Color.Info" Visible="true" Padding="Padding.Is2">
    <AlertDescription>
        <Row HorizontalGutter="8" VerticalGutter="8">
            <Column ColumnSize="ColumnSize.IsAuto">
                <Image Source="@ImageSource" Style="height: 60px;"></Image>
            </Column>
            <Column Style="@($"max-width: calc(100% - {(163)}px);")">
                <MediaQuery Media="@Breakpoints.XSmallDown">
                    <Matched>
                        <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom">
                            @if (string.IsNullOrEmpty(Link))
                            {
                                @Title
                            }
                            else
                            {
                                <Div>@Title</Div>
                                <a href="@Link.HideExternalLink()" target="_blank" rel="nofollow">@(new Uri(Link ?? "").Host)</a>
                            }
                        </Paragraph>
                    </Matched>
                    <Unmatched>
                        <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom">
                            @if (string.IsNullOrEmpty(Link))
                            {
                                @Title
                            }
                            else
                            {
                                @($"{Title} ▪ ")

                                <a href="@Link.HideExternalLink()" target="_blank" rel="nofollow">@(new Uri(Link ?? "").Host)</a>
                            }
                        </Paragraph>
                        <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is0.FromBottom">
                            @Text
                        </Paragraph>
                    </Unmatched>
                </MediaQuery>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="@(()=>Share(Navigation.Uri))" Size="Size.Small" Style="display: block; width: 100%;" Class="mb-1">
                    <Blazorise.Icon Name="FontAwesomeIcons.Share"></Blazorise.Icon> Share
                </Button>
                @if (provider != null)
                {
                    <RenderControl PartialComponent="true" PrivateContent="true" Core="Core" Model="myProviders"
                                   ExpressionEmpty="@((MyProviders? obj) => obj == null || obj.Items.Empty())">
                        @if (myProviders?.Items.Any(a => a.id == provider?.id) ?? false)
                        {
                            <Button Color="Color.Danger" Clicked="Remove" Size="Size.Small" Disabled="!IsAuthenticated" Style="display: block; width: 100%;">
                                <Blazorise.Icon Name="FontAwesomeIcons.Star"></Blazorise.Icon> @GlobalTranslations.ButtonRemove
                            </Button>
                        }
                        else
                        {
                            <Button Color="Color.Primary" Clicked="Add" Size="Size.Small" Disabled="!IsAuthenticated" Style="display: block; width: 100%;">
                                <Blazorise.Icon Name="FontAwesomeIcons.Star"></Blazorise.Icon> @GlobalTranslations.ButtonAdd
                            </Button>
                        }
                    </RenderControl>
                }
            </Column>
        </Row>
        @if (provider != null)
        {
            <Row HorizontalGutter="8" VerticalGutter="8">
                <Column>
                    <Badge Color="Color.Primary" Margin="Margin.Is1.FromEnd">
                        @TranslationText.DeliveryModel:
                    </Badge>
                    @foreach (var item in provider?.models ?? new List<DeliveryModel>())
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd" title="@item.GetDescription()" Style="cursor: help;">
                            @item.GetName() <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle"></Blazorise.Icon>
                        </Badge>
                    }
                    @if (provider?.models.Any(a => a == DeliveryModel.SVOD) ?? false)
                    {
                        <Badge Color="Color.Primary" Margin="Margin.Is1.FromEnd">
                            @TranslationText.Plans:
                        </Badge>
                        @if (provider.plans.Any())
                        {
                            @foreach (var item in provider.plans)
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item.name: @item.price.ToString("C")</Badge>
                            }
                        }
                        else
                        {
                            <Badge Color="Color.Danger">@TranslationText.NotFound</Badge>
                        }
                    }
                </Column>
            </Row>
        }
    </AlertDescription>
</Alert>

@code {
    [Parameter] public string? ImageSource { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? Link { get; set; }

    [Parameter] public ProviderModel? provider { get; set; }

    public RenderControlCore<MyProviders?>? Core { get; set; } = new();
    [Parameter] public MyProviders? myProviders { get; set; }

    protected override async Task LoadDataRender()
    {
        myProviders = await MyProvidersApi.Get(IsAuthenticated, Core);
    }

    private async Task Add()
    {
        try
        {
            myProviders ??= new();

            var item = new MyProvidersItem() { id = provider?.id, name = provider?.name, logo = provider?.logo_path };
            var client = await PrincipalApi.Get(true);
            myProviders = await MyProvidersApi.Add(myProviders, item, client?.ClientePaddle);

            await Toast.Success("Provedor favoritado com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Remove()
    {
        try
        {
            myProviders ??= new();

            myProviders = await MyProvidersApi.Remove(myProviders.Items.First(f => f.id == provider?.id));

            await Toast.Success("Provedor removido com sucesso!");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Share(string? link)
    {
        await JS.InvokeVoidAsync("share", link);
    }
}