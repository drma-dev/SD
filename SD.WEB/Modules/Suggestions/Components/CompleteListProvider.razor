@inherits ComponenteCore<CompleteListProvider>

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@CardHeader</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody MaxHeight="70">
        <Row HorizontalGutter="4" VerticalGutter="4">
            @foreach (var item in GetFilteredProviders())
        {
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                <Card>
                    <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo_path)" Alt="@item.name"
                               onclick="@(() => ShowPopupProvider(item))" Style="cursor: pointer;" title="@item.name"></CardImage>
                </Card>
                @*@if (string.IsNullOrEmpty(item.link))
            {
            <p class="m-0" style="color: red">link</p>
            }
            @if (string.IsNullOrEmpty(item.description))
            {
            <p class="m-0" style="color: red">description</p>
            }
            @if (item.models.Empty())
            {
            <p class="m-0" style="color: red">model</p>
            }
            @if (item.models.Any(a => a == SD.Shared.Modal.Enum.DeliveryModel.SVOD) && item.plans.Empty())
            {
            <p class="m-0" style="color: red">plan</p>
            }*@
            </Column>
        }
    </Row>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End" Size="Size.Small">
        @TranslationText.Close
    </Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter][EditorRequired] public WatchedList? WatchedList { get; set; }
    [Parameter][EditorRequired] public WishList? WishList { get; set; }

    [Parameter] public string? CardHeader { get; set; }
    [Parameter] public AllProviders? AllProviders { get; set; }

    public IEnumerable<ProviderModel> GetFilteredProviders() => AllProviders?.Items.OrderBy(o => o.priority).Where(p =>
        p.regions.Any(a => a == AppStateStatic.Region)) ?? Array.Empty<ProviderModel>();

    public async Task HideModal()
    {
        await ModalService.Hide();
    }

    private async Task ShowPopupProvider(ProviderModel item)
    {
        await ModalService.Show<Provider.Components.ProviderPopup>(item.name,
        x =>
        {
            x.Add(x => x.provider, item);
            x.Add(x => x.WatchedList, WatchedList);
            x.Add(x => x.WishList, WishList);
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }
}
