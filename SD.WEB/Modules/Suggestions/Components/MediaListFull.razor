@inherits ComponenteCore<MediaListFull>
@using SD.WEB.Modules.Suggestions.Core
@using SD.Shared.Models
@using SD.WEB.Modules.Suggestions.Interface;
@using SD.WEB.Modules.Profile.Core

@inject ExternalIdApi ExternalIdApi

@if (ShowHead)
{
    <Alert Visible="true" Color="Color.Secondary">
        <AlertMessage>@GetTitle</AlertMessage>
    </Alert>
}
<Loading @ref="LoadingList">
    <Row HorizontalGutter="4" VerticalGutter="4">
        @for (int i = 1; i <= Items.Count; i++)
        {
            var item = Items.ElementAt(i - 1);
            <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
                <Card>
                    <Blazorise.Link Clicked="@(() => OpenPopupMedia(item))" Style="position: relative;">
                        @if (@item.release_date < DateTime.Now.AddDays(-30))
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date?.Year</Badge>
                        }
                        else
                        {
                            <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px; z-index: 1;">@item.release_date?.ToShortDateString()</Badge>
                        }
                        @if (item.rating >= 8)
                        {
                            <Badge Color="Color.Success" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                        }
                        else if (item.rating >= 6)
                        {
                            <Badge Color="Color.Warning" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                        }
                        else if (item.rating > 0)
                        {
                            <Badge Color="Color.Danger" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px; z-index: 1;">@item.rating</Badge>
                        }
                        @if (string.IsNullOrEmpty(item.poster_small))
                        {
                            <CardImage Source="nopicture.jpg" Alt="@item.title" title="@item.title" Style="cursor: pointer;"></CardImage>

                            <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 115px;">
                                @item.title
                            </Div>
                        }
                        else
                        {
                            var watchedMovie = AppState.WatchedList?.Movies.Any(a => a == item.tmdb_id & MediaType.movie == item.MediaType) ?? false;
                            var watchedShow = AppState.WatchedList?.Shows.Any(a => a == item.tmdb_id & MediaType.tv == item.MediaType) ?? false;
                            if (watchedMovie | watchedShow)
                            {
                                <Blazorise.Icon Name="FontAwesomeIcons.Eye" IconSize="IconSize.x4"
                                    Style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0.8;"></Blazorise.Icon>
                            }
                            var wishedMovie = AppState.WishList?.Movies.Any(a => a.id == item.tmdb_id & MediaType.movie == item.MediaType) ?? false;
                            var wishedShow = AppState.WishList?.Shows.Any(a => a.id == item.tmdb_id & MediaType.tv == item.MediaType) ?? false;
                            if (wishedMovie | wishedShow)
                            {
                                <Blazorise.Icon Name="FontAwesomeIcons.Bookmark" IconSize="IconSize.x2" TextColor="TextColor.Light"
                                    Style="position: absolute; bottom: 3px; right: 3px; opacity: 0.8;"></Blazorise.Icon>
                            }
                            <CardImage Source="@(item.poster_small)" Alt="@item.title" title="@item.title" Style=@($"cursor: pointer; {(watchedMovie | watchedShow?"opacity: 0.5":"")}")></CardImage>
                        }
                    </Blazorise.Link>
                    @if (!string.IsNullOrEmpty(item.comments))
                    {
                        <CardBody Padding="Padding.Is1">
                            @foreach (var item in item.comments.Split(","))
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item</Badge>
                            }
                        </CardBody>
                    }
                </Card>
            </Column>
            if ((i % GetTotalItems) == 0)
            {
                <div class="w-100"></div>
            }
        }
        @for (int i = 1; i <= (GetTotalItems - Items.Count % GetTotalItems); i++)
        {
            <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
            </Column>
        }
    </Row>
</Loading>
<Div TextAlignment="TextAlignment.Center">
    <Button Color="Color.Secondary" Margin="Margin.Is2" Clicked="LoadMore" Disabled="@(Items.Count>=MaxItens|DisableLoadMore)">Carregar mais</Button>
</Div>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public bool ShowHead { get; set; } = true;
    [Parameter] public string? TitleHead { get; set; }
    [Parameter] public HashSet<MediaDetail> Items { get; set; } = new();
    [Parameter] public bool IsIMDB { get; set; } = false;
    [Parameter] public int MaxItens { get; set; } = 10;
    [Parameter] public IMediaListApi? MediaListApi { get; set; }
    [Parameter] public MediaType? TypeSelected { get; set; }
    [Parameter] public Dictionary<string, string> StringParameters { get; set; } = new();
    [Parameter] public EnumLists? List { get; set; }

    public Loading? LoadingList { get; set; }

    private string? GetTitle => List != null ? List.GetName() : TitleHead;
    private string GetCustomStyle => "col-xl col-md-2 col-4";
    private int GetTotalItems => AppStateStatic.OnFullHD ? 10 : 6;
    public bool DisableLoadMore { get; set; } = false;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (MediaListApi == null) throw new ArgumentNullException(nameof(MediaListApi));
            //if (!string.IsNullOrEmpty(list_id) && !NextPage.HasDelegate) throw new ArgumentNullException(nameof(NextPage));
            //if (NextPage.HasDelegate && string.IsNullOrEmpty(list_id)) throw new ArgumentNullException(nameof(list_id));
            if (MaxItens == 0) throw new ArgumentNullException(nameof(MaxItens));

            AppState.WishListChanged += StateHasChanged;
            AppState.WatchedListChanged += StateHasChanged;

            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    protected override async Task LoadData()
    {
        await LoadItems(TypeSelected);
    }

    private async Task LoadItems(MediaType? type)
    {
        LoadingList?.Start();
        if (MediaListApi != null)
        {
            var result = await MediaListApi.GetList(new(), TypeSelected, StringParameters, List, 1);
            await Task.Delay(1); //TODO: for some reason, changing the media type is not updating the post image (probably because of the lazyload css class)
            Items = result.list;

            if (Items.Count < 10) //force reload, if the filters bring few records
            {
                var result2 = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, ++currentPage);
                foreach (var item in result2.list)
                {
                    Items.Add(item);
                }
            }
        }
        LoadingList?.Finish(!Items.Any());
    }

    private async Task OpenPopupMedia(MediaDetail? media)
    {
        var tmdb_id = "";

        if (IsIMDB && media?.MediaType == MediaType.tv) //for now, only tv series (imdb) need this kind of workaround
        {
            tmdb_id = await ExternalIdApi.GetTmdbId(media?.tmdb_id);
        }
        else
        {
            tmdb_id = media?.tmdb_id;
        }

        await ModalService.Show<MediaPopup>(media?.title,
            x =>
            {
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, media?.MediaType);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    private async Task LoadMore()
    {
        if (MediaListApi != null)
        {
            var result = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, ++currentPage);
            Items = result.list;
            DisableLoadMore = result.lastPage;
        }
    }
}