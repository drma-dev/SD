@inherits ComponenteCore<MediaListFull>
@using SD.Shared.Models.List.Tmdb;
@using SD.WEB.Modules.Suggestions.Core
@using SD.Shared.Models
@using SD.WEB.Modules.Suggestions.Interface;
@using SD.WEB.Modules.Profile.Core

@inject ExternalIdApi ExternalIdApi
@inject TmdbCreditApi TmdbCreditApi

@if (ShowHead)
{
    <HeaderComponent Title="@GetTitle"></HeaderComponent>
}
<Loading @ref="LoadingList">
    <Row HorizontalGutter="4" VerticalGutter="4">
        @for (int i = 1; i <= Items.Count; i++)
        {
            var item = Items.ElementAt(i - 1);
            <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
                <Card>
                    <PosterComponent Date="@item.release_date" Rating="@item.rating" Poster="@item.poster_small" Title="@item.title" Comments="@item.comments"
                                     TmdbId="@item.tmdb_id" MediaType="@item.MediaType" Clicked="@(() => OpenPopupMedia(item))"></PosterComponent>
                </Card>
            </Column>
            if ((i % GetTotalItems) == 0)
            {
                <div class="w-100"></div>
            }
        }
        @for (int i = 1; i <= (GetTotalItems - Items.Count % GetTotalItems); i++)
        {
            <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
            </Column>
        }
    </Row>
</Loading>
@if (MediaListApi != null)
{
    <Div TextAlignment="TextAlignment.Center">
        <Button Color="Color.Secondary" Margin="Margin.Is2" Clicked="LoadMore" Disabled="@(Items.Count>=MaxItens|DisableLoadMore)">@GlobalTranslations.ButtonLoadMore</Button>
    </Div>
}

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public bool ShowHead { get; set; } = true;
    [Parameter] public string? TitleHead { get; set; }
    [Parameter] public HashSet<MediaDetail> Items { get; set; } = new();
    [Parameter] public bool IsIMDB { get; set; } = false;
    [Parameter] public int MaxItens { get; set; } = 10;
    [Parameter] public IMediaListApi? MediaListApi { get; set; }
    [Parameter] public MediaType? TypeSelected { get; set; }
    [Parameter] public Dictionary<string, string> StringParameters { get; set; } = new();
    [Parameter] public EnumLists? List { get; set; }

    public Loading? LoadingList { get; set; }

    private string? GetTitle => List != null ? List.GetName() : TitleHead;
    private string GetCustomStyle => "col-xl col-md-2 col-4";
    private int GetTotalItems => AppStateStatic.OnFullHD ? 10 : 6;
    public bool DisableLoadMore { get; set; } = false;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //if (MediaListApi == null) throw new ArgumentNullException(nameof(MediaListApi));
            //if (!string.IsNullOrEmpty(list_id) && !NextPage.HasDelegate) throw new ArgumentNullException(nameof(NextPage));
            //if (NextPage.HasDelegate && string.IsNullOrEmpty(list_id)) throw new ArgumentNullException(nameof(list_id));
            if (MaxItens == 0) throw new ArgumentNullException(nameof(MaxItens));

            AppState.WishListChanged += StateHasChanged;
            AppState.WatchedListChanged += StateHasChanged;

            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    protected override async Task LoadData()
    {
        await LoadItems(TypeSelected);
    }

    private async Task LoadItems(MediaType? type)
    {
        LoadingList?.Start();
        if (MediaListApi != null)
        {
            var result = await MediaListApi.GetList(new(), TypeSelected, StringParameters, List, 1);
            await Task.Delay(1); //TODO: for some reason, changing the media type is not updating the post image (probably because of the lazyload css class)

            Items = result.list;

            if (Items.Count < 10) //force reload, if the filters bring few records
            {
                var result2 = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, ++currentPage);
                foreach (var item in result2.list)
                {
                    Items.Add(item);
                }
            }
        }
        LoadingList?.Finish(!Items.Any());
    }

    private async Task OpenPopupMedia(MediaDetail? media)
    {
        var tmdb_id = "";

        if (IsIMDB && media?.MediaType == MediaType.tv) //for now, only tv series (imdb) need this kind of workaround
        {
            tmdb_id = await ExternalIdApi.GetTmdbId(media?.tmdb_id);
        }
        else
        {
            tmdb_id = media?.tmdb_id;
        }

        if (media?.MediaType == MediaType.person)
        {
            var result = await TmdbCreditApi.GetListByPerson(tmdb_id);
            var items = new HashSet<MediaDetail>();

            foreach (var item in result?.crew ?? Enumerable.Empty<CrewByPerson>())
            {
                var type = item.media_type == "tv" ? MediaType.tv : MediaType.movie;
                items.Add(new MediaDetail
                    {
                        tmdb_id = item.id.ToString(),
                        title = type == MediaType.movie ? item.title : item.name,
                        plot = string.IsNullOrEmpty(item.overview) ? "No plot found" : item.overview,
                        release_date = type == MediaType.movie ? item.release_date?.GetDate() : item.first_air_date?.GetDate(),
                        poster_small = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.SmallPosterPath + item.poster_path,
                        poster_large = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.LargePosterPath + item.poster_path,
                        rating = item.vote_count > 10 ? item.vote_average ?? 0 : 0,
                        MediaType = type
                    });
            }
            foreach (var item in result?.cast ?? new List<CastByPerson>())
            {
                var type = item.media_type == "tv" ? MediaType.tv : MediaType.movie;

                if (type == MediaType.movie && item.order > 24) continue;
                if (type == MediaType.tv && item.episode_count < 3) continue;

                items.Add(new MediaDetail
                    {
                        tmdb_id = item.id.ToString(),
                        title = type == MediaType.movie ? item.title : item.name,
                        plot = string.IsNullOrEmpty(item.overview) ? "No plot found" : item.overview,
                        release_date = type == MediaType.movie ? item.release_date?.GetDate() : item.first_air_date?.GetDate(),
                        poster_small = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.SmallPosterPath + item.poster_path,
                        poster_large = string.IsNullOrEmpty(item.poster_path) ? null : TmdbOptions.LargePosterPath + item.poster_path,
                        rating = item.vote_count > 10 ? item.vote_average ?? 0 : 0,
                        MediaType = type,
                        comments = type == MediaType.tv ? $"{item.episode_count} episodes" : ""
                    });
            }

            await ModalService.Show<CompleteListPopup>(null,
                x =>
                {
                    x.Add(x => x.TitleHead, $"{media?.title}");
                    x.Add(x => x.Items, items.OrderByDescending(o => o.release_date).ToHashSet());
                },
                new ModalInstanceOptions()
                    {
                        UseModalStructure = false,
                        Centered = true,
                        Size = ModalSize.ExtraLarge,
                    });
        }
        else
        {
            await ModalService.Show<MediaPopup>(media?.title,
            x =>
            {
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, media?.MediaType);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
        }
    }

    private async Task LoadMore()
    {
        if (MediaListApi != null)
        {
            var result = await MediaListApi.GetList(Items, TypeSelected, StringParameters, List, ++currentPage);
            Items = result.list;
            DisableLoadMore = result.lastPage;
        }
    }
}