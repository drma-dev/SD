@using SD.Shared.Models.Reviews;
@using SD.WEB.Modules.Suggestions.Core;

@inherits ComponenteCore<ReviewComponent>

@inject ExternalIdApi ExternalIdApi
@inject CacheMetaCriticApi CacheMetaCriticApi

<RenderControl Core="Core" Model="Model" ExpressionEmpty="@((ReviewModel? obj)=> obj == null || obj.Items.Empty())">
    <ListGroup Flush>
        @foreach (var item in Model?.Items ?? new())
        {
            <ListGroupItem Padding="Padding.Is2">
                <Heading Size="HeadingSize.Is6" Margin="Margin.Is1.FromBottom">
                    <Badge Color="GetColorByRating(item?.score)" Margin="Margin.Is2.FromEnd">@item?.score</Badge> @(item?.reviewSite + (string.IsNullOrEmpty(item?.reviewer) ? "" : " | " + item?.reviewer))
                </Heading>
                <Small TextAlignment="TextAlignment.Justified">@item.quote</Small>
                <Blazorise.Link To="@item.reviewUrl" Target="Target.Blank" Style="font-size: 80%;">Read full review</Blazorise.Link>
            </ListGroupItem>
        }
    </ListGroup>
</RenderControl>

@code {
    [Parameter] public string? imdb_id { get; set; }
    [Parameter] public string? title { get; set; }
    [Parameter] public string? original_title { get; set; }
    [Parameter] public DateTime? release_date { get; set; }
    [Parameter] public MediaType? type { get; set; }

    public RenderControlCore<ReviewModel?> Core { get; set; } = new();
    public ReviewModel? Model { get; set; }

    protected override async Task LoadDataRender()
    {
        if (!string.IsNullOrEmpty(imdb_id))
        {
            //TODO: must be english_title, not original_title
            if (type == MediaType.movie)
            {
                Model = await CacheMetaCriticApi.GetMovieReviews(imdb_id, original_title, release_date, Core);
            }
            else
            {
                Model = await CacheMetaCriticApi.GetShowReviews(imdb_id, original_title, release_date, Core);
            }
        }
    }

    private Color GetColorByRating(int? val)
    {
        if (!val.HasValue) return Color.Secondary;

        if (val > 10) val = val / 10;

        if (val >= 8)
        {
            return Color.Success;
        }
        else if (val >= 6)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Danger;
        }
    }
}
