@using SD.Shared.Models.List.Tmdb;
@using SD.WEB.Modules.Suggestions.Core;
@inherits ComponenteCore<SeasonPopup>
@inject TmdbApi TmdbApi

<ModalHeader>
    <ModalTitle>@ShowTitle (@ShowSeasonName)</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <Loading @ref="Loading">
        <ListGroup Flush>
            @foreach (var item in Season?.episodes ?? new())
            {
                <ListGroupItem Padding="Padding.Is2">
                    <Row VerticalGutter="8" HorizontalGutter="8">
                        <Column ColumnSize="ColumnSize.Is3">
                            @if (string.IsNullOrEmpty(item.still_path))
                            {
                                <CardImage data-src="noimage.png" class="lazyload" Alt="@item.name" title="@item.name" Style="height: 100px;"></CardImage>
                            }
                            else
                            {
                                <CardImage Source="@(TmdbOptions.SmallPosterPath +  item.still_path)" Alt="@item.name"></CardImage>
                            }
                        </Column>
                        <Column>
                            <Heading Size="HeadingSize.Is6" Margin="Margin.Is1.FromBottom">@(item.episode_number + " - " + item.name)</Heading>
                            <Small TextAlignment="TextAlignment.Justified">@item.overview</Small>
                        </Column>
                    </Row>
                </ListGroupItem>
            }
        </ListGroup>
    </Loading>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End">@GlobalTranslations.ButtonClose</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public string? ShowTitle { get; set; }
    [Parameter] public string? ShowSeasonName { get; set; }
    [Parameter] public string? tmdb_id { get; set; }
    [Parameter] public int? season_number { get; set; }

    public Loading? Loading { get; set; }
    public TmdbSeason? Season { get; set; }

    protected override async Task LoadData()
    {
        Loading?.Start();

        var parameters = new Dictionary<string, string>()
            {
                { "api_key", TmdbOptions.ApiKey },
                { "language", AppStateStatic.Language.GetName(false) ?? "en-US" }
            };

        Season = await TmdbApi.GetSeason(tmdb_id, season_number, parameters);

        Loading?.Finish(Season == null);
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }
}
