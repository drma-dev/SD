@page "/profile/account"
<PageTitle>SD - Account</PageTitle>
@attribute [Authorize]
@inherits PageCore<Account>
@using System.Security.Claims
@using Microsoft.Extensions.Caching.Memory
@using SD.Shared.Models.Auth
@using SD.WEB.Modules.Auth.Core

@inject IMemoryCache cache

<Row HorizontalGutter="8" VerticalGutter="0">
    <Column ColumnSize="ColumnSize.Is6.OnWidescreen">
        <Card Margin="Margin.Is2.FromBottom">
            <CardHeader>Dados Cadastrais</CardHeader>
            <CardBody>
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldLabel>Provedor de Acesso</FieldLabel>
                        <TextEdit Text="@principal?.IdentityProvider" Disabled="true" />
                    </Field>
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldLabel>Identificação</FieldLabel>
                        <TextEdit Text="@principal?.UserDetails" Disabled="true" />
                    </Field>
                </Fields>
                <Fields>
                    <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldLabel>Email</FieldLabel>
                        <TextEdit Text="@principal?.Email" Disabled="true" />
                    </Field>
                </Fields>
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnWidescreen">
        <Card Margin="Margin.Is2.FromBottom">
            <CardHeader>Dados Cadastrais</CardHeader>
            <CardBody>
                <Button Color="Color.Primary" Clicked="async()=>{ await ClearCache(); }" Margin="Margin.Is1.FromEnd">
                    <Blazorise.Icon Name="FontAwesomeIcons.Eraser" /> Limpar Cache
                </Button>
                <Button Color="Color.Danger" Clicked="async()=>{ await DeleteAccount(principal?.IdentityProvider); }">
                    <Blazorise.Icon Name="FontAwesomeIcons.UserSlash" /> Deletar Conta
                </Button>
            </CardBody>
        </Card>
    </Column>
</Row>

@code {
    [Inject] IMessageService MessageService { get; set; } = default!;

    private ClientePrincipal? principal;

    protected override async Task LoadDataRender()
    {
        //TODO: twitter doesnt load email

        if (IsAuthenticated)
        {
            principal = await PrincipalApi.Get();

            if (principal == null) principal = new();

            if (User != null)
            {
                principal.UserId = UserId;
                principal.IdentityProvider = User.Identity?.AuthenticationType;
                principal.UserDetails = User.Identity?.Name;

                principal.UserRoles = User.Claims.Where(w => w.Type == ClaimTypes.Role).Select(s => s.Value).ToArray();
            }

            principal.Email = principal?.UserDetails;
        }
    }

    private async Task ClearCache()
    {
        ((MemoryCache)cache).Clear();

        await Toast.Success("Operação efetuada com sucesso!");
    }

    private async Task DeleteAccount(string? provider)
    {
        try
        {
            if (await MessageService.Confirm("Are you sure you want to delete your account? This action cannot be undone.", "Streaming Discovery", (opt) => { opt.ShowMessageIcon = false; }))
            {
                await PrincipalApi.Remove();

                // Navigation.NavigateTo("https://identity.azurestaticapps.net/.auth/purge/" + provider);

                Navigation.NavigateTo("/.auth/purge/" + provider);

                //await SignOutManager.SetSignOutState();

                await Toast.Success("Operação efetuada com sucesso!");
            }
            else
            {
                await Toast.Warning("Operação cancelada!");
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}