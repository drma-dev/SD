@using SD.Shared.Models.News;
@using System.Text.Json;
@inherits ComponenteCore<NewsPopup>

@inject CacheApi CacheApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@($"{GlobalTranslations.NewsTitle} - Rotten Tomatoes")</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <Loading @ref="LoadingNews">
        <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is1.FromBottom">
            @foreach (var item in News?.Items ?? new())
            {
                <Column ColumnSize="ColumnSize.Is6.OnMobile.Is4.OnWidescreen.Is3.OnFullHD">
                    <Card>
                        <CardImage Source="@item.url_img" Alt="@item.title">
                        </CardImage>
                        <CardBody>
                            <CardText Style="font-size: 0.8rem;">
                                @((MarkupString)item.title)
                            </CardText>
                            <Button Color="Color.Primary" Type="ButtonType.Link" To="@item.link" Target="Target.Blank" Size="Size.Small" Class="mt-2">@GlobalTranslations.ButtonReadMore</Button>
                        </CardBody>
                    </Card>
                </Column>
            }
        </Row>
    </Loading>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">@TranslationText.Close</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    public Loading? LoadingNews { get; set; }
    private NewsModel? News { get; set; }
    public string? selectedSlide { get; set; }

    protected override async Task LoadData()
    {
        LoadingNews?.Start();

        var cache = await CacheApi.GetNews("full");

        News = (NewsModel?)cache.Data;

        LoadingNews?.Finish(News == null);
    }
}