@using SD.Shared.Models.News;
@inherits ComponenteCore<NewsComponent>

@inject CacheApi CacheApi

<HeaderComponent Title="@($"{GlobalTranslations.NewsTitle} - {Language.enUS.GetName()}")">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Secondary" Clicked="@OpenCompleteList" title="Show all news">
        <Blazorise.Icon Name="FontAwesomeIcons.ExpandArrowsAlt"></Blazorise.Icon>
    </Button>
</HeaderComponent>
<Loading @ref="LoadingNews">
    <Carousel @bind-SelectedSlide="@selectedSlide">
        @foreach (var item in News?.data?.newsStories.Take(15) ?? Enumerable.Empty<NewsStory>())
        {
            <CarouselSlide Name="@item.id">
                <div style="position: absolute; top: 0px; left: 0px; background-color: lime; opacity: 80%;" class="px-1 m-2">
                    @((MarkupString)item.title)
                </div>
                <Blazorise.Link To="@item?.link" Target="Target.Blank" Title="@item?.title">
                    <Image data-src="@item?.mainImage?.url" class="lazyload" title="@item?.title" Text="@item?.title" Display="Display.Block" Width="Width.Is100" />
                </Blazorise.Link>
            </CarouselSlide>
        }
    </Carousel>
</Loading>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    public Loading? LoadingNews { get; set; }
    private Flixster? News { get; set; }
    public string? selectedSlide { get; set; }

    protected override async Task LoadData()
    {
        LoadingNews?.Start();

        var cache = await CacheApi.GetNews();

        News = (Flixster?)cache?.Data;

        LoadingNews?.Finish(News == null);
    }

    private async Task OpenCompleteList()
    {
        await ModalService.Show<NewsPopup>(null,
        x =>
        {
            //
        },
        new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Centered = true,
                Size = ModalSize.ExtraLarge,
            });
    }
}