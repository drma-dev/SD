@page "/administrator"
@using SD.Shared.Models.Support
@using SD.WEB.Modules.Administrator.Components
@using SD.WEB.Modules.Auth.Core
@using Blazorise.DataGrid
@using SD.WEB.Modules.Support.Core
@using StrongGrid.Models.Webhooks
@inherits PageCore<Index>
@attribute [Authorize(Roles = "administrator")]

@inject AdministratorApi AdministratorApi
@inject UpdateApi UpdateApi

<Tabs RenderMode="TabsRenderMode.LazyLoad" @bind-SelectedTab="@Tab" Pills="true" FullWidth="true">
    <Items>
        <Tab Name="Emails">Emails</Tab>
        <Tab Name="Updates">Updates</Tab>
    </Items>
    <Content>
        <TabPanel Name="Emails" Padding="Padding.Is3.FromTop">
            <DataGrid TItem="EmailDocument" Data="@Emails" @bind-SelectedRow="@Email" Responsive="true" ShowPager="true">
                <DataGridColumns>
                    <DataGridColumn Field="@nameof(EmailDocument.FromEmail)" Caption="From" />
                    <DataGridColumn Field="@nameof(EmailDocument.ToEmail)" Caption="To" />
                    <DataGridColumn Field="@nameof(EmailDocument.Subject)" Caption="Subject" />
                    <DataGridColumn Field="@nameof(EmailDocument.Date)" Caption="Date" />
                </DataGridColumns>
                <ButtonRowTemplate>
                    <Button Color="Color.Success" Clicked="@(async()=>await NewClick())">New</Button>
                    <Button Color="Color.Primary" Disabled="(Email is null)" Clicked="@(async()=>await ReadClick(context))">Read</Button>
                </ButtonRowTemplate>
            </DataGrid>           
        </TabPanel>
        <TabPanel Name="Updates" Padding="Padding.Is3.FromTop">
            <DataGrid TItem="UpdateModel" Data="@Updates" @bind-SelectedRow="@Update" Editable="true" Responsive="true" ShowPager="true"
                      RowInserted="RowInserted" RowUpdated="RowUpdated" RowRemoved="RowRemoved">
                <DataGridColumns>
                    <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false" CancelCommandAllowed>
                        <SaveCommandTemplate>
                            <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                        </SaveCommandTemplate>
                        <CancelCommandTemplate>
                            <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                        </CancelCommandTemplate>
                    </DataGridCommandColumn>
                    <DataGridColumn Field="@nameof(UpdateModel.Title)" Caption="Title" Editable="true" />
                    <DataGridColumn Field="@nameof(UpdateModel.Description)" Caption="Description" Editable="true" Displayable="false">
                        <EditTemplate>
                            <MemoEdit Rows="5" AutoSize="true" Text="@((string?)context.CellValue)" TextChanged="@(v => context.CellValue = v)" />
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(UpdateModel.Date)" Caption="Date" Editable="true" />
                </DataGridColumns>
                <ButtonRowTemplate>
                    <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
                    <Button Color="Color.Primary" Disabled="(Update is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
                    <Button Color="Color.Danger" Disabled="(Update is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
                    <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
                </ButtonRowTemplate>
            </DataGrid>
        </TabPanel>
    </Content>
</Tabs>

@code {
    public string? Tab { get; set; } = "Emails";

    List<EmailDocument>? Emails;
    EmailDocument? Email;

    HashSet<UpdateModel> Updates = [];
    UpdateModel? Update;

    DatePicker<DateTime?>? datePicker;
    DateTime? Date;

    protected override async Task LoadDataRender()
    {
        Emails = await AdministratorApi.GetEmails();
        Updates = await UpdateApi.Get(null);
    }

    private async Task NewClick()
    {
        await ModalService.OpenPopup<EmailPopup>(x => { x.Add(x => x.OnlyRead, false); }, ModalSize.Large);
    }

    private async Task ReadClick(ButtonRowContext<EmailDocument> row)
    {
        await ModalService.OpenPopup<EmailPopup>(x => { x.Add(x => x.EmailDocument, row.EditCommand.Item); }, ModalSize.Large);
    }

    private async Task RowInserted(SavedRowItem<UpdateModel, Dictionary<string, object>> e)
    {
        var model = e.NewItem;

        model.Initialize();

        await UpdateApi.Add(model);
    }

    private async Task RowUpdated(SavedRowItem<UpdateModel, Dictionary<string, object>> e)
    {
        await UpdateApi.Add(e.NewItem);
    }

    private async Task RowRemoved(UpdateModel model)
    {
        await UpdateApi.Delete(model);
    }
}
