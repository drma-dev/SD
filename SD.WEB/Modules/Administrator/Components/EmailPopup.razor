@using SD.Shared.Models.Support
@using SD.WEB.Modules.Auth.Core
@using StrongGrid.Models
@inherits ComponenteCore<EmailPopup>

@inject AdministratorApi AdministratorApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">
        @EmailDocument?.Subject
    </ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody MaxHeight="70">
    <MemoEdit @bind-Text="@EmailDocument.Text" Rows="10" ReadOnly="OnlyRead"  ></MemoEdit>
</ModalBody>
<ModalFooter>
    @if (!OnlyRead)
    {
        <Button Color="Color.Primary" Clicked="@SendHandle" Size="Size.Small">
            Send
        </Button>
    }
    else
    {
        <Button Color="Color.Primary" Clicked="@ReplyHandle" Size="Size.Small">
            Reply
        </Button>
    }
    <Button Color="Color.Secondary" Clicked="@ModalService.Hide" Size="Size.Small">
        @TranslationText.Close
    </Button>
</ModalFooter>

@code {
    [Parameter] public EmailDocument? EmailDocument { get; set; } = new();
    [Parameter] public bool OnlyRead { get; set; } = true;

    public async Task SendHandle()
    {
        try
        {
            var inbound = new SendEmail()
                {
                    Subject = $"RE {EmailDocument?.Subject}",
                    Text = EmailDocument?.Text,
                    FromName = EmailDocument?.To.FirstOrDefault()?.Name,
                    FromEmail = EmailDocument?.To.FirstOrDefault()?.Email,
                    ToName = EmailDocument?.From?.Name,
                    ToEmail = EmailDocument?.From?.Email
                };

            await AdministratorApi.SendEmail(inbound);

            await ModalService.Hide();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    public void ReplyHandle()
    {
        OnlyRead = false;
        if (EmailDocument != null) EmailDocument.Text = "\r\n\r\n" + EmailDocument.Text;
    }
}