@page "/"
@page "/Index"
@inherits ComponenteCore<Index>
@using SD.Shared.Model
@inject Settings Settings

<Alert Visible="true" Color="Color.Secondary">
    <AlertMessage><Blazorise.Icon Name="FontAwesomeIcons.Heart"></Blazorise.Icon> Provedores Favoritos (@(myProviders?.Items.Count ?? 0) itens)</AlertMessage>
</Alert>
<AuthorizeView>
    <Authorized>
        <CustomVisibility Loading="loading" NoData="(!myProviders?.Items.Any() ?? true)">
            <Row HorizontalGutter="4" VerticalGutter="4" Style="max-height: 215px; overflow: auto;">
                @foreach (var item in myProviders?.Items ?? new List<MyProvidersItem>())
                {
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                        <Card>
                            <CardImage Source="@(TmdbOptions.OriginalPosterPath + item.logo)" Alt="@item.name"
                                   onclick="@(()=>ShowProviderPopup(item))" Style="cursor: pointer;"></CardImage>
                        </Card>
                    </Column>
                }
            </Row>
        </CustomVisibility>
    </Authorized>
    <NotAuthorized>
        <Alert Visible="true" Color="Color.Primary">
            <AlertMessage><Blazorise.Icon Name="FontAwesomeIcons.ExclamationTriangle"></Blazorise.Icon> Realizar login para utilizar essa funcionalidade</AlertMessage>
        </Alert>
    </NotAuthorized>
</AuthorizeView>

<Alert Visible="true" Color="Color.Secondary" Margin="Margin.Is2.FromTop">
    <AlertMessage><Blazorise.Icon Name="FontAwesomeIcons.Bookmark"></Blazorise.Icon> Lista de Interesses (@(wishList?.Items.Count ?? 0) itens)</AlertMessage>
</Alert>
<AuthorizeView>
    <Authorized>
        <CustomVisibility Loading="loading" NoData="(!wishList?.Items.Any() ?? true)">
            <Row HorizontalGutter="4" VerticalGutter="4" Style="max-height: 310px; overflow: auto;">
                @foreach (var item in wishList?.Items ?? new List<WishListItem>())
                {
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                        <Card>
                            <CardImage Source="@(TmdbOptions.SmallPosterPath + item.logo)" Alt="@item.name"
                                   onclick="@(async()=>await ShowMediaPopup(item))" Style="cursor: pointer;"></CardImage>
                        </Card>
                    </Column>
                }
            </Row>
        </CustomVisibility>
    </Authorized>
    <NotAuthorized>
        <Alert Visible="true" Color="Color.Primary">
            <AlertMessage><Blazorise.Icon Name="FontAwesomeIcons.ExclamationTriangle"></Blazorise.Icon> Realizar login para utilizar essa funcionalidade</AlertMessage>
        </Alert>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    private MyProviders? myProviders { get; set; }
    private WishList? wishList { get; set; }
    private AllProviders? allProviders;

    private bool loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;

            await base.OnInitializedAsync();

            myProviders = await Http.MyProviders_Get(StorageService.Session);
            wishList = await Http.WishList_Get(StorageService.Session);
            allProviders = await Http.Provider_GetAll(StorageService.Session);

            loading = false;
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    public Task ShowProviderPopup(MyProvidersItem item)
    {
        return ModalService.Show<ProviderPopup>(item.name,
            x =>
            {
                x.Add(x => x.provider, allProviders?.Items.FirstOrDefault(f => f.id == item.id));
                x.Add(x => x.mediaType, MediaType.movie);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.ExtraLarge,
                });
    }

    public Task ShowMediaPopup(WishListItem item)
    {
        return ModalService.Show<MediaPopup>(item.name,
            x =>
            {
                x.Add(x => x.ServiceDetail, new Services.TMDB.MediaDetailService());
                x.Add(x => x.tmdb_id, item.id);
                x.Add(x => x.type, item.type);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }
}