@using SD.Shared.Models.Auth
@using SD.Shared.Models.Support;
@using SD.WEB.Modules.Support.Core;
@using Toolbelt.Blazor.PWA.Updater

@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject ILogger<MainLayout> Logger
@inject INotificationService Toast
@inject TicketApi TicketApi

<MediaQueryList>
    <Layout Sider="true" Style="height: var(--app-height);">
        <LayoutSider>
            <LayoutSiderContent>
                <NavMenu />
            </LayoutSiderContent>
        </LayoutSider>
        <Layout>
            <LayoutHeader Fixed="true">
                <HeadLayout></HeadLayout>
            </LayoutHeader>
            <LayoutContent Style="overflow-y: auto; overflow-x: hidden;">
                <Container Fluid="true" Padding="Padding.Is2">
                    <ErrorBoundary @ref="boundary">
                        <ChildContent>
                            @Body
                        </ChildContent>
                        <ErrorContent Context="ex">
                            @if (AppStateStatic.Language == Language.ptBR | AppStateStatic.Language == Language.ptPT)
                            {
                                <Alert Color="Color.Danger" Visible="true">
                                    <AlertDescription>
                                        <Blazorise.Icon Name="FontAwesomeIcons.Bug"></Blazorise.Icon> Não foi possível processar essa operação. Para abrir um ticket de suporte, <Blazorise.Link onclick="@(()=>SubmitForm(ex))" style="cursor: pointer;">clique aqui</Blazorise.Link>
                                    </AlertDescription>
                                </Alert>
                            }
                            else
                            {
                                <Alert Color="Color.Danger" Visible="true">
                                    <AlertDescription>
                                        <Blazorise.Icon Name="FontAwesomeIcons.Bug"></Blazorise.Icon> This operation could not be processed. To open a support ticket, <Blazorise.Link onclick="@(()=>SubmitForm(ex))" style="cursor: pointer;">click here</Blazorise.Link>
                                    </AlertDescription>
                                </Alert>
                            }
                        </ErrorContent>
                    </ErrorBoundary>
                </Container>
            </LayoutContent>
            <LayoutFooter Fixed="true" Display="Display.Block.None.OnWidescreen">
                <Bar Mode="BarMode.Horizontal" Breakpoint="Breakpoint.Mobile" CollapseMode="BarCollapseMode.Small" Background="Background.Secondary" ThemeContrast="ThemeContrast.Dark"
                     Padding="Padding.Is0.FromBottom.Is0.FromTop" Style="text-align: center; display: block;">
                    <BarBrand Class="mr-0">
                        <Button Color="GetColor(TypeButton.Home)" To="/" Type="ButtonType.Link" title="@GlobalTranslations.MenuHome" Size="Size.Small" Style="line-height: 1.3;">
                            <Blazorise.Icon Name="FontAwesomeIcons.Home" />
                            <span style="display: block; font-size: 0.60rem;">@GlobalTranslations.MenuHome</span>
                        </Button>
                        <Button Color="GetColor(TypeButton.Profile)" To="/profile" Type="ButtonType.Link" title="@GlobalTranslations.MenuProfile" Size="Size.Small" Style="line-height: 1.3;">
                            <BarIcon IconName="FontAwesomeIcons.UserCircle" />
                            <span style="display: block; font-size: 0.60rem;">@GlobalTranslations.MenuProfile</span>
                        </Button>
                        <Button Color="GetColor(TypeButton.Providers)" To="/providers" Type="ButtonType.Link" title="@GlobalTranslations.MenuProviders" Size="Size.Small" Style="line-height: 1.3;">
                            <BarIcon IconName="FontAwesomeIcons.PlayCircle" />
                            <span style="display: block; font-size: 0.60rem;">@GlobalTranslations.MenuProviders</span>
                        </Button>
                        <Button Color="GetColor(TypeButton.Suggestions)" To="/suggestions" Type="ButtonType.Link" title="@GlobalTranslations.MenuSuggestions" Size="Size.Small" Style="line-height: 1.3;">
                            <BarIcon IconName="FontAwesomeIcons.ListOl" />
                            <span style="display: block; font-size: 0.60rem;">@GlobalTranslations.MenuSuggestions</span>
                        </Button>
                        <Button Color="GetColor(TypeButton.Support)" To="/support" Type="ButtonType.Link" title="@GlobalTranslations.MenuSupport" Size="Size.Small" Style="line-height: 1.3;">
                            <BarIcon IconName="FontAwesomeIcons.Headset" />
                            <span style="display: block; font-size: 0.60rem;">@GlobalTranslations.MenuSupport</span>
                        </Button>
                    </BarBrand>
                </Bar>
            </LayoutFooter>
        </Layout>
    </Layout>
</MediaQueryList>

<NotificationProvider Location="NotificationLocation.End" DefaultInterval="10000" />
<PWAUpdater Text="@GlobalTranslations.PWAUpdaterText" ButtonCaption="@GlobalTranslations.PWAUpdaterButton" />

@code {
    [CascadingParameter] protected Task<AuthenticationState> authenticationState { get; set; } = default!;

    private enum TypeButton
    {
        Home, Profile, Providers, Suggestions, Support
    }

    private TypeButton CurrentButton;

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
        AppStateStatic.ShowError += async (msg) => { await Toast.Error(msg); };

        ChangeCurrentButton(Navigation.Uri);

        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        ChangeCurrentButton(args.Location);

        StateHasChanged();
    }

    private void ChangeCurrentButton(string location)
    {
        if (location.Contains("/profile")) CurrentButton = TypeButton.Profile;
        else if (location.Contains("/providers")) CurrentButton = TypeButton.Providers;
        else if (location.Contains("/suggestions")) CurrentButton = TypeButton.Suggestions;
        else if (location.Contains("/support")) CurrentButton = TypeButton.Support;
        else CurrentButton = TypeButton.Home;
    }

    private Color GetColor(TypeButton type)
    {
        if (CurrentButton == type)
            return Color.Dark;
        else
            return Color.Secondary;
    }

    ErrorBoundary? boundary;

    protected override void OnParametersSet()
    {
        boundary?.Recover();
    }

    public async Task SubmitForm(Exception exc)
    {
        try
        {
            var authState = await authenticationState;
            var user = authState?.User;

            var Ticket = new TicketModel();

            Ticket.TicketType = TicketType.BugReport;
            Ticket.Initialize(user?.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value);
            Ticket.Title = exc.Message ?? "erro desconhecido";
            Ticket.Description = exc.StackTrace;

            await TicketApi.Insert(Ticket);

            await Toast.Success("Ticket gerado com sucesso");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    [JSInvokable]
    public static void RegistrationSuccessful(TempClientePaddle client)
    {
        AppStateStatic.RegistrationSuccessful?.Invoke(client);
    }

    [JSInvokable]
    public static void ShowError(string error)
    {
        AppStateStatic.ShowError?.Invoke(error);
    }
}