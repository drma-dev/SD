@inherits ComponenteCore<PopupCatalog>
@inject ProviderServide ProviderServide
@inject Services.TMDB.DiscoverService DiscoverService

<Modal @ref="modal">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>@provider.name (@TypeMedia.GetName())</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody MaxHeight="70">
            <CardMediaList @ref="cardPopular" Service="@DiscoverService" CardHeader="@TranslationText.Popular"></CardMediaList>
            <CardMediaList @ref="cardNew" Service="@DiscoverService" CardHeader="@TranslationText.Release"></CardMediaList>
            <CardMediaList @ref="cardTopRated" Service="@DiscoverService" CardHeader="@TranslationText.TopRated"></CardMediaList>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@modal.Hide">@TranslationText.Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    public CardMediaList? cardPopular { get; set; }
    public CardMediaList? cardNew { get; set; }
    public CardMediaList? cardTopRated { get; set; }

    private Modal? modal;

    public Provider provider { get; set; } = new();

    public MediaType TypeMedia { get; set; }

    private Dictionary<string, string> GetExtraParameters(string provider_id, string sort_by)
    {
        return new Dictionary<string, string>() { { "with_watch_providers", provider_id }, { "sort_by", sort_by } }; ;
    }

    public async Task ShowModal(Provider provider, Settings settings, MediaType typeMedia)
    {
        this.provider = provider;
        this.TypeMedia = typeMedia;

        modal.Show();

        await cardPopular.LoadData(TypeMedia, GetExtraParameters(provider.id, "popularity.desc"), true);
        await cardNew.LoadData(TypeMedia, GetExtraParameters(provider.id, "primary_release_date.desc"), true);
        await cardTopRated.LoadData(TypeMedia, GetExtraParameters(provider.id, "vote_average.desc"), true);

        if (!provider.empty_catalog.HasValue || provider.empty_catalog.Value == true)
        {
            var AllProviders = await ProviderServide.GetAllProviders(Http, StorageService.Session);
            var provider_db = AllProviders.Single(s => s.id == provider.id);

            provider_db.empty_catalog = cardNew.ListMedia.Count < 9;

            StorageService.Local.SetItem("Data/providers.json", AllProviders);
        }
    }
}