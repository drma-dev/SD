@using SD.Shared.Model
@inherits ComponenteCore<CompleteListPopup>
@inject Services.TMDB.ListService Service
@inject Settings Settings

<ModalHeader>
    <ModalTitle>@CardHeader</ModalTitle>
    <CloseButton Clicked="HideModal" />
</ModalHeader>
<ModalBody MaxHeight="70">
    <CustomVisibility NoData="(!Items.Any())">
        <Row HorizontalGutter="4" VerticalGutter="4">
            @for (int i = 1; i <= Items.Count; i++)
            {
                var item = Items.ElementAt(i - 1);
                <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
                    <Card>
                        <Blazorise.Link Clicked="@(() => OpenPopupMedia(item))" Style="position: relative;">
                            @if (ShowOnlyYear)
                            {
                                <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@item.release_date?.Year</Badge>
                            }
                            else
                            {
                                <Badge Color="Color.Light" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; left: 3px;">@item.release_date?.ToShortDateString()</Badge>
                            }
                            @if (item.rating >= 8)
                            {
                                <Badge Color="Color.Success" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px;">@item.rating</Badge>
                            }
                            else if (item.rating >= 6)
                            {
                                <Badge Color="Color.Warning" TextColor="TextColor.Dark" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px;">@item.rating</Badge>
                            }
                            else if (item.rating > 0)
                            {
                                <Badge Color="Color.Danger" Padding="Padding.Is1" Style="font-size: 10px; position: absolute; top: 3px; right: 3px;">@item.rating</Badge>
                            }
                            @if (string.IsNullOrEmpty(item.poster_path_small))
                            {
                                <CardImage Source="nopicture.jpg" Alt="@item.title" Style="cursor: pointer;"></CardImage>

                                <Div Style="position: absolute; left: 0; right: 0; margin-left: auto; margin-right: auto; top: 115px;">
                                    @item.title
                                </Div>
                            }
                            else
                            {
                                var watched = watchedList?.Items.Any(a => a.id == item.tmdb_id & a.MediaType == item.MediaType) ?? false;
                                if (watched)
                                {
                                    <Blazorise.Icon Name="FontAwesomeIcons.Eye" IconSize="IconSize.x4"
                                        Style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: 0.7"></Blazorise.Icon>
                                }
                                <CardImage Source="@(item.poster_path_small)" Alt="@item.title" Style=@($"cursor: pointer; {(watched?"opacity: 0.3":"")}")></CardImage>
                            }
                        </Blazorise.Link>
                        @if (!string.IsNullOrEmpty(item.comments))
                        {
                            <CardBody Padding="Padding.Is1">
                                @foreach (var item in item.comments.Split(","))
                                {
                                    <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item</Badge>
                                }
                            </CardBody>
                        }
                    </Card>
                </Column>
                if ((i % 10) == 0)
                {
                    <div class="w-100"></div>
                }
            }
            @for (int i = 1; i <= (10 - Items.Count % 10); i++)
            {
                <Column ColumnSize="ColumnSize.Is(GetCustomStyle)" TextAlignment="TextAlignment.Center">
                </Column>
            }
        </Row>
        <Div TextAlignment="TextAlignment.Center">
            <Button Color="Color.Secondary" Margin="Margin.Is2" Clicked="LoadMore" Disabled="@(Items.Count>=maxItens|DisableLoadMore)">Carregar mais</Button>
        </Div>
    </CustomVisibility>
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="@HideModal" Float="Float.End">@TranslationText.Close</Button>
</ModalFooter>

@code {
    [Inject] public IModalService ModalService { get; set; } = default!;

    [Parameter] public EventCallback NextPage { get; set; }
    [Parameter] public string? CardHeader { get; set; }
    [Parameter] public HashSet<MediaDetail> Items { get; set; } = new();
    [Parameter] public string? list_id { get; set; }
    [Parameter] public int maxItens { get; set; } = 10;
    [Parameter] public bool IsIMDB { get; set; } = false;
    [Parameter] public bool ShowOnlyYear { get; set; } = true;
    [Parameter] public bool DisableLoadMore { get; set; } = false;

    private WatchedList? watchedList { get; set; }

    private string GetCustomStyle => "col-xl col-md-2 col-4";
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        watchedList = await Http.WatchedList_Get(StorageService.Session);
    }

    private async Task OpenPopupMedia(MediaDetail? media)
    {
        var tmdb_id = "";

        if (IsIMDB && media?.MediaType == MediaType.tv) //for now, only tv series (imdb) need this kind of workaround
        {
            tmdb_id = await TmdbExternalIdTvService.GetTmdbId(Http, StorageService.Session, media?.tmdb_id);
        }
        else
        {
            tmdb_id = media?.tmdb_id;
        }

        await ModalService.Show<MediaPopup>(media?.title,
            x =>
            {
                x.Add(x => x.ServiceDetail, new Services.TMDB.MediaDetailService());
                x.Add(x => x.tmdb_id, tmdb_id);
                x.Add(x => x.type, media?.MediaType);
                x.Add(x => x.ShowOnlyYear, ShowOnlyYear);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = false,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    public async Task HideModal()
    {
        await ModalService.Hide();
    }

    private async Task LoadMore()
    {
        if (NextPage.HasDelegate)
        {
            ++currentPage;
            await NextPage.InvokeAsync();
        }
        else
        {
            await Service.PopulateListMedia(Http, StorageService, Settings, Items, ++currentPage, GetExtraParameters(list_id));
        }
    }

    private Dictionary<string, string> GetExtraParameters(string? list_id)
    {
        if (string.IsNullOrEmpty(list_id)) throw new ArgumentNullException(nameof(list_id));

        return new Dictionary<string, string>() { { "list_id", list_id } };
    }
}
